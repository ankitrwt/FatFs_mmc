
SD_Card.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000031f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  000031f6  0000328a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000253  00800080  00800080  000032aa  2**0
                  ALLOC
  3 .debug_aranges 000000e0  00000000  00000000  000032aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000762  00000000  00000000  0000338a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000241a  00000000  00000000  00003aec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007f2  00000000  00000000  00005f06  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002131  00000000  00000000  000066f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003a0  00000000  00000000  0000882c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000009ec  00000000  00000000  00008bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000016d9  00000000  00000000  000095b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000ac91  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__ctors_end>
       4:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
       8:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
       c:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      10:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      14:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      18:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      1c:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      20:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      24:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      28:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      2c:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      30:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      34:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      38:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      3c:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      40:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      44:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      48:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      4c:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      50:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>

00000054 <__c.1911>:
      54:	20 46 72 65 65 20 4d 65 6d 6f 72 79 3a 20 00         Free Memory: .

00000063 <__c.1904>:
      63:	54 6f 74 61 6c 20 4d 65 6d 6f 72 79 3a 20 00        Total Memory: .

00000072 <__c.1798>:
      72:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
      82:	20 63 6c 75 73 74 65 72 00                           cluster.

0000008b <__c.1796>:
      8b:	45 6e 64 20 6f 66 20 43 6c 75 73 74 65 72 20 43     End of Cluster C
      9b:	68 61 69 6e 00                                      hain.

000000a0 <__c.1788>:
      a0:	20 46 69 6c 65 20 43 72 65 61 74 65 64 21 20 00      File Created! .

000000b0 <__c.1783>:
      b0:	20 46 69 6c 65 20 61 70 70 65 6e 64 65 64 21 00      File appended!.

000000c0 <__c.1780>:
      c0:	20 4e 6f 20 66 72 65 65 20 63 6c 75 73 74 65 72      No free cluster
      d0:	21 00                                               !.

000000d2 <__c.1771>:
      d2:	20 45 6e 74 65 72 20 74 65 78 74 20 28 65 6e 64      Enter text (end
      e2:	20 77 69 74 68 20 7e 29 3a 00                        with ~):.

000000ec <__c.1769>:
      ec:	20 4e 6f 20 66 72 65 65 20 63 6c 75 73 74 65 72      No free cluster
      fc:	21 00                                               !.

000000fe <__c.1767>:
      fe:	20 43 72 65 61 74 69 6e 67 20 46 69 6c 65 2e 2e      Creating File..
	...

0000010f <__c.1763>:
     10f:	20 46 69 6c 65 20 61 6c 72 65 61 64 79 20 65 78      File already ex
     11f:	69 73 74 73 2c 20 61 70 70 65 6e 64 69 6e 67 20     ists, appending 
     12f:	64 61 74 61 2e 2e 00                                data...

00000136 <__c.1710>:
     136:	49 6e 76 61 6c 69 64 20 66 69 6c 65 4e 61 6d 65     Invalid fileName
     146:	2e 2e 00                                            ...

00000149 <__c.1681>:
     149:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
     159:	20 63 6c 75 73 74 65 72 00                           cluster.

00000162 <__c.1631>:
     162:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
     172:	20 63 6c 75 73 74 65 72 00                           cluster.

0000017b <__c.1623>:
     17b:	52 4f 4f 54 00                                      ROOT.

00000180 <__c.1621>:
     180:	44 49 52 00                                         DIR.

00000184 <__c.1619>:
     184:	20 20 20 00                                            .

00000188 <__c.1617>:
     188:	46 49 4c 45 00                                      FILE.

0000018d <__c.1615>:
     18d:	20 20 20 00                                            .

00000191 <__c.1609>:
     191:	46 69 6c 65 20 64 65 6c 65 74 65 64 21 00           File deleted!.

0000019f <__c.1607>:
     19f:	44 65 6c 65 74 69 6e 67 2e 2e 00                    Deleting...

000001aa <__c.1602>:
     1aa:	46 69 6c 65 20 64 6f 65 73 20 6e 6f 74 20 65 78     File does not ex
     1ba:	69 73 74 21 00                                      ist!.

000001bf <__c.1676>:
     1bf:	20 49 6e 76 61 6c 69 64 20 6f 70 74 69 6f 6e 21      Invalid option!
	...

000001d0 <__c.1665>:
     1d0:	20 66 69 6c 65 20 6e 61 6d 65 20 74 6f 6f 20 6c      file name too l
     1e0:	6f 6e 67 2e 2e 00                                   ong...

000001e6 <__c.1658>:
     1e6:	45 6e 74 65 72 20 66 69 6c 65 20 6e 61 6d 65 3a     Enter file name:
     1f6:	20 00                                                .

000001f8 <__c.1652>:
     1f8:	52 65 61 64 20 73 75 63 63 65 73 73 66 75 6c 21     Read successful!
	...

00000209 <__c.1647>:
     209:	52 65 61 64 20 66 61 69 6c 65 64 2e 2e 00           Read failed...

00000217 <__c.1644>:
     217:	57 72 69 74 65 20 73 75 63 63 65 73 73 66 75 6c     Write successful
     227:	21 00                                               !.

00000229 <__c.1642>:
     229:	57 72 69 74 65 20 66 61 69 6c 65 64 2e 2e 00        Write failed...

00000238 <__c.1638>:
     238:	20 45 6e 74 65 72 20 74 65 78 74 20 28 45 6e 64      Enter text (End
     248:	20 77 69 74 68 20 7e 29 3a 00                        with ~):.

00000252 <__c.1634>:
     252:	45 72 61 73 65 64 21 00                             Erased!.

0000025a <__c.1632>:
     25a:	45 72 61 73 65 20 66 61 69 6c 65 64 2e 2e 00        Erase failed...

00000269 <__c.1629>:
     269:	45 6e 74 65 72 20 74 68 65 20 42 6c 6f 63 6b 20     Enter the Block 
     279:	6e 75 6d 62 65 72 20 28 30 30 30 30 2d 39 39 39     number (0000-999
     289:	39 29 3a 00                                         9):.

0000028d <__c.1626>:
     28d:	46 41 54 33 32 20 6f 70 74 69 6f 6e 73 20 64 69     FAT32 options di
     29d:	73 61 62 6c 65 64 21 00                             sabled!.

000002a5 <__c.1624>:
     2a5:	3e 20 53 65 6c 65 63 74 20 4f 70 74 69 6f 6e 20     > Select Option 
     2b5:	28 30 2d 39 2f 61 2f 62 2f 63 29 3a 20 00           (0-9/a/b/c): .

000002c3 <__c.1622>:
     2c3:	3e 20 62 3a 20 55 70 64 61 74 65 20 44 61 74 65     > b: Update Date
     2d3:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     2e3:	20 63 3a 20 55 70 64 61 74 65 20 54 69 6d 65 00      c: Update Time.

000002f3 <__c.1620>:
     2f3:	3e 20 39 3a 20 52 65 61 64 20 53 44 20 4d 65 6d     > 9: Read SD Mem
     303:	6f 72 79 20 43 61 70 61 63 69 74 79 20 20 20 20     ory Capacity    
     313:	20 61 3a 20 53 68 6f 77 20 44 61 74 65 20 26 20      a: Show Date & 
     323:	54 69 6d 65 00                                      Time.

00000328 <__c.1618>:
     328:	3e 20 37 3a 20 57 72 69 74 65 20 46 69 6c 65 20     > 7: Write File 
     338:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     348:	20 38 3a 20 44 65 6c 65 74 65 20 46 69 6c 65 00      8: Delete File.

00000358 <__c.1616>:
     358:	3e 20 35 3a 20 47 65 74 20 66 69 6c 65 20 6c 69     > 5: Get file li
     368:	73 74 20 20 20 20 20 20 20 20 20 20 20 20 20 20     st              
     378:	20 36 3a 20 52 65 61 64 20 46 69 6c 65 00            6: Read File.

00000386 <__c.1614>:
     386:	3e 20 31 3a 20 57 72 69 74 65 20 73 69 6e 67 6c     > 1: Write singl
     396:	65 20 42 6c 6f 63 6b 20 20 20 20 20 20 20 20 20     e Block         
     3a6:	20 32 3a 20 52 65 61 64 20 73 69 6e 67 6c 65 20      2: Read single 
     3b6:	42 6c 6f 63 6b 00                                   Block.

000003bc <__c.1612>:
     3bc:	3e 20 30 3a 20 45 72 61 73 65 20 42 6c 6f 63 6b     > 0: Erase Block
     3cc:	73 20 00                                            s .

000003cf <__c.1610>:
     3cf:	50 72 65 73 73 20 61 6e 79 20 6b 65 79 2e 2e 2e     Press any key...
	...

000003e0 <__c.1608>:
     3e0:	46 41 54 33 32 20 6e 6f 74 20 66 6f 75 6e 64 21     FAT32 not found!
	...

000003f1 <__c.1606>:
     3f1:	55 6e 6b 6e 6f 77 6e 20 53 44 20 43 61 72 64 20     Unknown SD Card 
     401:	44 65 74 65 63 74 65 64 21 00                       Detected!.

0000040b <__c.1603>:
     40b:	53 74 61 6e 64 61 72 64 20 43 61 70 61 63 69 74     Standard Capacit
     41b:	79 20 43 61 72 64 20 28 56 65 72 20 32 2e 78 29     y Card (Ver 2.x)
     42b:	20 44 65 74 65 63 74 65 64 21 00                     Detected!.

00000436 <__c.1600>:
     436:	48 69 67 68 20 43 61 70 61 63 69 74 79 20 43 61     High Capacity Ca
     446:	72 64 20 44 65 74 65 63 74 65 64 21 00              rd Detected!.

00000453 <__c.1596>:
     453:	53 74 61 6e 64 61 72 64 20 43 61 70 61 63 69 74     Standard Capacit
     463:	79 20 43 61 72 64 20 28 56 65 72 20 31 2e 78 29     y Card (Ver 1.x)
     473:	20 44 65 74 65 63 74 65 64 21 00                     Detected!.

0000047e <__c.1592>:
     47e:	43 61 72 64 20 49 6e 69 74 69 61 6c 69 7a 61 74     Card Initializat
     48e:	69 6f 6e 20 66 61 69 6c 65 64 2e 2e 00              ion failed...

0000049b <__c.1590>:
     49b:	53 44 20 63 61 72 64 20 6e 6f 74 20 64 65 74 65     SD card not dete
     4ab:	63 74 65 64 2e 2e 00                                cted...

000004b2 <__c.1585>:
     4b2:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     4c2:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     4d2:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     4e2:	2a 2a 2a 2a 00                                      ****.

000004e7 <__c.1583>:
     4e7:	20 20 20 20 44 68 61 72 6d 61 6e 69 27 73 20 6d         Dharmani's m
     4f7:	69 63 72 6f 53 44 20 43 61 72 64 20 54 65 73 74     icroSD Card Test
     507:	69 6e 67 2e 2e 20 20 00                             ing..  .

0000050f <__c.1581>:
     50f:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     51f:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     52f:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     53f:	2a 2a 2a 2a 00                                      ****.

00000544 <__c.1674>:
     544:	49 6e 76 61 6c 69 64 20 45 6e 74 72 79 2e 2e 00     Invalid Entry...

00000554 <__c.1672>:
     554:	44 61 74 65 20 55 70 64 61 74 65 20 46 61 69 6c     Date Update Fail
     564:	65 64 2e 2e 00                                      ed...

00000569 <__c.1670>:
     569:	44 61 74 65 20 55 70 64 61 74 65 64 20 73 75 63     Date Updated suc
     579:	65 73 73 66 75 6c 6c 79 21 00                       essfully!.

00000583 <__c.1668>:
     583:	45 6e 74 65 72 20 44 61 79 20 28 53 75 6e 64 61     Enter Day (Sunda
     593:	79 3a 30 2c 20 4d 6f 6e 64 61 79 3a 31 2e 2e 2e     y:0, Monday:1...
     5a3:	29 20 28 30 2d 36 29 3a 00                          ) (0-6):.

000005ac <__c.1665>:
     5ac:	45 6e 74 65 72 20 44 61 74 65 20 28 64 64 2f 6d     Enter Date (dd/m
     5bc:	6d 2f 79 79 29 3a 00                                m/yy):.

000005c3 <__c.1642>:
     5c3:	49 6e 76 61 6c 69 64 20 45 6e 74 72 79 2e 2e 00     Invalid Entry...

000005d3 <__c.1640>:
     5d3:	54 69 6d 65 20 55 70 64 61 74 65 20 46 61 69 6c     Time Update Fail
     5e3:	65 64 2e 2e 00                                      ed...

000005e8 <__c.1638>:
     5e8:	54 69 6d 65 20 55 70 64 61 74 65 64 20 73 75 63     Time Updated suc
     5f8:	65 73 73 66 75 6c 6c 79 21 00                       essfully!.

00000602 <__c.1635>:
     602:	45 6e 74 65 72 20 54 69 6d 65 20 69 6e 20 32 34     Enter Time in 24
     612:	68 20 66 6f 72 6d 61 74 28 68 68 3a 6d 6d 3a 73     h format(hh:mm:s
     622:	73 29 3a 00                                         s):.

00000626 <__c.1534>:
     626:	55 6e 6b 6e 6f 77 6e 00                             Unknown.

0000062e <__c.1531>:
     62e:	53 61 74 75 72 64 61 79 00                          Saturday.

00000637 <__c.1528>:
     637:	46 72 69 64 61 79 00                                Friday.

0000063e <__c.1525>:
     63e:	54 68 75 72 73 64 61 79 00                          Thursday.

00000647 <__c.1522>:
     647:	57 65 64 6e 65 73 64 61 79 00                       Wednesday.

00000651 <__c.1519>:
     651:	54 75 65 73 64 61 79 00                             Tuesday.

00000659 <__c.1516>:
     659:	4d 6f 6e 64 61 79 00                                Monday.

00000660 <__c.1512>:
     660:	53 75 6e 64 61 79 00                                Sunday.

00000667 <__c.1509>:
     667:	20 20 20 20 44 61 79 3a 20 00                           Day: .

00000671 <__c.1502>:
     671:	44 61 74 65 3a 00                                   Date:.

00000677 <__c.1494>:
     677:	54 69 6d 65 3a 00 00                                Time:..

0000067e <__ctors_end>:
     67e:	11 24       	eor	r1, r1
     680:	1f be       	out	0x3f, r1	; 63
     682:	cf e5       	ldi	r28, 0x5F	; 95
     684:	d8 e0       	ldi	r29, 0x08	; 8
     686:	de bf       	out	0x3e, r29	; 62
     688:	cd bf       	out	0x3d, r28	; 61

0000068a <__do_copy_data>:
     68a:	10 e0       	ldi	r17, 0x00	; 0
     68c:	a0 e6       	ldi	r26, 0x60	; 96
     68e:	b0 e0       	ldi	r27, 0x00	; 0
     690:	e6 ef       	ldi	r30, 0xF6	; 246
     692:	f1 e3       	ldi	r31, 0x31	; 49
     694:	02 c0       	rjmp	.+4      	; 0x69a <.do_copy_data_start>

00000696 <.do_copy_data_loop>:
     696:	05 90       	lpm	r0, Z+
     698:	0d 92       	st	X+, r0

0000069a <.do_copy_data_start>:
     69a:	a0 38       	cpi	r26, 0x80	; 128
     69c:	b1 07       	cpc	r27, r17
     69e:	d9 f7       	brne	.-10     	; 0x696 <.do_copy_data_loop>

000006a0 <__do_clear_bss>:
     6a0:	12 e0       	ldi	r17, 0x02	; 2
     6a2:	a0 e8       	ldi	r26, 0x80	; 128
     6a4:	b0 e0       	ldi	r27, 0x00	; 0
     6a6:	01 c0       	rjmp	.+2      	; 0x6aa <.do_clear_bss_start>

000006a8 <.do_clear_bss_loop>:
     6a8:	1d 92       	st	X+, r1

000006aa <.do_clear_bss_start>:
     6aa:	a3 3d       	cpi	r26, 0xD3	; 211
     6ac:	b1 07       	cpc	r27, r17
     6ae:	e1 f7       	brne	.-8      	; 0x6a8 <.do_clear_bss_loop>
     6b0:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <main>
     6b4:	0c 94 f9 18 	jmp	0x31f2	; 0x31f2 <_exit>

000006b8 <__bad_interrupt>:
     6b8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006bc <getFirstSector>:
//Function: to calculate first sector address of any given cluster
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
     6bc:	ef 92       	push	r14
     6be:	ff 92       	push	r15
     6c0:	0f 93       	push	r16
     6c2:	1f 93       	push	r17
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
     6c4:	20 91 a5 02 	lds	r18, 0x02A5
     6c8:	30 91 a6 02 	lds	r19, 0x02A6
     6cc:	e0 90 8d 00 	lds	r14, 0x008D
     6d0:	f0 90 8e 00 	lds	r15, 0x008E
     6d4:	00 91 8f 00 	lds	r16, 0x008F
     6d8:	10 91 90 00 	lds	r17, 0x0090
     6dc:	62 50       	subi	r22, 0x02	; 2
     6de:	70 40       	sbci	r23, 0x00	; 0
     6e0:	80 40       	sbci	r24, 0x00	; 0
     6e2:	90 40       	sbci	r25, 0x00	; 0
     6e4:	40 e0       	ldi	r20, 0x00	; 0
     6e6:	50 e0       	ldi	r21, 0x00	; 0
     6e8:	0e 94 b8 18 	call	0x3170	; 0x3170 <__mulsi3>
     6ec:	9b 01       	movw	r18, r22
     6ee:	ac 01       	movw	r20, r24
     6f0:	2e 0d       	add	r18, r14
     6f2:	3f 1d       	adc	r19, r15
     6f4:	40 1f       	adc	r20, r16
     6f6:	51 1f       	adc	r21, r17
}
     6f8:	b9 01       	movw	r22, r18
     6fa:	ca 01       	movw	r24, r20
     6fc:	1f 91       	pop	r17
     6fe:	0f 91       	pop	r16
     700:	ff 90       	pop	r15
     702:	ef 90       	pop	r14
     704:	08 95       	ret

00000706 <displayMemory>:
//Arguments: 1. unsigned char flag. If flag is HIGH, memory will be displayed in KBytes, else in Bytes. 
//			 2. unsigned long memory value
//return: none
//************************************************************
void displayMemory (unsigned char flag, unsigned long memory)
{
     706:	8f 92       	push	r8
     708:	9f 92       	push	r9
     70a:	af 92       	push	r10
     70c:	bf 92       	push	r11
     70e:	cf 92       	push	r12
     710:	df 92       	push	r13
     712:	ef 92       	push	r14
     714:	ff 92       	push	r15
     716:	0f 93       	push	r16
     718:	df 93       	push	r29
     71a:	cf 93       	push	r28
     71c:	cd b7       	in	r28, 0x3d	; 61
     71e:	de b7       	in	r29, 0x3e	; 62
     720:	64 97       	sbiw	r28, 0x14	; 20
     722:	0f b6       	in	r0, 0x3f	; 63
     724:	f8 94       	cli
     726:	de bf       	out	0x3e, r29	; 62
     728:	0f be       	out	0x3f, r0	; 63
     72a:	cd bf       	out	0x3d, r28	; 61
     72c:	98 2e       	mov	r9, r24
     72e:	6a 01       	movw	r12, r20
     730:	7b 01       	movw	r14, r22
  unsigned char memoryString[] = "              Bytes"; //19 character long string for memory display
     732:	de 01       	movw	r26, r28
     734:	11 96       	adiw	r26, 0x01	; 1
     736:	e0 e6       	ldi	r30, 0x60	; 96
     738:	f0 e0       	ldi	r31, 0x00	; 0
     73a:	84 e1       	ldi	r24, 0x14	; 20
     73c:	01 90       	ld	r0, Z+
     73e:	0d 92       	st	X+, r0
     740:	81 50       	subi	r24, 0x01	; 1
     742:	e1 f7       	brne	.-8      	; 0x73c <displayMemory+0x36>
     744:	0c e0       	ldi	r16, 0x0C	; 12
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
  {
    if(i==5 || i==9) 
	{
	   memoryString[i-1] = ',';  
     746:	8c e2       	ldi	r24, 0x2C	; 44
     748:	88 2e       	mov	r8, r24
{
  unsigned char memoryString[] = "              Bytes"; //19 character long string for memory display
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
  {
    if(i==5 || i==9) 
     74a:	05 30       	cpi	r16, 0x05	; 5
     74c:	11 f0       	breq	.+4      	; 0x752 <displayMemory+0x4c>
     74e:	09 30       	cpi	r16, 0x09	; 9
     750:	29 f4       	brne	.+10     	; 0x75c <displayMemory+0x56>
	{
	   memoryString[i-1] = ',';  
     752:	fe 01       	movw	r30, r28
     754:	e0 0f       	add	r30, r16
     756:	f1 1d       	adc	r31, r1
     758:	80 82       	st	Z, r8
	   i--;
     75a:	01 50       	subi	r16, 0x01	; 1
	}
    memoryString[i-1] = (memory % 10) | 0x30;
     75c:	5e 01       	movw	r10, r28
     75e:	a0 0e       	add	r10, r16
     760:	b1 1c       	adc	r11, r1
     762:	c7 01       	movw	r24, r14
     764:	b6 01       	movw	r22, r12
     766:	2a e0       	ldi	r18, 0x0A	; 10
     768:	30 e0       	ldi	r19, 0x00	; 0
     76a:	40 e0       	ldi	r20, 0x00	; 0
     76c:	50 e0       	ldi	r21, 0x00	; 0
     76e:	0e 94 d7 18 	call	0x31ae	; 0x31ae <__udivmodsi4>
     772:	60 63       	ori	r22, 0x30	; 48
     774:	f5 01       	movw	r30, r10
     776:	60 83       	st	Z, r22
    memory /= 10;
     778:	c7 01       	movw	r24, r14
     77a:	b6 01       	movw	r22, r12
     77c:	2a e0       	ldi	r18, 0x0A	; 10
     77e:	30 e0       	ldi	r19, 0x00	; 0
     780:	40 e0       	ldi	r20, 0x00	; 0
     782:	50 e0       	ldi	r21, 0x00	; 0
     784:	0e 94 d7 18 	call	0x31ae	; 0x31ae <__udivmodsi4>
     788:	c9 01       	movw	r24, r18
     78a:	da 01       	movw	r26, r20
     78c:	6c 01       	movw	r12, r24
     78e:	7d 01       	movw	r14, r26
	if(memory == 0) break;
     790:	c1 14       	cp	r12, r1
     792:	d1 04       	cpc	r13, r1
     794:	e1 04       	cpc	r14, r1
     796:	f1 04       	cpc	r15, r1
     798:	11 f0       	breq	.+4      	; 0x79e <displayMemory+0x98>
//************************************************************
void displayMemory (unsigned char flag, unsigned long memory)
{
  unsigned char memoryString[] = "              Bytes"; //19 character long string for memory display
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
     79a:	01 50       	subi	r16, 0x01	; 1
     79c:	b1 f6       	brne	.-84     	; 0x74a <displayMemory+0x44>
	}
    memoryString[i-1] = (memory % 10) | 0x30;
    memory /= 10;
	if(memory == 0) break;
  }
  if(flag == HIGH)  memoryString[13] = 'K';
     79e:	f1 e0       	ldi	r31, 0x01	; 1
     7a0:	9f 16       	cp	r9, r31
     7a2:	11 f4       	brne	.+4      	; 0x7a8 <displayMemory+0xa2>
     7a4:	8b e4       	ldi	r24, 0x4B	; 75
     7a6:	8e 87       	std	Y+14, r24	; 0x0e
  transmitString(memoryString);
     7a8:	ce 01       	movw	r24, r28
     7aa:	01 96       	adiw	r24, 0x01	; 1
     7ac:	0e 94 48 14 	call	0x2890	; 0x2890 <transmitString>
}
     7b0:	64 96       	adiw	r28, 0x14	; 20
     7b2:	0f b6       	in	r0, 0x3f	; 63
     7b4:	f8 94       	cli
     7b6:	de bf       	out	0x3e, r29	; 62
     7b8:	0f be       	out	0x3f, r0	; 63
     7ba:	cd bf       	out	0x3d, r28	; 61
     7bc:	cf 91       	pop	r28
     7be:	df 91       	pop	r29
     7c0:	0f 91       	pop	r16
     7c2:	ff 90       	pop	r15
     7c4:	ef 90       	pop	r14
     7c6:	df 90       	pop	r13
     7c8:	cf 90       	pop	r12
     7ca:	bf 90       	pop	r11
     7cc:	af 90       	pop	r10
     7ce:	9f 90       	pop	r9
     7d0:	8f 90       	pop	r8
     7d2:	08 95       	ret

000007d4 <convertFileName>:
//Function: to convert normal short file name into FAT format
//Arguments: pointer to the file name
//return: 0, if successful else 1.
//***************************************************************************
unsigned char convertFileName (unsigned char *fileName)
{
     7d4:	0f 93       	push	r16
     7d6:	1f 93       	push	r17
     7d8:	df 93       	push	r29
     7da:	cf 93       	push	r28
     7dc:	cd b7       	in	r28, 0x3d	; 61
     7de:	de b7       	in	r29, 0x3e	; 62
     7e0:	2b 97       	sbiw	r28, 0x0b	; 11
     7e2:	0f b6       	in	r0, 0x3f	; 63
     7e4:	f8 94       	cli
     7e6:	de bf       	out	0x3e, r29	; 62
     7e8:	0f be       	out	0x3f, r0	; 63
     7ea:	cd bf       	out	0x3d, r28	; 61
     7ec:	8c 01       	movw	r16, r24
     7ee:	58 2f       	mov	r21, r24
     7f0:	a1 2f       	mov	r26, r17
     7f2:	fc 01       	movw	r30, r24
     7f4:	40 e0       	ldi	r20, 0x00	; 0
unsigned char fileNameFAT[11];
unsigned char j, k;

for(j=0; j<12; j++)
if(fileName[j] == '.') break;
     7f6:	80 81       	ld	r24, Z
     7f8:	8e 32       	cpi	r24, 0x2E	; 46
     7fa:	19 f4       	brne	.+6      	; 0x802 <convertFileName+0x2e>

if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}
     7fc:	49 30       	cpi	r20, 0x09	; 9
     7fe:	30 f0       	brcs	.+12     	; 0x80c <convertFileName+0x38>
     800:	0e c0       	rjmp	.+28     	; 0x81e <convertFileName+0x4a>
unsigned char convertFileName (unsigned char *fileName)
{
unsigned char fileNameFAT[11];
unsigned char j, k;

for(j=0; j<12; j++)
     802:	4f 5f       	subi	r20, 0xFF	; 255
     804:	31 96       	adiw	r30, 0x01	; 1
     806:	4c 30       	cpi	r20, 0x0C	; 12
     808:	b1 f7       	brne	.-20     	; 0x7f6 <convertFileName+0x22>
     80a:	09 c0       	rjmp	.+18     	; 0x81e <convertFileName+0x4a>
     80c:	be 01       	movw	r22, r28
     80e:	6f 5f       	subi	r22, 0xFF	; 255
     810:	7f 4f       	sbci	r23, 0xFF	; 255
     812:	85 2f       	mov	r24, r21
     814:	9a 2f       	mov	r25, r26
     816:	9c 01       	movw	r18, r24
     818:	f9 01       	movw	r30, r18
     81a:	db 01       	movw	r26, r22
     81c:	08 c0       	rjmp	.+16     	; 0x82e <convertFileName+0x5a>
if(fileName[j] == '.') break;

if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}
     81e:	86 e3       	ldi	r24, 0x36	; 54
     820:	91 e0       	ldi	r25, 0x01	; 1
     822:	0e 94 3e 14 	call	0x287c	; 0x287c <transmitString_F>
     826:	81 e0       	ldi	r24, 0x01	; 1
     828:	52 c0       	rjmp	.+164    	; 0x8ce <__stack+0x6f>

for(k=0; k<j; k++) //setting file name
  fileNameFAT[k] = fileName[k];
     82a:	81 91       	ld	r24, Z+
     82c:	8d 93       	st	X+, r24
for(j=0; j<12; j++)
if(fileName[j] == '.') break;

if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}

for(k=0; k<j; k++) //setting file name
     82e:	8e 2f       	mov	r24, r30
     830:	85 1b       	sub	r24, r21
     832:	84 17       	cp	r24, r20
     834:	d0 f3       	brcs	.-12     	; 0x82a <convertFileName+0x56>
     836:	84 2f       	mov	r24, r20
  fileNameFAT[k] = fileName[k];

for(k=j; k<=7; k++) //filling file name trail with blanks
  fileNameFAT[k] = ' ';
     838:	9e 01       	movw	r18, r28
     83a:	2f 5f       	subi	r18, 0xFF	; 255
     83c:	3f 4f       	sbci	r19, 0xFF	; 255
     83e:	90 e2       	ldi	r25, 0x20	; 32
     840:	05 c0       	rjmp	.+10     	; 0x84c <convertFileName+0x78>
     842:	f9 01       	movw	r30, r18
     844:	e8 0f       	add	r30, r24
     846:	f1 1d       	adc	r31, r1
     848:	90 83       	st	Z, r25
if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}

for(k=0; k<j; k++) //setting file name
  fileNameFAT[k] = fileName[k];

for(k=j; k<=7; k++) //filling file name trail with blanks
     84a:	8f 5f       	subi	r24, 0xFF	; 255
     84c:	88 30       	cpi	r24, 0x08	; 8
     84e:	c9 f7       	brne	.-14     	; 0x842 <convertFileName+0x6e>
  fileNameFAT[k] = ' ';

j++;
     850:	24 2f       	mov	r18, r20
     852:	2f 5f       	subi	r18, 0xFF	; 255
{
  if(fileName[j] != 0)
    fileNameFAT[k] = fileName[j++];
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
     854:	ae 01       	movw	r20, r28
     856:	4f 5f       	subi	r20, 0xFF	; 255
     858:	5f 4f       	sbci	r21, 0xFF	; 255
     85a:	30 e2       	ldi	r19, 0x20	; 32
  fileNameFAT[k] = ' ';

j++;
for(k=8; k<11; k++) //setting file extention
{
  if(fileName[j] != 0)
     85c:	f8 01       	movw	r30, r16
     85e:	e2 0f       	add	r30, r18
     860:	f1 1d       	adc	r31, r1
     862:	90 81       	ld	r25, Z
     864:	99 23       	and	r25, r25
     866:	59 f0       	breq	.+22     	; 0x87e <__stack+0x1f>
    fileNameFAT[k] = fileName[j++];
     868:	fa 01       	movw	r30, r20
     86a:	e8 0f       	add	r30, r24
     86c:	f1 1d       	adc	r31, r1
     86e:	90 83       	st	Z, r25
     870:	2f 5f       	subi	r18, 0xFF	; 255
     872:	07 c0       	rjmp	.+14     	; 0x882 <__stack+0x23>
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
     874:	fa 01       	movw	r30, r20
     876:	e8 0f       	add	r30, r24
     878:	f1 1d       	adc	r31, r1
     87a:	30 83       	st	Z, r19
     87c:	8f 5f       	subi	r24, 0xFF	; 255
for(k=8; k<11; k++) //setting file extention
{
  if(fileName[j] != 0)
    fileNameFAT[k] = fileName[j++];
  else //filling extension trail with blanks
    while(k<11)
     87e:	8b 30       	cpi	r24, 0x0B	; 11
     880:	c8 f3       	brcs	.-14     	; 0x874 <__stack+0x15>

for(k=j; k<=7; k++) //filling file name trail with blanks
  fileNameFAT[k] = ' ';

j++;
for(k=8; k<11; k++) //setting file extention
     882:	8f 5f       	subi	r24, 0xFF	; 255
     884:	8b 30       	cpi	r24, 0x0B	; 11
     886:	50 f3       	brcs	.-44     	; 0x85c <convertFileName+0x88>
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
}

for(j=0; j<11; j++) //converting small letters to caps
     888:	9e 01       	movw	r18, r28
     88a:	24 5f       	subi	r18, 0xF4	; 244
     88c:	3f 4f       	sbci	r19, 0xFF	; 255
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
     88e:	fb 01       	movw	r30, r22
     890:	90 81       	ld	r25, Z
     892:	89 2f       	mov	r24, r25
     894:	81 56       	subi	r24, 0x61	; 97
     896:	8a 31       	cpi	r24, 0x1A	; 26
     898:	10 f4       	brcc	.+4      	; 0x89e <__stack+0x3f>
    fileNameFAT[j] -= 0x20;
     89a:	90 52       	subi	r25, 0x20	; 32
     89c:	90 83       	st	Z, r25
     89e:	6f 5f       	subi	r22, 0xFF	; 255
     8a0:	7f 4f       	sbci	r23, 0xFF	; 255
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
}

for(j=0; j<11; j++) //converting small letters to caps
     8a2:	62 17       	cp	r22, r18
     8a4:	73 07       	cpc	r23, r19
     8a6:	99 f7       	brne	.-26     	; 0x88e <__stack+0x2f>
     8a8:	20 e0       	ldi	r18, 0x00	; 0
     8aa:	30 e0       	ldi	r19, 0x00	; 0
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
    fileNameFAT[j] -= 0x20;

for(j=0; j<11; j++)
  fileName[j] = fileNameFAT[j];
     8ac:	ae 01       	movw	r20, r28
     8ae:	4f 5f       	subi	r20, 0xFF	; 255
     8b0:	5f 4f       	sbci	r21, 0xFF	; 255
     8b2:	f8 01       	movw	r30, r16
     8b4:	e2 0f       	add	r30, r18
     8b6:	f3 1f       	adc	r31, r19
     8b8:	da 01       	movw	r26, r20
     8ba:	a2 0f       	add	r26, r18
     8bc:	b3 1f       	adc	r27, r19
     8be:	8c 91       	ld	r24, X
     8c0:	80 83       	st	Z, r24
     8c2:	2f 5f       	subi	r18, 0xFF	; 255
     8c4:	3f 4f       	sbci	r19, 0xFF	; 255

for(j=0; j<11; j++) //converting small letters to caps
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
    fileNameFAT[j] -= 0x20;

for(j=0; j<11; j++)
     8c6:	2b 30       	cpi	r18, 0x0B	; 11
     8c8:	31 05       	cpc	r19, r1
     8ca:	99 f7       	brne	.-26     	; 0x8b2 <__stack+0x53>
     8cc:	80 e0       	ldi	r24, 0x00	; 0
  fileName[j] = fileNameFAT[j];

return 0;
}
     8ce:	2b 96       	adiw	r28, 0x0b	; 11
     8d0:	0f b6       	in	r0, 0x3f	; 63
     8d2:	f8 94       	cli
     8d4:	de bf       	out	0x3e, r29	; 62
     8d6:	0f be       	out	0x3f, r0	; 63
     8d8:	cd bf       	out	0x3d, r28	; 61
     8da:	cf 91       	pop	r28
     8dc:	df 91       	pop	r29
     8de:	1f 91       	pop	r17
     8e0:	0f 91       	pop	r16
     8e2:	08 95       	ret

000008e4 <searchNextFreeCluster>:
//          starting from a specified cluster
//Arguments: Starting cluster
//return: the next free cluster
//****************************************************************
unsigned long searchNextFreeCluster (unsigned long startCluster)
{
     8e4:	6f 92       	push	r6
     8e6:	7f 92       	push	r7
     8e8:	8f 92       	push	r8
     8ea:	9f 92       	push	r9
     8ec:	af 92       	push	r10
     8ee:	bf 92       	push	r11
     8f0:	cf 92       	push	r12
     8f2:	df 92       	push	r13
     8f4:	ef 92       	push	r14
     8f6:	ff 92       	push	r15
     8f8:	0f 93       	push	r16
     8fa:	1f 93       	push	r17
  unsigned long cluster, *value, sector;
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
     8fc:	60 78       	andi	r22, 0x80	; 128
     8fe:	3b 01       	movw	r6, r22
     900:	4c 01       	movw	r8, r24
     902:	22 e0       	ldi	r18, 0x02	; 2
     904:	66 0c       	add	r6, r6
     906:	77 1c       	adc	r7, r7
     908:	88 1c       	adc	r8, r8
     90a:	99 1c       	adc	r9, r9
     90c:	2a 95       	dec	r18
     90e:	d1 f7       	brne	.-12     	; 0x904 <searchNextFreeCluster+0x20>
     910:	5b 01       	movw	r10, r22
     912:	6c 01       	movw	r12, r24
     914:	50 c0       	rjmp	.+160    	; 0x9b6 <searchNextFreeCluster+0xd2>
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
     916:	e0 90 b0 02 	lds	r14, 0x02B0
     91a:	f0 90 b1 02 	lds	r15, 0x02B1
     91e:	20 91 95 00 	lds	r18, 0x0095
     922:	30 91 96 00 	lds	r19, 0x0096
      SD_readSingleBlock(sector);
     926:	00 e0       	ldi	r16, 0x00	; 0
     928:	10 e0       	ldi	r17, 0x00	; 0
     92a:	80 91 a7 02 	lds	r24, 0x02A7
     92e:	90 91 a8 02 	lds	r25, 0x02A8
     932:	a0 91 a9 02 	lds	r26, 0x02A9
     936:	b0 91 aa 02 	lds	r27, 0x02AA
     93a:	e8 0e       	add	r14, r24
     93c:	f9 1e       	adc	r15, r25
     93e:	0a 1f       	adc	r16, r26
     940:	1b 1f       	adc	r17, r27
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e0       	ldi	r21, 0x00	; 0
     946:	c4 01       	movw	r24, r8
     948:	b3 01       	movw	r22, r6
     94a:	0e 94 d7 18 	call	0x31ae	; 0x31ae <__udivmodsi4>
     94e:	e2 0e       	add	r14, r18
     950:	f3 1e       	adc	r15, r19
     952:	04 1f       	adc	r16, r20
     954:	15 1f       	adc	r17, r21
     956:	c8 01       	movw	r24, r16
     958:	b7 01       	movw	r22, r14
     95a:	0e 94 65 13 	call	0x26ca	; 0x26ca <SD_readSingleBlock>
     95e:	60 e0       	ldi	r22, 0x00	; 0
      for(i=0; i<128; i++)
      {
       	 value = (unsigned long *) &buffer[i*4];
         if(((*value) & 0x0fffffff) == 0)
     960:	e6 2f       	mov	r30, r22
     962:	f0 e0       	ldi	r31, 0x00	; 0
     964:	ee 0f       	add	r30, r30
     966:	ff 1f       	adc	r31, r31
     968:	ee 0f       	add	r30, r30
     96a:	ff 1f       	adc	r31, r31
     96c:	eb 55       	subi	r30, 0x5B	; 91
     96e:	ff 4f       	sbci	r31, 0xFF	; 255
     970:	80 81       	ld	r24, Z
     972:	91 81       	ldd	r25, Z+1	; 0x01
     974:	a2 81       	ldd	r26, Z+2	; 0x02
     976:	b3 81       	ldd	r27, Z+3	; 0x03
     978:	bf 70       	andi	r27, 0x0F	; 15
     97a:	00 97       	sbiw	r24, 0x00	; 0
     97c:	a1 05       	cpc	r26, r1
     97e:	b1 05       	cpc	r27, r1
     980:	39 f4       	brne	.+14     	; 0x990 <searchNextFreeCluster+0xac>
            return(cluster+i);
     982:	a6 01       	movw	r20, r12
     984:	95 01       	movw	r18, r10
     986:	26 0f       	add	r18, r22
     988:	31 1d       	adc	r19, r1
     98a:	41 1d       	adc	r20, r1
     98c:	51 1d       	adc	r21, r1
     98e:	25 c0       	rjmp	.+74     	; 0x9da <searchNextFreeCluster+0xf6>
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
     990:	6f 5f       	subi	r22, 0xFF	; 255
     992:	60 38       	cpi	r22, 0x80	; 128
     994:	29 f7       	brne	.-54     	; 0x960 <searchNextFreeCluster+0x7c>
{
  unsigned long cluster, *value, sector;
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
     996:	80 e8       	ldi	r24, 0x80	; 128
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	a0 e0       	ldi	r26, 0x00	; 0
     99c:	b0 e0       	ldi	r27, 0x00	; 0
     99e:	a8 0e       	add	r10, r24
     9a0:	b9 1e       	adc	r11, r25
     9a2:	ca 1e       	adc	r12, r26
     9a4:	db 1e       	adc	r13, r27
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	92 e0       	ldi	r25, 0x02	; 2
     9aa:	a0 e0       	ldi	r26, 0x00	; 0
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	68 0e       	add	r6, r24
     9b0:	79 1e       	adc	r7, r25
     9b2:	8a 1e       	adc	r8, r26
     9b4:	9b 1e       	adc	r9, r27
     9b6:	80 91 97 00 	lds	r24, 0x0097
     9ba:	90 91 98 00 	lds	r25, 0x0098
     9be:	a0 91 99 00 	lds	r26, 0x0099
     9c2:	b0 91 9a 00 	lds	r27, 0x009A
     9c6:	a8 16       	cp	r10, r24
     9c8:	b9 06       	cpc	r11, r25
     9ca:	ca 06       	cpc	r12, r26
     9cc:	db 06       	cpc	r13, r27
     9ce:	08 f4       	brcc	.+2      	; 0x9d2 <searchNextFreeCluster+0xee>
     9d0:	a2 cf       	rjmp	.-188    	; 0x916 <searchNextFreeCluster+0x32>
     9d2:	20 e0       	ldi	r18, 0x00	; 0
     9d4:	30 e0       	ldi	r19, 0x00	; 0
     9d6:	40 e0       	ldi	r20, 0x00	; 0
     9d8:	50 e0       	ldi	r21, 0x00	; 0
            return(cluster+i);
      }  
    } 

 return 0;
}
     9da:	b9 01       	movw	r22, r18
     9dc:	ca 01       	movw	r24, r20
     9de:	1f 91       	pop	r17
     9e0:	0f 91       	pop	r16
     9e2:	ff 90       	pop	r15
     9e4:	ef 90       	pop	r14
     9e6:	df 90       	pop	r13
     9e8:	cf 90       	pop	r12
     9ea:	bf 90       	pop	r11
     9ec:	af 90       	pop	r10
     9ee:	9f 90       	pop	r9
     9f0:	8f 90       	pop	r8
     9f2:	7f 90       	pop	r7
     9f4:	6f 90       	pop	r6
     9f6:	08 95       	ret

000009f8 <getSetFreeCluster>:
//return: next free cluster, if arg1 is NEXT_FREE & arg2 is GET
//        total number of free clusters, if arg1 is TOTAL_FREE & arg2 is GET
//		  0xffffffff, if any error or if arg2 is SET
//********************************************************************************************
unsigned long getSetFreeCluster(unsigned char totOrNext, unsigned char get_set, unsigned long FSEntry)
{
     9f8:	cf 92       	push	r12
     9fa:	df 92       	push	r13
     9fc:	ef 92       	push	r14
     9fe:	ff 92       	push	r15
     a00:	0f 93       	push	r16
     a02:	1f 93       	push	r17
     a04:	d8 2e       	mov	r13, r24
     a06:	c6 2e       	mov	r12, r22
     a08:	79 01       	movw	r14, r18
     a0a:	8a 01       	movw	r16, r20
struct FSInfo_Structure *FS = (struct FSInfo_Structure *) &buffer;
unsigned char error;

SD_readSingleBlock(unusedSectors + 1);
     a0c:	60 91 a7 02 	lds	r22, 0x02A7
     a10:	70 91 a8 02 	lds	r23, 0x02A8
     a14:	80 91 a9 02 	lds	r24, 0x02A9
     a18:	90 91 aa 02 	lds	r25, 0x02AA
     a1c:	6f 5f       	subi	r22, 0xFF	; 255
     a1e:	7f 4f       	sbci	r23, 0xFF	; 255
     a20:	8f 4f       	sbci	r24, 0xFF	; 255
     a22:	9f 4f       	sbci	r25, 0xFF	; 255
     a24:	0e 94 65 13 	call	0x26ca	; 0x26ca <SD_readSingleBlock>

if((FS->leadSignature != 0x41615252) || (FS->structureSignature != 0x61417272) || (FS->trailSignature !=0xaa550000))
     a28:	80 91 a5 00 	lds	r24, 0x00A5
     a2c:	90 91 a6 00 	lds	r25, 0x00A6
     a30:	a0 91 a7 00 	lds	r26, 0x00A7
     a34:	b0 91 a8 00 	lds	r27, 0x00A8
     a38:	82 55       	subi	r24, 0x52	; 82
     a3a:	92 45       	sbci	r25, 0x52	; 82
     a3c:	a1 46       	sbci	r26, 0x61	; 97
     a3e:	b1 44       	sbci	r27, 0x41	; 65
     a40:	09 f0       	breq	.+2      	; 0xa44 <getSetFreeCluster+0x4c>
     a42:	54 c0       	rjmp	.+168    	; 0xaec <getSetFreeCluster+0xf4>
     a44:	80 91 89 02 	lds	r24, 0x0289
     a48:	90 91 8a 02 	lds	r25, 0x028A
     a4c:	a0 91 8b 02 	lds	r26, 0x028B
     a50:	b0 91 8c 02 	lds	r27, 0x028C
     a54:	82 57       	subi	r24, 0x72	; 114
     a56:	92 47       	sbci	r25, 0x72	; 114
     a58:	a1 44       	sbci	r26, 0x41	; 65
     a5a:	b1 46       	sbci	r27, 0x61	; 97
     a5c:	09 f0       	breq	.+2      	; 0xa60 <getSetFreeCluster+0x68>
     a5e:	46 c0       	rjmp	.+140    	; 0xaec <getSetFreeCluster+0xf4>
     a60:	80 91 a1 02 	lds	r24, 0x02A1
     a64:	90 91 a2 02 	lds	r25, 0x02A2
     a68:	a0 91 a3 02 	lds	r26, 0x02A3
     a6c:	b0 91 a4 02 	lds	r27, 0x02A4
     a70:	80 50       	subi	r24, 0x00	; 0
     a72:	90 40       	sbci	r25, 0x00	; 0
     a74:	a5 45       	sbci	r26, 0x55	; 85
     a76:	ba 4a       	sbci	r27, 0xAA	; 170
     a78:	c9 f5       	brne	.+114    	; 0xaec <getSetFreeCluster+0xf4>
  return 0xffffffff;

 if(get_set == GET)
     a7a:	cc 20       	and	r12, r12
     a7c:	a9 f4       	brne	.+42     	; 0xaa8 <getSetFreeCluster+0xb0>
 {
   if(totOrNext == TOTAL_FREE)
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	d8 16       	cp	r13, r24
     a82:	49 f4       	brne	.+18     	; 0xa96 <getSetFreeCluster+0x9e>
      return(FS->freeClusterCount);
     a84:	20 91 8d 02 	lds	r18, 0x028D
     a88:	30 91 8e 02 	lds	r19, 0x028E
     a8c:	40 91 8f 02 	lds	r20, 0x028F
     a90:	50 91 90 02 	lds	r21, 0x0290
     a94:	2f c0       	rjmp	.+94     	; 0xaf4 <getSetFreeCluster+0xfc>
   else // when totOrNext = NEXT_FREE
      return(FS->nextFreeCluster);
     a96:	20 91 91 02 	lds	r18, 0x0291
     a9a:	30 91 92 02 	lds	r19, 0x0292
     a9e:	40 91 93 02 	lds	r20, 0x0293
     aa2:	50 91 94 02 	lds	r21, 0x0294
     aa6:	26 c0       	rjmp	.+76     	; 0xaf4 <getSetFreeCluster+0xfc>
 }
 else
 {
   if(totOrNext == TOTAL_FREE)
     aa8:	21 e0       	ldi	r18, 0x01	; 1
     aaa:	d2 16       	cp	r13, r18
     aac:	49 f4       	brne	.+18     	; 0xac0 <getSetFreeCluster+0xc8>
      FS->freeClusterCount = FSEntry;
     aae:	e0 92 8d 02 	sts	0x028D, r14
     ab2:	f0 92 8e 02 	sts	0x028E, r15
     ab6:	00 93 8f 02 	sts	0x028F, r16
     aba:	10 93 90 02 	sts	0x0290, r17
     abe:	08 c0       	rjmp	.+16     	; 0xad0 <getSetFreeCluster+0xd8>
   else // when totOrNext = NEXT_FREE
	  FS->nextFreeCluster = FSEntry;
     ac0:	e0 92 91 02 	sts	0x0291, r14
     ac4:	f0 92 92 02 	sts	0x0292, r15
     ac8:	00 93 93 02 	sts	0x0293, r16
     acc:	10 93 94 02 	sts	0x0294, r17
 
   error = SD_writeSingleBlock(unusedSectors + 1);	//update FSinfo
     ad0:	60 91 a7 02 	lds	r22, 0x02A7
     ad4:	70 91 a8 02 	lds	r23, 0x02A8
     ad8:	80 91 a9 02 	lds	r24, 0x02A9
     adc:	90 91 aa 02 	lds	r25, 0x02AA
     ae0:	6f 5f       	subi	r22, 0xFF	; 255
     ae2:	7f 4f       	sbci	r23, 0xFF	; 255
     ae4:	8f 4f       	sbci	r24, 0xFF	; 255
     ae6:	9f 4f       	sbci	r25, 0xFF	; 255
     ae8:	0e 94 17 13 	call	0x262e	; 0x262e <SD_writeSingleBlock>
 }
 return 0xffffffff;
     aec:	2f ef       	ldi	r18, 0xFF	; 255
     aee:	3f ef       	ldi	r19, 0xFF	; 255
     af0:	4f ef       	ldi	r20, 0xFF	; 255
     af2:	5f ef       	ldi	r21, 0xFF	; 255
}
     af4:	b9 01       	movw	r22, r18
     af6:	ca 01       	movw	r24, r20
     af8:	1f 91       	pop	r17
     afa:	0f 91       	pop	r16
     afc:	ff 90       	pop	r15
     afe:	ef 90       	pop	r14
     b00:	df 90       	pop	r13
     b02:	cf 90       	pop	r12
     b04:	08 95       	ret

00000b06 <freeMemoryUpdate>:
//			to ADD or REMOVE clusters occupied by the file
//Arguments: #1.flag ADD or REMOVE #2.file size in Bytes
//return: none
//********************************************************************
void freeMemoryUpdate (unsigned char flag, unsigned long size)
{
     b06:	df 92       	push	r13
     b08:	ef 92       	push	r14
     b0a:	ff 92       	push	r15
     b0c:	0f 93       	push	r16
     b0e:	1f 93       	push	r17
     b10:	d8 2e       	mov	r13, r24
     b12:	db 01       	movw	r26, r22
     b14:	ca 01       	movw	r24, r20
     b16:	e9 e0       	ldi	r30, 0x09	; 9
     b18:	b6 95       	lsr	r27
     b1a:	a7 95       	ror	r26
     b1c:	97 95       	ror	r25
     b1e:	87 95       	ror	r24
     b20:	ea 95       	dec	r30
     b22:	d1 f7       	brne	.-12     	; 0xb18 <freeMemoryUpdate+0x12>
  unsigned long freeClusters;
  //convert file size into number of clusters occupied
  if((size % 512) == 0) size = size / 512;
     b24:	51 70       	andi	r21, 0x01	; 1
     b26:	60 70       	andi	r22, 0x00	; 0
     b28:	70 70       	andi	r23, 0x00	; 0
     b2a:	41 15       	cp	r20, r1
     b2c:	51 05       	cpc	r21, r1
     b2e:	61 05       	cpc	r22, r1
     b30:	71 05       	cpc	r23, r1
     b32:	19 f4       	brne	.+6      	; 0xb3a <freeMemoryUpdate+0x34>
     b34:	ac 01       	movw	r20, r24
     b36:	bd 01       	movw	r22, r26
     b38:	06 c0       	rjmp	.+12     	; 0xb46 <freeMemoryUpdate+0x40>
  else size = (size / 512) +1;
     b3a:	ac 01       	movw	r20, r24
     b3c:	bd 01       	movw	r22, r26
     b3e:	4f 5f       	subi	r20, 0xFF	; 255
     b40:	5f 4f       	sbci	r21, 0xFF	; 255
     b42:	6f 4f       	sbci	r22, 0xFF	; 255
     b44:	7f 4f       	sbci	r23, 0xFF	; 255
     b46:	db 01       	movw	r26, r22
     b48:	ca 01       	movw	r24, r20
     b4a:	33 e0       	ldi	r19, 0x03	; 3
     b4c:	b6 95       	lsr	r27
     b4e:	a7 95       	ror	r26
     b50:	97 95       	ror	r25
     b52:	87 95       	ror	r24
     b54:	3a 95       	dec	r19
     b56:	d1 f7       	brne	.-12     	; 0xb4c <freeMemoryUpdate+0x46>
  if((size % 8) == 0) size = size / 8;
     b58:	47 70       	andi	r20, 0x07	; 7
     b5a:	50 70       	andi	r21, 0x00	; 0
     b5c:	60 70       	andi	r22, 0x00	; 0
     b5e:	70 70       	andi	r23, 0x00	; 0
     b60:	41 15       	cp	r20, r1
     b62:	51 05       	cpc	r21, r1
     b64:	61 05       	cpc	r22, r1
     b66:	71 05       	cpc	r23, r1
     b68:	19 f4       	brne	.+6      	; 0xb70 <freeMemoryUpdate+0x6a>
     b6a:	7c 01       	movw	r14, r24
     b6c:	8d 01       	movw	r16, r26
     b6e:	07 c0       	rjmp	.+14     	; 0xb7e <freeMemoryUpdate+0x78>
  else size = (size / 8) +1;
     b70:	7c 01       	movw	r14, r24
     b72:	8d 01       	movw	r16, r26
     b74:	08 94       	sec
     b76:	e1 1c       	adc	r14, r1
     b78:	f1 1c       	adc	r15, r1
     b7a:	01 1d       	adc	r16, r1
     b7c:	11 1d       	adc	r17, r1

  if(freeClusterCountUpdated)
     b7e:	80 91 b7 02 	lds	r24, 0x02B7
     b82:	88 23       	and	r24, r24
     b84:	d9 f0       	breq	.+54     	; 0xbbc <freeMemoryUpdate+0xb6>
  {
	freeClusters = getSetFreeCluster (TOTAL_FREE, GET, 0);
     b86:	81 e0       	ldi	r24, 0x01	; 1
     b88:	60 e0       	ldi	r22, 0x00	; 0
     b8a:	20 e0       	ldi	r18, 0x00	; 0
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	40 e0       	ldi	r20, 0x00	; 0
     b90:	50 e0       	ldi	r21, 0x00	; 0
     b92:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <getSetFreeCluster>
	if(flag == ADD)
     b96:	dd 20       	and	r13, r13
     b98:	39 f4       	brne	.+14     	; 0xba8 <freeMemoryUpdate+0xa2>
  	   freeClusters = freeClusters + size;
     b9a:	9b 01       	movw	r18, r22
     b9c:	ac 01       	movw	r20, r24
     b9e:	2e 0d       	add	r18, r14
     ba0:	3f 1d       	adc	r19, r15
     ba2:	40 1f       	adc	r20, r16
     ba4:	51 1f       	adc	r21, r17
     ba6:	06 c0       	rjmp	.+12     	; 0xbb4 <freeMemoryUpdate+0xae>
	else  //when flag = REMOVE
	   freeClusters = freeClusters - size;
     ba8:	9b 01       	movw	r18, r22
     baa:	ac 01       	movw	r20, r24
     bac:	2e 19       	sub	r18, r14
     bae:	3f 09       	sbc	r19, r15
     bb0:	40 0b       	sbc	r20, r16
     bb2:	51 0b       	sbc	r21, r17
	getSetFreeCluster (TOTAL_FREE, SET, freeClusters);
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	61 e0       	ldi	r22, 0x01	; 1
     bb8:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <getSetFreeCluster>
  }
}
     bbc:	1f 91       	pop	r17
     bbe:	0f 91       	pop	r16
     bc0:	ff 90       	pop	r15
     bc2:	ef 90       	pop	r14
     bc4:	df 90       	pop	r13
     bc6:	08 95       	ret

00000bc8 <memoryStatistics>:
//it tries to read from SD whether a free cluster count is stored, if it is stored
//then it will return immediately. Otherwise it will count the total number of
//free clusters, which takes time
//****************************************************************************
void memoryStatistics (void)
{
     bc8:	2f 92       	push	r2
     bca:	3f 92       	push	r3
     bcc:	4f 92       	push	r4
     bce:	5f 92       	push	r5
     bd0:	6f 92       	push	r6
     bd2:	7f 92       	push	r7
     bd4:	8f 92       	push	r8
     bd6:	9f 92       	push	r9
     bd8:	af 92       	push	r10
     bda:	bf 92       	push	r11
     bdc:	cf 92       	push	r12
     bde:	df 92       	push	r13
     be0:	ef 92       	push	r14
     be2:	ff 92       	push	r15
     be4:	0f 93       	push	r16
     be6:	1f 93       	push	r17
unsigned long totalMemory, freeMemory;
unsigned long sector, *value;
unsigned int i;


totalMemory = totalClusters * sectorPerCluster / 1024;
     be8:	20 91 97 00 	lds	r18, 0x0097
     bec:	30 91 98 00 	lds	r19, 0x0098
     bf0:	40 91 99 00 	lds	r20, 0x0099
     bf4:	50 91 9a 00 	lds	r21, 0x009A
     bf8:	60 91 a5 02 	lds	r22, 0x02A5
     bfc:	70 91 a6 02 	lds	r23, 0x02A6
     c00:	80 e0       	ldi	r24, 0x00	; 0
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	0e 94 b8 18 	call	0x3170	; 0x3170 <__mulsi3>
     c08:	5b 01       	movw	r10, r22
     c0a:	6c 01       	movw	r12, r24
     c0c:	1a e0       	ldi	r17, 0x0A	; 10
     c0e:	d6 94       	lsr	r13
     c10:	c7 94       	ror	r12
     c12:	b7 94       	ror	r11
     c14:	a7 94       	ror	r10
     c16:	1a 95       	dec	r17
     c18:	d1 f7       	brne	.-12     	; 0xc0e <memoryStatistics+0x46>
totalMemory *= bytesPerSector;
     c1a:	e0 90 95 00 	lds	r14, 0x0095
     c1e:	f0 90 96 00 	lds	r15, 0x0096

TX_NEWLINE;
     c22:	8d e0       	ldi	r24, 0x0D	; 13
     c24:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
     c28:	8a e0       	ldi	r24, 0x0A	; 10
     c2a:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
TX_NEWLINE;
     c2e:	8d e0       	ldi	r24, 0x0D	; 13
     c30:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
     c34:	8a e0       	ldi	r24, 0x0A	; 10
     c36:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
transmitString_F(PSTR("Total Memory: "));
     c3a:	83 e6       	ldi	r24, 0x63	; 99
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	0e 94 3e 14 	call	0x287c	; 0x287c <transmitString_F>

displayMemory (HIGH, totalMemory);
     c42:	00 e0       	ldi	r16, 0x00	; 0
     c44:	10 e0       	ldi	r17, 0x00	; 0
     c46:	c6 01       	movw	r24, r12
     c48:	b5 01       	movw	r22, r10
     c4a:	a8 01       	movw	r20, r16
     c4c:	97 01       	movw	r18, r14
     c4e:	0e 94 b8 18 	call	0x3170	; 0x3170 <__mulsi3>
     c52:	ab 01       	movw	r20, r22
     c54:	bc 01       	movw	r22, r24
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	0e 94 83 03 	call	0x706	; 0x706 <displayMemory>

freeClusters = getSetFreeCluster (TOTAL_FREE, GET, 0);
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	60 e0       	ldi	r22, 0x00	; 0
     c60:	20 e0       	ldi	r18, 0x00	; 0
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	40 e0       	ldi	r20, 0x00	; 0
     c66:	50 e0       	ldi	r21, 0x00	; 0
     c68:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <getSetFreeCluster>
     c6c:	3b 01       	movw	r6, r22
     c6e:	4c 01       	movw	r8, r24
//freeClusters = 0xffffffff;    

if(freeClusters > totalClusters)
     c70:	80 91 97 00 	lds	r24, 0x0097
     c74:	90 91 98 00 	lds	r25, 0x0098
     c78:	a0 91 99 00 	lds	r26, 0x0099
     c7c:	b0 91 9a 00 	lds	r27, 0x009A
     c80:	86 15       	cp	r24, r6
     c82:	97 05       	cpc	r25, r7
     c84:	a8 05       	cpc	r26, r8
     c86:	b9 05       	cpc	r27, r9
     c88:	08 f0       	brcs	.+2      	; 0xc8c <memoryStatistics+0xc4>
     c8a:	7c c0       	rjmp	.+248    	; 0xd84 <memoryStatistics+0x1bc>
{
   freeClusterCountUpdated = 0;
     c8c:	10 92 b7 02 	sts	0x02B7, r1
   freeClusters = 0;
   totalClusterCount = 0;
   cluster = rootCluster;    
     c90:	a0 90 9b 00 	lds	r10, 0x009B
     c94:	b0 90 9c 00 	lds	r11, 0x009C
     c98:	c0 90 9d 00 	lds	r12, 0x009D
     c9c:	d0 90 9e 00 	lds	r13, 0x009E
     ca0:	b2 e0       	ldi	r27, 0x02	; 2
     ca2:	aa 0c       	add	r10, r10
     ca4:	bb 1c       	adc	r11, r11
     ca6:	cc 1c       	adc	r12, r12
     ca8:	dd 1c       	adc	r13, r13
     caa:	ba 95       	dec	r27
     cac:	d1 f7       	brne	.-12     	; 0xca2 <memoryStatistics+0xda>
     cae:	66 24       	eor	r6, r6
     cb0:	77 24       	eor	r7, r7
     cb2:	43 01       	movw	r8, r6
     cb4:	22 24       	eor	r2, r2
     cb6:	33 24       	eor	r3, r3
     cb8:	21 01       	movw	r4, r2
    while(1)
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector) ;
     cba:	e0 90 b0 02 	lds	r14, 0x02B0
     cbe:	f0 90 b1 02 	lds	r15, 0x02B1
     cc2:	20 91 95 00 	lds	r18, 0x0095
     cc6:	30 91 96 00 	lds	r19, 0x0096
      SD_readSingleBlock(sector);
     cca:	00 e0       	ldi	r16, 0x00	; 0
     ccc:	10 e0       	ldi	r17, 0x00	; 0
     cce:	80 91 a7 02 	lds	r24, 0x02A7
     cd2:	90 91 a8 02 	lds	r25, 0x02A8
     cd6:	a0 91 a9 02 	lds	r26, 0x02A9
     cda:	b0 91 aa 02 	lds	r27, 0x02AA
     cde:	e8 0e       	add	r14, r24
     ce0:	f9 1e       	adc	r15, r25
     ce2:	0a 1f       	adc	r16, r26
     ce4:	1b 1f       	adc	r17, r27
     ce6:	40 e0       	ldi	r20, 0x00	; 0
     ce8:	50 e0       	ldi	r21, 0x00	; 0
     cea:	c6 01       	movw	r24, r12
     cec:	b5 01       	movw	r22, r10
     cee:	0e 94 d7 18 	call	0x31ae	; 0x31ae <__udivmodsi4>
     cf2:	e2 0e       	add	r14, r18
     cf4:	f3 1e       	adc	r15, r19
     cf6:	04 1f       	adc	r16, r20
     cf8:	15 1f       	adc	r17, r21
     cfa:	c8 01       	movw	r24, r16
     cfc:	b7 01       	movw	r22, r14
     cfe:	0e 94 65 13 	call	0x26ca	; 0x26ca <SD_readSingleBlock>
     d02:	a2 01       	movw	r20, r4
     d04:	91 01       	movw	r18, r2
     d06:	60 e0       	ldi	r22, 0x00	; 0
     d08:	70 e0       	ldi	r23, 0x00	; 0
      for(i=0; i<128; i++)
      {
           value = (unsigned long *) &buffer[i*4];
         if(((*value)& 0x0fffffff) == 0)
     d0a:	fb 01       	movw	r30, r22
     d0c:	eb 55       	subi	r30, 0x5B	; 91
     d0e:	ff 4f       	sbci	r31, 0xFF	; 255
     d10:	80 81       	ld	r24, Z
     d12:	91 81       	ldd	r25, Z+1	; 0x01
     d14:	a2 81       	ldd	r26, Z+2	; 0x02
     d16:	b3 81       	ldd	r27, Z+3	; 0x03
     d18:	bf 70       	andi	r27, 0x0F	; 15
     d1a:	00 97       	sbiw	r24, 0x00	; 0
     d1c:	a1 05       	cpc	r26, r1
     d1e:	b1 05       	cpc	r27, r1
     d20:	29 f4       	brne	.+10     	; 0xd2c <memoryStatistics+0x164>
            freeClusters++;;
     d22:	08 94       	sec
     d24:	61 1c       	adc	r6, r1
     d26:	71 1c       	adc	r7, r1
     d28:	81 1c       	adc	r8, r1
     d2a:	91 1c       	adc	r9, r1
        
         totalClusterCount++;
     d2c:	2f 5f       	subi	r18, 0xFF	; 255
     d2e:	3f 4f       	sbci	r19, 0xFF	; 255
     d30:	4f 4f       	sbci	r20, 0xFF	; 255
     d32:	5f 4f       	sbci	r21, 0xFF	; 255
         if(totalClusterCount == (totalClusters+2)) break;
     d34:	80 91 97 00 	lds	r24, 0x0097
     d38:	90 91 98 00 	lds	r25, 0x0098
     d3c:	a0 91 99 00 	lds	r26, 0x0099
     d40:	b0 91 9a 00 	lds	r27, 0x009A
     d44:	02 96       	adiw	r24, 0x02	; 2
     d46:	a1 1d       	adc	r26, r1
     d48:	b1 1d       	adc	r27, r1
     d4a:	28 17       	cp	r18, r24
     d4c:	39 07       	cpc	r19, r25
     d4e:	4a 07       	cpc	r20, r26
     d50:	5b 07       	cpc	r21, r27
     d52:	c1 f0       	breq	.+48     	; 0xd84 <memoryStatistics+0x1bc>
     d54:	c9 01       	movw	r24, r18
     d56:	82 19       	sub	r24, r2
     d58:	93 09       	sbc	r25, r3
     d5a:	6c 5f       	subi	r22, 0xFC	; 252
     d5c:	7f 4f       	sbci	r23, 0xFF	; 255
   cluster = rootCluster;    
    while(1)
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector) ;
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
     d5e:	02 e0       	ldi	r16, 0x02	; 2
     d60:	60 30       	cpi	r22, 0x00	; 0
     d62:	70 07       	cpc	r23, r16
     d64:	91 f6       	brne	.-92     	; 0xd0a <memoryStatistics+0x142>
     d66:	e1 2c       	mov	r14, r1
     d68:	a2 e0       	ldi	r26, 0x02	; 2
     d6a:	fa 2e       	mov	r15, r26
     d6c:	01 2d       	mov	r16, r1
     d6e:	11 2d       	mov	r17, r1
     d70:	ae 0c       	add	r10, r14
     d72:	bf 1c       	adc	r11, r15
     d74:	c0 1e       	adc	r12, r16
     d76:	d1 1e       	adc	r13, r17
            freeClusters++;;
        
         totalClusterCount++;
         if(totalClusterCount == (totalClusters+2)) break;
      }  
      if(i < 128) break;
     d78:	80 38       	cpi	r24, 0x80	; 128
     d7a:	91 05       	cpc	r25, r1
     d7c:	18 f0       	brcs	.+6      	; 0xd84 <memoryStatistics+0x1bc>
     d7e:	19 01       	movw	r2, r18
     d80:	2a 01       	movw	r4, r20
     d82:	9b cf       	rjmp	.-202    	; 0xcba <memoryStatistics+0xf2>
      cluster+=128;
    } 
}

if(!freeClusterCountUpdated)
     d84:	80 91 b7 02 	lds	r24, 0x02B7
     d88:	88 23       	and	r24, r24
     d8a:	31 f4       	brne	.+12     	; 0xd98 <memoryStatistics+0x1d0>
  getSetFreeCluster (TOTAL_FREE, SET, freeClusters); //update FSinfo next free cluster entry
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	61 e0       	ldi	r22, 0x01	; 1
     d90:	a4 01       	movw	r20, r8
     d92:	93 01       	movw	r18, r6
     d94:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <getSetFreeCluster>
freeClusterCountUpdated = 1;  //set flag
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	80 93 b7 02 	sts	0x02B7, r24
freeMemory = freeClusters * sectorPerCluster / 1024;
     d9e:	20 91 a5 02 	lds	r18, 0x02A5
     da2:	30 91 a6 02 	lds	r19, 0x02A6
     da6:	40 e0       	ldi	r20, 0x00	; 0
     da8:	50 e0       	ldi	r21, 0x00	; 0
     daa:	c4 01       	movw	r24, r8
     dac:	b3 01       	movw	r22, r6
     dae:	0e 94 b8 18 	call	0x3170	; 0x3170 <__mulsi3>
     db2:	5b 01       	movw	r10, r22
     db4:	6c 01       	movw	r12, r24
     db6:	fa e0       	ldi	r31, 0x0A	; 10
     db8:	d6 94       	lsr	r13
     dba:	c7 94       	ror	r12
     dbc:	b7 94       	ror	r11
     dbe:	a7 94       	ror	r10
     dc0:	fa 95       	dec	r31
     dc2:	d1 f7       	brne	.-12     	; 0xdb8 <memoryStatistics+0x1f0>
freeMemory *= bytesPerSector ;
     dc4:	e0 90 95 00 	lds	r14, 0x0095
     dc8:	f0 90 96 00 	lds	r15, 0x0096
TX_NEWLINE;
     dcc:	8d e0       	ldi	r24, 0x0D	; 13
     dce:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
     dd2:	8a e0       	ldi	r24, 0x0A	; 10
     dd4:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
transmitString_F(PSTR(" Free Memory: "));
     dd8:	84 e5       	ldi	r24, 0x54	; 84
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	0e 94 3e 14 	call	0x287c	; 0x287c <transmitString_F>
displayMemory (HIGH, freeMemory);
     de0:	00 e0       	ldi	r16, 0x00	; 0
     de2:	10 e0       	ldi	r17, 0x00	; 0
     de4:	c6 01       	movw	r24, r12
     de6:	b5 01       	movw	r22, r10
     de8:	a8 01       	movw	r20, r16
     dea:	97 01       	movw	r18, r14
     dec:	0e 94 b8 18 	call	0x3170	; 0x3170 <__mulsi3>
     df0:	ab 01       	movw	r20, r22
     df2:	bc 01       	movw	r22, r24
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	0e 94 83 03 	call	0x706	; 0x706 <displayMemory>
TX_NEWLINE; 
     dfa:	8d e0       	ldi	r24, 0x0D	; 13
     dfc:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
     e00:	8a e0       	ldi	r24, 0x0A	; 10
     e02:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
}
     e06:	1f 91       	pop	r17
     e08:	0f 91       	pop	r16
     e0a:	ff 90       	pop	r15
     e0c:	ef 90       	pop	r14
     e0e:	df 90       	pop	r13
     e10:	cf 90       	pop	r12
     e12:	bf 90       	pop	r11
     e14:	af 90       	pop	r10
     e16:	9f 90       	pop	r9
     e18:	8f 90       	pop	r8
     e1a:	7f 90       	pop	r7
     e1c:	6f 90       	pop	r6
     e1e:	5f 90       	pop	r5
     e20:	4f 90       	pop	r4
     e22:	3f 90       	pop	r3
     e24:	2f 90       	pop	r2
     e26:	08 95       	ret

00000e28 <getBootSectorData>:
//parameters like bytesPerSector, sectorsPerCluster etc.
//Arguments: none
//return: none
//***************************************************************************
unsigned char getBootSectorData (void)
{
     e28:	6f 92       	push	r6
     e2a:	7f 92       	push	r7
     e2c:	8f 92       	push	r8
     e2e:	9f 92       	push	r9
     e30:	af 92       	push	r10
     e32:	bf 92       	push	r11
     e34:	cf 92       	push	r12
     e36:	df 92       	push	r13
     e38:	ef 92       	push	r14
     e3a:	ff 92       	push	r15
     e3c:	0f 93       	push	r16
     e3e:	1f 93       	push	r17
struct BS_Structure *bpb; //mapping the buffer onto the structure
struct MBRinfo_Structure *mbr;
struct partitionInfo_Structure *partition;
unsigned long dataSectors;

unusedSectors = 0;
     e40:	10 92 a7 02 	sts	0x02A7, r1
     e44:	10 92 a8 02 	sts	0x02A8, r1
     e48:	10 92 a9 02 	sts	0x02A9, r1
     e4c:	10 92 aa 02 	sts	0x02AA, r1

SD_readSingleBlock(0);
     e50:	60 e0       	ldi	r22, 0x00	; 0
     e52:	70 e0       	ldi	r23, 0x00	; 0
     e54:	80 e0       	ldi	r24, 0x00	; 0
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	0e 94 65 13 	call	0x26ca	; 0x26ca <SD_readSingleBlock>
bpb = (struct BS_Structure *)buffer;

if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB)   //check if it is boot sector
     e5c:	80 91 a5 00 	lds	r24, 0x00A5
     e60:	89 3e       	cpi	r24, 0xE9	; 233
     e62:	19 f1       	breq	.+70     	; 0xeaa <getBootSectorData+0x82>
     e64:	8b 3e       	cpi	r24, 0xEB	; 235
     e66:	09 f1       	breq	.+66     	; 0xeaa <getBootSectorData+0x82>
{
  mbr = (struct MBRinfo_Structure *) buffer;       //if it is not boot sector, it must be MBR
  
  if(mbr->signature != 0xaa55) return 1;       //if it is not even MBR then it's not FAT32
     e68:	80 91 a3 02 	lds	r24, 0x02A3
     e6c:	90 91 a4 02 	lds	r25, 0x02A4
     e70:	85 55       	subi	r24, 0x55	; 85
     e72:	9a 4a       	sbci	r25, 0xAA	; 170
     e74:	09 f0       	breq	.+2      	; 0xe78 <getBootSectorData+0x50>
     e76:	b0 c0       	rjmp	.+352    	; 0xfd8 <getBootSectorData+0x1b0>
  	
  partition = (struct partitionInfo_Structure *)(mbr->partitionData);//first partition
  unusedSectors = partition->firstSector; //the unused sectors, hidden to the FAT
     e78:	60 91 6b 02 	lds	r22, 0x026B
     e7c:	70 91 6c 02 	lds	r23, 0x026C
     e80:	80 91 6d 02 	lds	r24, 0x026D
     e84:	90 91 6e 02 	lds	r25, 0x026E
     e88:	60 93 a7 02 	sts	0x02A7, r22
     e8c:	70 93 a8 02 	sts	0x02A8, r23
     e90:	80 93 a9 02 	sts	0x02A9, r24
     e94:	90 93 aa 02 	sts	0x02AA, r25
  
  SD_readSingleBlock(partition->firstSector);//read the bpb sector
     e98:	0e 94 65 13 	call	0x26ca	; 0x26ca <SD_readSingleBlock>
  bpb = (struct BS_Structure *)buffer;
  if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB) return 1; 
     e9c:	80 91 a5 00 	lds	r24, 0x00A5
     ea0:	89 3e       	cpi	r24, 0xE9	; 233
     ea2:	19 f0       	breq	.+6      	; 0xeaa <getBootSectorData+0x82>
     ea4:	8b 3e       	cpi	r24, 0xEB	; 235
     ea6:	09 f0       	breq	.+2      	; 0xeaa <getBootSectorData+0x82>
     ea8:	97 c0       	rjmp	.+302    	; 0xfd8 <getBootSectorData+0x1b0>
}

bytesPerSector = bpb->bytesPerSector;
     eaa:	80 91 b0 00 	lds	r24, 0x00B0
     eae:	90 91 b1 00 	lds	r25, 0x00B1
     eb2:	90 93 96 00 	sts	0x0096, r25
     eb6:	80 93 95 00 	sts	0x0095, r24
//transmitHex(INT, bytesPerSector); transmitByte(' ');
sectorPerCluster = bpb->sectorPerCluster;
     eba:	80 91 b2 00 	lds	r24, 0x00B2
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	90 93 a6 02 	sts	0x02A6, r25
     ec4:	80 93 a5 02 	sts	0x02A5, r24
//transmitHex(INT, sectorPerCluster); transmitByte(' ');
reservedSectorCount = bpb->reservedSectorCount;
     ec8:	a0 90 b3 00 	lds	r10, 0x00B3
     ecc:	b0 90 b4 00 	lds	r11, 0x00B4
     ed0:	b0 92 b1 02 	sts	0x02B1, r11
     ed4:	a0 92 b0 02 	sts	0x02B0, r10
rootCluster = bpb->rootCluster;// + (sector / sectorPerCluster) +1;
     ed8:	80 91 d1 00 	lds	r24, 0x00D1
     edc:	90 91 d2 00 	lds	r25, 0x00D2
     ee0:	a0 91 d3 00 	lds	r26, 0x00D3
     ee4:	b0 91 d4 00 	lds	r27, 0x00D4
     ee8:	80 93 9b 00 	sts	0x009B, r24
     eec:	90 93 9c 00 	sts	0x009C, r25
     ef0:	a0 93 9d 00 	sts	0x009D, r26
     ef4:	b0 93 9e 00 	sts	0x009E, r27
firstDataSector = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);
     ef8:	e0 90 b0 02 	lds	r14, 0x02B0
     efc:	f0 90 b1 02 	lds	r15, 0x02B1
     f00:	60 91 b5 00 	lds	r22, 0x00B5
     f04:	70 e0       	ldi	r23, 0x00	; 0
     f06:	80 e0       	ldi	r24, 0x00	; 0
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	20 91 c9 00 	lds	r18, 0x00C9
     f0e:	30 91 ca 00 	lds	r19, 0x00CA
     f12:	40 91 cb 00 	lds	r20, 0x00CB
     f16:	50 91 cc 00 	lds	r21, 0x00CC
     f1a:	0e 94 b8 18 	call	0x3170	; 0x3170 <__mulsi3>
     f1e:	3b 01       	movw	r6, r22
     f20:	4c 01       	movw	r8, r24
     f22:	00 e0       	ldi	r16, 0x00	; 0
     f24:	10 e0       	ldi	r17, 0x00	; 0
     f26:	80 91 c1 00 	lds	r24, 0x00C1
     f2a:	90 91 c2 00 	lds	r25, 0x00C2
     f2e:	a0 91 c3 00 	lds	r26, 0x00C3
     f32:	b0 91 c4 00 	lds	r27, 0x00C4
     f36:	e8 0e       	add	r14, r24
     f38:	f9 1e       	adc	r15, r25
     f3a:	0a 1f       	adc	r16, r26
     f3c:	1b 1f       	adc	r17, r27
     f3e:	e6 0c       	add	r14, r6
     f40:	f7 1c       	adc	r15, r7
     f42:	08 1d       	adc	r16, r8
     f44:	19 1d       	adc	r17, r9
     f46:	e0 92 8d 00 	sts	0x008D, r14
     f4a:	f0 92 8e 00 	sts	0x008E, r15
     f4e:	00 93 8f 00 	sts	0x008F, r16
     f52:	10 93 90 00 	sts	0x0090, r17

dataSectors = bpb->totalSectors_F32
              - bpb->reservedSectorCount
              - ( bpb->numberofFATs * bpb->FATsize_F32);
totalClusters = dataSectors / sectorPerCluster;
     f56:	20 91 a5 02 	lds	r18, 0x02A5
     f5a:	30 91 a6 02 	lds	r19, 0x02A6
     f5e:	cc 24       	eor	r12, r12
     f60:	dd 24       	eor	r13, r13
     f62:	60 91 c5 00 	lds	r22, 0x00C5
     f66:	70 91 c6 00 	lds	r23, 0x00C6
     f6a:	80 91 c7 00 	lds	r24, 0x00C7
     f6e:	90 91 c8 00 	lds	r25, 0x00C8
     f72:	6a 19       	sub	r22, r10
     f74:	7b 09       	sbc	r23, r11
     f76:	8c 09       	sbc	r24, r12
     f78:	9d 09       	sbc	r25, r13
     f7a:	66 19       	sub	r22, r6
     f7c:	77 09       	sbc	r23, r7
     f7e:	88 09       	sbc	r24, r8
     f80:	99 09       	sbc	r25, r9
     f82:	40 e0       	ldi	r20, 0x00	; 0
     f84:	50 e0       	ldi	r21, 0x00	; 0
     f86:	0e 94 d7 18 	call	0x31ae	; 0x31ae <__udivmodsi4>
     f8a:	c9 01       	movw	r24, r18
     f8c:	da 01       	movw	r26, r20
     f8e:	80 93 97 00 	sts	0x0097, r24
     f92:	90 93 98 00 	sts	0x0098, r25
     f96:	a0 93 99 00 	sts	0x0099, r26
     f9a:	b0 93 9a 00 	sts	0x009A, r27
//transmitHex(LONG, totalClusters); transmitByte(' ');

if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	60 e0       	ldi	r22, 0x00	; 0
     fa2:	20 e0       	ldi	r18, 0x00	; 0
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	40 e0       	ldi	r20, 0x00	; 0
     fa8:	50 e0       	ldi	r21, 0x00	; 0
     faa:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <getSetFreeCluster>
     fae:	20 91 97 00 	lds	r18, 0x0097
     fb2:	30 91 98 00 	lds	r19, 0x0098
     fb6:	40 91 99 00 	lds	r20, 0x0099
     fba:	50 91 9a 00 	lds	r21, 0x009A
     fbe:	26 17       	cp	r18, r22
     fc0:	37 07       	cpc	r19, r23
     fc2:	48 07       	cpc	r20, r24
     fc4:	59 07       	cpc	r21, r25
     fc6:	18 f4       	brcc	.+6      	; 0xfce <getBootSectorData+0x1a6>
     freeClusterCountUpdated = 0;
     fc8:	10 92 b7 02 	sts	0x02B7, r1
     fcc:	03 c0       	rjmp	.+6      	; 0xfd4 <getBootSectorData+0x1ac>
else
	 freeClusterCountUpdated = 1;
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	80 93 b7 02 	sts	0x02B7, r24
     fd4:	80 e0       	ldi	r24, 0x00	; 0
     fd6:	01 c0       	rjmp	.+2      	; 0xfda <getBootSectorData+0x1b2>
     fd8:	81 e0       	ldi	r24, 0x01	; 1
return 0;
}
     fda:	1f 91       	pop	r17
     fdc:	0f 91       	pop	r16
     fde:	ff 90       	pop	r15
     fe0:	ef 90       	pop	r14
     fe2:	df 90       	pop	r13
     fe4:	cf 90       	pop	r12
     fe6:	bf 90       	pop	r11
     fe8:	af 90       	pop	r10
     fea:	9f 90       	pop	r9
     fec:	8f 90       	pop	r8
     fee:	7f 90       	pop	r7
     ff0:	6f 90       	pop	r6
     ff2:	08 95       	ret

00000ff4 <getSetNextCluster>:
//return: next cluster number, if if argument#2 = GET, else 0
//****************************************************************************
unsigned long getSetNextCluster (unsigned long clusterNumber,
                                 unsigned char get_set,
                                 unsigned long clusterEntry)
{
     ff4:	4f 92       	push	r4
     ff6:	5f 92       	push	r5
     ff8:	6f 92       	push	r6
     ffa:	7f 92       	push	r7
     ffc:	8f 92       	push	r8
     ffe:	9f 92       	push	r9
    1000:	af 92       	push	r10
    1002:	bf 92       	push	r11
    1004:	cf 92       	push	r12
    1006:	df 92       	push	r13
    1008:	ef 92       	push	r14
    100a:	ff 92       	push	r15
    100c:	0f 93       	push	r16
    100e:	1f 93       	push	r17
    1010:	cf 93       	push	r28
    1012:	df 93       	push	r29
    1014:	5b 01       	movw	r10, r22
    1016:	6c 01       	movw	r12, r24
    1018:	84 2e       	mov	r8, r20
    101a:	28 01       	movw	r4, r16
    101c:	39 01       	movw	r6, r18
unsigned long *FATEntryValue;
unsigned long FATEntrySector;
unsigned char retry = 0;

//get sector number of the cluster entry in the FAT
FATEntrySector = unusedSectors + reservedSectorCount + ((clusterNumber * 4) / bytesPerSector) ;
    101e:	80 91 b0 02 	lds	r24, 0x02B0
    1022:	90 91 b1 02 	lds	r25, 0x02B1
    1026:	02 e0       	ldi	r16, 0x02	; 2
    1028:	aa 0c       	add	r10, r10
    102a:	bb 1c       	adc	r11, r11
    102c:	cc 1c       	adc	r12, r12
    102e:	dd 1c       	adc	r13, r13
    1030:	0a 95       	dec	r16
    1032:	d1 f7       	brne	.-12     	; 0x1028 <getSetNextCluster+0x34>
    1034:	20 91 95 00 	lds	r18, 0x0095
    1038:	30 91 96 00 	lds	r19, 0x0096
    103c:	7c 01       	movw	r14, r24
    103e:	00 e0       	ldi	r16, 0x00	; 0
    1040:	10 e0       	ldi	r17, 0x00	; 0
    1042:	80 91 a7 02 	lds	r24, 0x02A7
    1046:	90 91 a8 02 	lds	r25, 0x02A8
    104a:	a0 91 a9 02 	lds	r26, 0x02A9
    104e:	b0 91 aa 02 	lds	r27, 0x02AA
    1052:	e8 0e       	add	r14, r24
    1054:	f9 1e       	adc	r15, r25
    1056:	0a 1f       	adc	r16, r26
    1058:	1b 1f       	adc	r17, r27
    105a:	40 e0       	ldi	r20, 0x00	; 0
    105c:	50 e0       	ldi	r21, 0x00	; 0
    105e:	c6 01       	movw	r24, r12
    1060:	b5 01       	movw	r22, r10
    1062:	0e 94 d7 18 	call	0x31ae	; 0x31ae <__udivmodsi4>
    1066:	e2 0e       	add	r14, r18
    1068:	f3 1e       	adc	r15, r19
    106a:	04 1f       	adc	r16, r20
    106c:	15 1f       	adc	r17, r21

//get the offset address in that sector number
FATEntryOffset = (unsigned int) ((clusterNumber * 4) % bytesPerSector);
    106e:	c0 91 95 00 	lds	r28, 0x0095
    1072:	d0 91 96 00 	lds	r29, 0x0096
    1076:	99 24       	eor	r9, r9

//read the sector into a buffer
while(retry <10)
{ if(!SD_readSingleBlock(FATEntrySector)) break; retry++;}
    1078:	c8 01       	movw	r24, r16
    107a:	b7 01       	movw	r22, r14
    107c:	0e 94 65 13 	call	0x26ca	; 0x26ca <SD_readSingleBlock>
    1080:	88 23       	and	r24, r24
    1082:	21 f0       	breq	.+8      	; 0x108c <getSetNextCluster+0x98>
    1084:	93 94       	inc	r9

//get the offset address in that sector number
FATEntryOffset = (unsigned int) ((clusterNumber * 4) % bytesPerSector);

//read the sector into a buffer
while(retry <10)
    1086:	8a e0       	ldi	r24, 0x0A	; 10
    1088:	98 16       	cp	r9, r24
    108a:	b1 f7       	brne	.-20     	; 0x1078 <getSetNextCluster+0x84>
{ if(!SD_readSingleBlock(FATEntrySector)) break; retry++;}

//get the cluster address from the buffer
FATEntryValue = (unsigned long *) &buffer[FATEntryOffset];
    108c:	9e 01       	movw	r18, r28
    108e:	40 e0       	ldi	r20, 0x00	; 0
    1090:	50 e0       	ldi	r21, 0x00	; 0
    1092:	c6 01       	movw	r24, r12
    1094:	b5 01       	movw	r22, r10
    1096:	0e 94 d7 18 	call	0x31ae	; 0x31ae <__udivmodsi4>
    109a:	fb 01       	movw	r30, r22
    109c:	eb 55       	subi	r30, 0x5B	; 91
    109e:	ff 4f       	sbci	r31, 0xFF	; 255

if(get_set == GET)
    10a0:	88 20       	and	r8, r8
    10a2:	31 f4       	brne	.+12     	; 0x10b0 <getSetNextCluster+0xbc>
  return ((*FATEntryValue) & 0x0fffffff);
    10a4:	20 81       	ld	r18, Z
    10a6:	31 81       	ldd	r19, Z+1	; 0x01
    10a8:	42 81       	ldd	r20, Z+2	; 0x02
    10aa:	53 81       	ldd	r21, Z+3	; 0x03
    10ac:	5f 70       	andi	r21, 0x0F	; 15
    10ae:	0c c0       	rjmp	.+24     	; 0x10c8 <getSetNextCluster+0xd4>


*FATEntryValue = clusterEntry;   //for setting new value in cluster entry in FAT
    10b0:	40 82       	st	Z, r4
    10b2:	51 82       	std	Z+1, r5	; 0x01
    10b4:	62 82       	std	Z+2, r6	; 0x02
    10b6:	73 82       	std	Z+3, r7	; 0x03

SD_writeSingleBlock(FATEntrySector);
    10b8:	c8 01       	movw	r24, r16
    10ba:	b7 01       	movw	r22, r14
    10bc:	0e 94 17 13 	call	0x262e	; 0x262e <SD_writeSingleBlock>
    10c0:	20 e0       	ldi	r18, 0x00	; 0
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	40 e0       	ldi	r20, 0x00	; 0
    10c6:	50 e0       	ldi	r21, 0x00	; 0

return (0);
}
    10c8:	b9 01       	movw	r22, r18
    10ca:	ca 01       	movw	r24, r20
    10cc:	df 91       	pop	r29
    10ce:	cf 91       	pop	r28
    10d0:	1f 91       	pop	r17
    10d2:	0f 91       	pop	r16
    10d4:	ff 90       	pop	r15
    10d6:	ef 90       	pop	r14
    10d8:	df 90       	pop	r13
    10da:	cf 90       	pop	r12
    10dc:	bf 90       	pop	r11
    10de:	af 90       	pop	r10
    10e0:	9f 90       	pop	r9
    10e2:	8f 90       	pop	r8
    10e4:	7f 90       	pop	r7
    10e6:	6f 90       	pop	r6
    10e8:	5f 90       	pop	r5
    10ea:	4f 90       	pop	r4
    10ec:	08 95       	ret

000010ee <findFiles>:
//return: first cluster of the file, if flag = GET_FILE
//        print file/dir list of the root directory, if flag = GET_LIST
//		  Delete the file mentioned in arg#2, if flag = DELETE
//****************************************************************************
struct dir_Structure* findFiles (unsigned char flag, unsigned char *fileName)
{
    10ee:	2f 92       	push	r2
    10f0:	3f 92       	push	r3
    10f2:	4f 92       	push	r4
    10f4:	5f 92       	push	r5
    10f6:	6f 92       	push	r6
    10f8:	7f 92       	push	r7
    10fa:	8f 92       	push	r8
    10fc:	9f 92       	push	r9
    10fe:	af 92       	push	r10
    1100:	bf 92       	push	r11
    1102:	cf 92       	push	r12
    1104:	df 92       	push	r13
    1106:	ef 92       	push	r14
    1108:	ff 92       	push	r15
    110a:	0f 93       	push	r16
    110c:	1f 93       	push	r17
    110e:	df 93       	push	r29
    1110:	cf 93       	push	r28
    1112:	cd b7       	in	r28, 0x3d	; 61
    1114:	de b7       	in	r29, 0x3e	; 62
    1116:	2a 97       	sbiw	r28, 0x0a	; 10
    1118:	0f b6       	in	r0, 0x3f	; 63
    111a:	f8 94       	cli
    111c:	de bf       	out	0x3e, r29	; 62
    111e:	0f be       	out	0x3f, r0	; 63
    1120:	cd bf       	out	0x3d, r28	; 61
    1122:	8d 83       	std	Y+5, r24	; 0x05
    1124:	7f 83       	std	Y+7, r23	; 0x07
    1126:	6e 83       	std	Y+6, r22	; 0x06
unsigned long cluster, sector, firstSector, firstCluster, nextCluster;
struct dir_Structure *dir;
unsigned int i;
unsigned char j;

cluster = rootCluster; //root cluster
    1128:	a0 90 9b 00 	lds	r10, 0x009B
    112c:	b0 90 9c 00 	lds	r11, 0x009C
    1130:	c0 90 9d 00 	lds	r12, 0x009D
    1134:	d0 90 9e 00 	lds	r13, 0x009E
		      transmitString_F(PSTR("File does not exist!"));
		  return 0;   
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
    1138:	81 50       	subi	r24, 0x01	; 1
    113a:	88 87       	std	Y+8, r24	; 0x08
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    113c:	20 91 a5 02 	lds	r18, 0x02A5
    1140:	30 91 a6 02 	lds	r19, 0x02A6
    1144:	e0 90 8d 00 	lds	r14, 0x008D
    1148:	f0 90 8e 00 	lds	r15, 0x008E
    114c:	00 91 8f 00 	lds	r16, 0x008F
    1150:	10 91 90 00 	lds	r17, 0x0090
    1154:	c6 01       	movw	r24, r12
    1156:	b5 01       	movw	r22, r10
    1158:	62 50       	subi	r22, 0x02	; 2
    115a:	70 40       	sbci	r23, 0x00	; 0
    115c:	80 40       	sbci	r24, 0x00	; 0
    115e:	90 40       	sbci	r25, 0x00	; 0
    1160:	40 e0       	ldi	r20, 0x00	; 0
    1162:	50 e0       	ldi	r21, 0x00	; 0
    1164:	0e 94 b8 18 	call	0x3170	; 0x3170 <__mulsi3>
    1168:	1b 01       	movw	r2, r22
    116a:	2c 01       	movw	r4, r24
    116c:	2e 0c       	add	r2, r14
    116e:	3f 1c       	adc	r3, r15
    1170:	40 1e       	adc	r4, r16
    1172:	51 1e       	adc	r5, r17
    1174:	66 24       	eor	r6, r6
    1176:	77 24       	eor	r7, r7
    1178:	43 01       	movw	r8, r6
    117a:	60 c1       	rjmp	.+704    	; 0x143c <findFiles+0x34e>

while(1)
{
   firstSector = getFirstSector (cluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
    117c:	d4 01       	movw	r26, r8
    117e:	c3 01       	movw	r24, r6
    1180:	82 0d       	add	r24, r2
    1182:	93 1d       	adc	r25, r3
    1184:	a4 1d       	adc	r26, r4
    1186:	b5 1d       	adc	r27, r5
    1188:	89 83       	std	Y+1, r24	; 0x01
    118a:	9a 83       	std	Y+2, r25	; 0x02
    118c:	ab 83       	std	Y+3, r26	; 0x03
    118e:	bc 83       	std	Y+4, r27	; 0x04
   {
     SD_readSingleBlock (firstSector + sector);
    1190:	bc 01       	movw	r22, r24
    1192:	cd 01       	movw	r24, r26
    1194:	0e 94 65 13 	call	0x26ca	; 0x26ca <SD_readSingleBlock>
    1198:	40 e2       	ldi	r20, 0x20	; 32
    119a:	e4 2e       	mov	r14, r20
    119c:	f1 2c       	mov	r15, r1
    119e:	3e c1       	rjmp	.+636    	; 0x141c <findFiles+0x32e>
	

     for(i=0; i<bytesPerSector; i+=32)
    11a0:	8a 01       	movw	r16, r20
    11a2:	0b 55       	subi	r16, 0x5B	; 91
    11a4:	1f 4f       	sbci	r17, 0xFF	; 255
     {
	    dir = (struct dir_Structure *) &buffer[i];

        if(dir->name[0] == EMPTY) //indicates end of the file list of the directory
    11a6:	f7 01       	movw	r30, r14
    11a8:	eb 55       	subi	r30, 0x5B	; 91
    11aa:	ff 4f       	sbci	r31, 0xFF	; 255
    11ac:	b0 97       	sbiw	r30, 0x20	; 32
    11ae:	80 81       	ld	r24, Z
    11b0:	b0 96       	adiw	r30, 0x20	; 32
    11b2:	88 23       	and	r24, r24
    11b4:	41 f4       	brne	.+16     	; 0x11c6 <findFiles+0xd8>
		{
		  if((flag == GET_FILE) || (flag == DELETE))
    11b6:	9d 81       	ldd	r25, Y+5	; 0x05
    11b8:	91 50       	subi	r25, 0x01	; 1
    11ba:	92 30       	cpi	r25, 0x02	; 2
    11bc:	08 f0       	brcs	.+2      	; 0x11c0 <findFiles+0xd2>
    11be:	68 c1       	rjmp	.+720    	; 0x1490 <findFiles+0x3a2>
		      transmitString_F(PSTR("File does not exist!"));
    11c0:	8a ea       	ldi	r24, 0xAA	; 170
    11c2:	91 e0       	ldi	r25, 0x01	; 1
    11c4:	63 c1       	rjmp	.+710    	; 0x148c <findFiles+0x39e>
		  return 0;   
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
    11c6:	85 3e       	cpi	r24, 0xE5	; 229
    11c8:	09 f4       	brne	.+2      	; 0x11cc <findFiles+0xde>
    11ca:	24 c1       	rjmp	.+584    	; 0x1414 <findFiles+0x326>
    11cc:	75 97       	sbiw	r30, 0x15	; 21
    11ce:	80 81       	ld	r24, Z
    11d0:	8f 30       	cpi	r24, 0x0F	; 15
    11d2:	09 f4       	brne	.+2      	; 0x11d6 <findFiles+0xe8>
    11d4:	1f c1       	rjmp	.+574    	; 0x1414 <findFiles+0x326>
        {
          if((flag == GET_FILE) || (flag == DELETE))
    11d6:	a8 85       	ldd	r26, Y+8	; 0x08
    11d8:	a2 30       	cpi	r26, 0x02	; 2
    11da:	08 f0       	brcs	.+2      	; 0x11de <findFiles+0xf0>
    11dc:	d2 c0       	rjmp	.+420    	; 0x1382 <findFiles+0x294>
    11de:	20 e0       	ldi	r18, 0x00	; 0
    11e0:	30 e0       	ldi	r19, 0x00	; 0
          {
            for(j=0; j<11; j++)
            if(dir->name[j] != fileName[j]) break;
    11e2:	c8 01       	movw	r24, r16
    11e4:	82 0f       	add	r24, r18
    11e6:	93 1f       	adc	r25, r19
    11e8:	ae 81       	ldd	r26, Y+6	; 0x06
    11ea:	bf 81       	ldd	r27, Y+7	; 0x07
    11ec:	a2 0f       	add	r26, r18
    11ee:	b3 1f       	adc	r27, r19
    11f0:	fc 01       	movw	r30, r24
    11f2:	90 81       	ld	r25, Z
    11f4:	8c 91       	ld	r24, X
    11f6:	98 17       	cp	r25, r24
    11f8:	09 f0       	breq	.+2      	; 0x11fc <findFiles+0x10e>
    11fa:	0c c1       	rjmp	.+536    	; 0x1414 <findFiles+0x326>
    11fc:	82 2f       	mov	r24, r18
    11fe:	8f 5f       	subi	r24, 0xFF	; 255
    1200:	2f 5f       	subi	r18, 0xFF	; 255
    1202:	3f 4f       	sbci	r19, 0xFF	; 255
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
          {
            for(j=0; j<11; j++)
    1204:	2b 30       	cpi	r18, 0x0B	; 11
    1206:	31 05       	cpc	r19, r1
    1208:	61 f7       	brne	.-40     	; 0x11e2 <findFiles+0xf4>
            if(dir->name[j] != fileName[j]) break;
            if(j == 11)
    120a:	8b 30       	cpi	r24, 0x0B	; 11
    120c:	09 f0       	breq	.+2      	; 0x1210 <findFiles+0x122>
    120e:	02 c1       	rjmp	.+516    	; 0x1414 <findFiles+0x326>
			{
			  if(flag == GET_FILE)
    1210:	fd 81       	ldd	r31, Y+5	; 0x05
    1212:	f1 30       	cpi	r31, 0x01	; 1
    1214:	09 f0       	breq	.+2      	; 0x1218 <findFiles+0x12a>
    1216:	3f c0       	rjmp	.+126    	; 0x1296 <findFiles+0x1a8>
              {
			    appendFileSector = firstSector + sector;
    1218:	89 81       	ldd	r24, Y+1	; 0x01
    121a:	9a 81       	ldd	r25, Y+2	; 0x02
    121c:	ab 81       	ldd	r26, Y+3	; 0x03
    121e:	bc 81       	ldd	r27, Y+4	; 0x04
    1220:	80 93 b8 02 	sts	0x02B8, r24
    1224:	90 93 b9 02 	sts	0x02B9, r25
    1228:	a0 93 ba 02 	sts	0x02BA, r26
    122c:	b0 93 bb 02 	sts	0x02BB, r27
				appendFileLocation = i;
    1230:	ca 01       	movw	r24, r20
    1232:	a0 e0       	ldi	r26, 0x00	; 0
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	80 93 87 00 	sts	0x0087, r24
    123a:	90 93 88 00 	sts	0x0088, r25
    123e:	a0 93 89 00 	sts	0x0089, r26
    1242:	b0 93 8a 00 	sts	0x008A, r27
				appendStartCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    1246:	d8 01       	movw	r26, r16
    1248:	54 96       	adiw	r26, 0x14	; 20
    124a:	8d 91       	ld	r24, X+
    124c:	9c 91       	ld	r25, X
    124e:	55 97       	sbiw	r26, 0x15	; 21
    1250:	a0 e0       	ldi	r26, 0x00	; 0
    1252:	b0 e0       	ldi	r27, 0x00	; 0
    1254:	dc 01       	movw	r26, r24
    1256:	99 27       	eor	r25, r25
    1258:	88 27       	eor	r24, r24
    125a:	f8 01       	movw	r30, r16
    125c:	22 8d       	ldd	r18, Z+26	; 0x1a
    125e:	33 8d       	ldd	r19, Z+27	; 0x1b
    1260:	40 e0       	ldi	r20, 0x00	; 0
    1262:	50 e0       	ldi	r21, 0x00	; 0
    1264:	82 2b       	or	r24, r18
    1266:	93 2b       	or	r25, r19
    1268:	a4 2b       	or	r26, r20
    126a:	b5 2b       	or	r27, r21
    126c:	80 93 b2 02 	sts	0x02B2, r24
    1270:	90 93 b3 02 	sts	0x02B3, r25
    1274:	a0 93 b4 02 	sts	0x02B4, r26
    1278:	b0 93 b5 02 	sts	0x02B5, r27
				fileSize = dir->fileSize;
    127c:	84 8d       	ldd	r24, Z+28	; 0x1c
    127e:	95 8d       	ldd	r25, Z+29	; 0x1d
    1280:	a6 8d       	ldd	r26, Z+30	; 0x1e
    1282:	b7 8d       	ldd	r27, Z+31	; 0x1f
    1284:	80 93 91 00 	sts	0x0091, r24
    1288:	90 93 92 00 	sts	0x0092, r25
    128c:	a0 93 93 00 	sts	0x0093, r26
    1290:	b0 93 94 00 	sts	0x0094, r27
    1294:	ff c0       	rjmp	.+510    	; 0x1494 <findFiles+0x3a6>
			    return (dir);
			  }	
			  else    //when flag = DELETE
			  {
			     TX_NEWLINE;
    1296:	8d e0       	ldi	r24, 0x0D	; 13
    1298:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    129c:	8a e0       	ldi	r24, 0x0A	; 10
    129e:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
				 transmitString_F(PSTR("Deleting.."));
    12a2:	8f e9       	ldi	r24, 0x9F	; 159
    12a4:	91 e0       	ldi	r25, 0x01	; 1
    12a6:	0e 94 3e 14 	call	0x287c	; 0x287c <transmitString_F>
				 TX_NEWLINE;
    12aa:	8d e0       	ldi	r24, 0x0D	; 13
    12ac:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    12b0:	8a e0       	ldi	r24, 0x0A	; 10
    12b2:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
				 TX_NEWLINE;
    12b6:	8d e0       	ldi	r24, 0x0D	; 13
    12b8:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    12bc:	8a e0       	ldi	r24, 0x0A	; 10
    12be:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
				 firstCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    12c2:	d8 01       	movw	r26, r16
    12c4:	54 96       	adiw	r26, 0x14	; 20
    12c6:	8d 91       	ld	r24, X+
    12c8:	9c 91       	ld	r25, X
    12ca:	55 97       	sbiw	r26, 0x15	; 21
    12cc:	a0 e0       	ldi	r26, 0x00	; 0
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	5c 01       	movw	r10, r24
    12d2:	99 24       	eor	r9, r9
    12d4:	88 24       	eor	r8, r8
    12d6:	f8 01       	movw	r30, r16
    12d8:	82 8d       	ldd	r24, Z+26	; 0x1a
    12da:	93 8d       	ldd	r25, Z+27	; 0x1b
    12dc:	a0 e0       	ldi	r26, 0x00	; 0
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	88 2a       	or	r8, r24
    12e2:	99 2a       	or	r9, r25
    12e4:	aa 2a       	or	r10, r26
    12e6:	bb 2a       	or	r11, r27
                
				 //mark file as 'deleted' in FAT table
				 dir->name[0] = DELETED;    
    12e8:	85 ee       	ldi	r24, 0xE5	; 229
    12ea:	80 83       	st	Z, r24
				 SD_writeSingleBlock (firstSector+sector);
    12ec:	69 81       	ldd	r22, Y+1	; 0x01
    12ee:	7a 81       	ldd	r23, Y+2	; 0x02
    12f0:	8b 81       	ldd	r24, Y+3	; 0x03
    12f2:	9c 81       	ldd	r25, Y+4	; 0x04
    12f4:	0e 94 17 13 	call	0x262e	; 0x262e <SD_writeSingleBlock>
				 			 
				 freeMemoryUpdate (ADD, dir->fileSize);
    12f8:	d8 01       	movw	r26, r16
    12fa:	5c 96       	adiw	r26, 0x1c	; 28
    12fc:	4d 91       	ld	r20, X+
    12fe:	5d 91       	ld	r21, X+
    1300:	6d 91       	ld	r22, X+
    1302:	7c 91       	ld	r23, X
    1304:	5f 97       	sbiw	r26, 0x1f	; 31
    1306:	80 e0       	ldi	r24, 0x00	; 0
    1308:	0e 94 83 05 	call	0xb06	; 0xb06 <freeMemoryUpdate>

				 //update next free cluster entry in FSinfo sector
				 cluster = getSetFreeCluster (NEXT_FREE, GET, 0); 
    130c:	82 e0       	ldi	r24, 0x02	; 2
    130e:	60 e0       	ldi	r22, 0x00	; 0
    1310:	20 e0       	ldi	r18, 0x00	; 0
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	40 e0       	ldi	r20, 0x00	; 0
    1316:	50 e0       	ldi	r21, 0x00	; 0
    1318:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <getSetFreeCluster>
				 if(firstCluster < cluster)
    131c:	86 16       	cp	r8, r22
    131e:	97 06       	cpc	r9, r23
    1320:	a8 06       	cpc	r10, r24
    1322:	b9 06       	cpc	r11, r25
    1324:	30 f4       	brcc	.+12     	; 0x1332 <findFiles+0x244>
				     getSetFreeCluster (NEXT_FREE, SET, firstCluster);
    1326:	82 e0       	ldi	r24, 0x02	; 2
    1328:	61 e0       	ldi	r22, 0x01	; 1
    132a:	a5 01       	movw	r20, r10
    132c:	94 01       	movw	r18, r8
    132e:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <getSetFreeCluster>

				 //mark all the clusters allocated to the file as 'free'
			     while(1)  
			     {
			        nextCluster = getSetNextCluster (firstCluster, GET, 0);
    1332:	c5 01       	movw	r24, r10
    1334:	b4 01       	movw	r22, r8
    1336:	40 e0       	ldi	r20, 0x00	; 0
    1338:	00 e0       	ldi	r16, 0x00	; 0
    133a:	10 e0       	ldi	r17, 0x00	; 0
    133c:	20 e0       	ldi	r18, 0x00	; 0
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	0e 94 fa 07 	call	0xff4	; 0xff4 <getSetNextCluster>
    1344:	f6 2e       	mov	r15, r22
    1346:	e7 2e       	mov	r14, r23
    1348:	d8 2e       	mov	r13, r24
    134a:	c9 2e       	mov	r12, r25
					getSetNextCluster (firstCluster, SET, 0);
    134c:	c5 01       	movw	r24, r10
    134e:	b4 01       	movw	r22, r8
    1350:	41 e0       	ldi	r20, 0x01	; 1
    1352:	00 e0       	ldi	r16, 0x00	; 0
    1354:	10 e0       	ldi	r17, 0x00	; 0
    1356:	20 e0       	ldi	r18, 0x00	; 0
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	0e 94 fa 07 	call	0xff4	; 0xff4 <getSetNextCluster>
    135e:	8f 2d       	mov	r24, r15
    1360:	9e 2d       	mov	r25, r14
    1362:	ad 2d       	mov	r26, r13
    1364:	bc 2d       	mov	r27, r12
    1366:	4c 01       	movw	r8, r24
    1368:	5d 01       	movw	r10, r26
					if(nextCluster > 0x0ffffff6) 
    136a:	b7 ef       	ldi	r27, 0xF7	; 247
    136c:	8b 16       	cp	r8, r27
    136e:	bf ef       	ldi	r27, 0xFF	; 255
    1370:	9b 06       	cpc	r9, r27
    1372:	bf ef       	ldi	r27, 0xFF	; 255
    1374:	ab 06       	cpc	r10, r27
    1376:	bf e0       	ldi	r27, 0x0F	; 15
    1378:	bb 06       	cpc	r11, r27
    137a:	d8 f2       	brcs	.-74     	; 0x1332 <findFiles+0x244>
					   {transmitString_F(PSTR("File deleted!"));return 0;}
    137c:	81 e9       	ldi	r24, 0x91	; 145
    137e:	91 e0       	ldi	r25, 0x01	; 1
    1380:	85 c0       	rjmp	.+266    	; 0x148c <findFiles+0x39e>
			  }
            }
          }
          else  //when flag = GET_LIST
		  {
		     TX_NEWLINE;
    1382:	8d e0       	ldi	r24, 0x0D	; 13
    1384:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    1388:	8a e0       	ldi	r24, 0x0A	; 10
    138a:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    138e:	1a 86       	std	Y+10, r1	; 0x0a
    1390:	19 86       	std	Y+9, r1	; 0x09
    1392:	0b c0       	rjmp	.+22     	; 0x13aa <findFiles+0x2bc>
			 for(j=0; j<11; j++)
		     {
			   if(j == 8) transmitByte(' ');
    1394:	e9 85       	ldd	r30, Y+9	; 0x09
    1396:	e7 30       	cpi	r30, 0x07	; 7
    1398:	19 f4       	brne	.+6      	; 0x13a0 <findFiles+0x2b2>
    139a:	80 e2       	ldi	r24, 0x20	; 32
    139c:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    13a0:	89 85       	ldd	r24, Y+9	; 0x09
    13a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    13a4:	01 96       	adiw	r24, 0x01	; 1
    13a6:	9a 87       	std	Y+10, r25	; 0x0a
    13a8:	89 87       	std	Y+9, r24	; 0x09
			   transmitByte (dir->name[j]);
    13aa:	e9 85       	ldd	r30, Y+9	; 0x09
    13ac:	fa 85       	ldd	r31, Y+10	; 0x0a
    13ae:	e0 0f       	add	r30, r16
    13b0:	f1 1f       	adc	r31, r17
    13b2:	80 81       	ld	r24, Z
    13b4:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
            }
          }
          else  //when flag = GET_LIST
		  {
		     TX_NEWLINE;
			 for(j=0; j<11; j++)
    13b8:	a9 85       	ldd	r26, Y+9	; 0x09
    13ba:	ba 85       	ldd	r27, Y+10	; 0x0a
    13bc:	1a 97       	sbiw	r26, 0x0a	; 10
    13be:	51 f7       	brne	.-44     	; 0x1394 <findFiles+0x2a6>
		     {
			   if(j == 8) transmitByte(' ');
			   transmitByte (dir->name[j]);
			 }
		     transmitString_F (PSTR("   "));
    13c0:	8d e8       	ldi	r24, 0x8D	; 141
    13c2:	91 e0       	ldi	r25, 0x01	; 1
    13c4:	0e 94 3e 14 	call	0x287c	; 0x287c <transmitString_F>
		     if((dir->attrib != 0x10) && (dir->attrib != 0x08))
    13c8:	87 01       	movw	r16, r14
    13ca:	0b 55       	subi	r16, 0x5B	; 91
    13cc:	1f 4f       	sbci	r17, 0xFF	; 255
    13ce:	05 51       	subi	r16, 0x15	; 21
    13d0:	10 40       	sbci	r17, 0x00	; 0
    13d2:	f8 01       	movw	r30, r16
    13d4:	80 81       	ld	r24, Z
    13d6:	0b 5e       	subi	r16, 0xEB	; 235
    13d8:	1f 4f       	sbci	r17, 0xFF	; 255
    13da:	80 31       	cpi	r24, 0x10	; 16
    13dc:	b9 f0       	breq	.+46     	; 0x140c <findFiles+0x31e>
    13de:	88 30       	cpi	r24, 0x08	; 8
    13e0:	19 f4       	brne	.+6      	; 0x13e8 <findFiles+0x2fa>
			     transmitString_F (PSTR("FILE" ));
		         transmitString_F (PSTR("   "));
			     displayMemory (LOW, dir->fileSize);
			 }
			 else
			   transmitString_F ((dir->attrib == 0x10)? PSTR("DIR") : PSTR("ROOT"));
    13e2:	8b e7       	ldi	r24, 0x7B	; 123
    13e4:	91 e0       	ldi	r25, 0x01	; 1
    13e6:	14 c0       	rjmp	.+40     	; 0x1410 <findFiles+0x322>
			   transmitByte (dir->name[j]);
			 }
		     transmitString_F (PSTR("   "));
		     if((dir->attrib != 0x10) && (dir->attrib != 0x08))
			 {
			     transmitString_F (PSTR("FILE" ));
    13e8:	88 e8       	ldi	r24, 0x88	; 136
    13ea:	91 e0       	ldi	r25, 0x01	; 1
    13ec:	0e 94 3e 14 	call	0x287c	; 0x287c <transmitString_F>
		         transmitString_F (PSTR("   "));
    13f0:	84 e8       	ldi	r24, 0x84	; 132
    13f2:	91 e0       	ldi	r25, 0x01	; 1
    13f4:	0e 94 3e 14 	call	0x287c	; 0x287c <transmitString_F>
			     displayMemory (LOW, dir->fileSize);
    13f8:	f8 01       	movw	r30, r16
    13fa:	34 97       	sbiw	r30, 0x04	; 4
    13fc:	40 81       	ld	r20, Z
    13fe:	51 81       	ldd	r21, Z+1	; 0x01
    1400:	62 81       	ldd	r22, Z+2	; 0x02
    1402:	73 81       	ldd	r23, Z+3	; 0x03
    1404:	80 e0       	ldi	r24, 0x00	; 0
    1406:	0e 94 83 03 	call	0x706	; 0x706 <displayMemory>
    140a:	04 c0       	rjmp	.+8      	; 0x1414 <findFiles+0x326>
			 }
			 else
			   transmitString_F ((dir->attrib == 0x10)? PSTR("DIR") : PSTR("ROOT"));
    140c:	80 e8       	ldi	r24, 0x80	; 128
    140e:	91 e0       	ldi	r25, 0x01	; 1
    1410:	0e 94 3e 14 	call	0x287c	; 0x287c <transmitString_F>
    1414:	80 e2       	ldi	r24, 0x20	; 32
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	e8 0e       	add	r14, r24
    141a:	f9 1e       	adc	r15, r25
    141c:	a7 01       	movw	r20, r14
    141e:	40 52       	subi	r20, 0x20	; 32
    1420:	50 40       	sbci	r21, 0x00	; 0
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
    1422:	80 91 95 00 	lds	r24, 0x0095
    1426:	90 91 96 00 	lds	r25, 0x0096
    142a:	48 17       	cp	r20, r24
    142c:	59 07       	cpc	r21, r25
    142e:	08 f4       	brcc	.+2      	; 0x1432 <findFiles+0x344>
    1430:	b7 ce       	rjmp	.-658    	; 0x11a0 <findFiles+0xb2>

while(1)
{
   firstSector = getFirstSector (cluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
    1432:	08 94       	sec
    1434:	61 1c       	adc	r6, r1
    1436:	71 1c       	adc	r7, r1
    1438:	81 1c       	adc	r8, r1
    143a:	91 1c       	adc	r9, r1
    143c:	80 91 a5 02 	lds	r24, 0x02A5
    1440:	90 91 a6 02 	lds	r25, 0x02A6
    1444:	a0 e0       	ldi	r26, 0x00	; 0
    1446:	b0 e0       	ldi	r27, 0x00	; 0
    1448:	68 16       	cp	r6, r24
    144a:	79 06       	cpc	r7, r25
    144c:	8a 06       	cpc	r8, r26
    144e:	9b 06       	cpc	r9, r27
    1450:	08 f4       	brcc	.+2      	; 0x1454 <findFiles+0x366>
    1452:	94 ce       	rjmp	.-728    	; 0x117c <findFiles+0x8e>
		  }
       }
     }
   }

   cluster = (getSetNextCluster (cluster, GET, 0));
    1454:	c6 01       	movw	r24, r12
    1456:	b5 01       	movw	r22, r10
    1458:	40 e0       	ldi	r20, 0x00	; 0
    145a:	00 e0       	ldi	r16, 0x00	; 0
    145c:	10 e0       	ldi	r17, 0x00	; 0
    145e:	20 e0       	ldi	r18, 0x00	; 0
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	0e 94 fa 07 	call	0xff4	; 0xff4 <getSetNextCluster>
    1466:	5b 01       	movw	r10, r22
    1468:	6c 01       	movw	r12, r24

   if(cluster > 0x0ffffff6)
    146a:	97 ef       	ldi	r25, 0xF7	; 247
    146c:	a9 16       	cp	r10, r25
    146e:	9f ef       	ldi	r25, 0xFF	; 255
    1470:	b9 06       	cpc	r11, r25
    1472:	9f ef       	ldi	r25, 0xFF	; 255
    1474:	c9 06       	cpc	r12, r25
    1476:	9f e0       	ldi	r25, 0x0F	; 15
    1478:	d9 06       	cpc	r13, r25
    147a:	50 f4       	brcc	.+20     	; 0x1490 <findFiles+0x3a2>
   	 return 0;
   if(cluster == 0) 
    147c:	a1 14       	cp	r10, r1
    147e:	b1 04       	cpc	r11, r1
    1480:	c1 04       	cpc	r12, r1
    1482:	d1 04       	cpc	r13, r1
    1484:	09 f0       	breq	.+2      	; 0x1488 <findFiles+0x39a>
    1486:	5a ce       	rjmp	.-844    	; 0x113c <findFiles+0x4e>
   {transmitString_F(PSTR("Error in getting cluster"));  return 0;}
    1488:	82 e6       	ldi	r24, 0x62	; 98
    148a:	91 e0       	ldi	r25, 0x01	; 1
    148c:	0e 94 3e 14 	call	0x287c	; 0x287c <transmitString_F>
    1490:	00 e0       	ldi	r16, 0x00	; 0
    1492:	10 e0       	ldi	r17, 0x00	; 0
 }
return 0;
}
    1494:	c8 01       	movw	r24, r16
    1496:	2a 96       	adiw	r28, 0x0a	; 10
    1498:	0f b6       	in	r0, 0x3f	; 63
    149a:	f8 94       	cli
    149c:	de bf       	out	0x3e, r29	; 62
    149e:	0f be       	out	0x3f, r0	; 63
    14a0:	cd bf       	out	0x3d, r28	; 61
    14a2:	cf 91       	pop	r28
    14a4:	df 91       	pop	r29
    14a6:	1f 91       	pop	r17
    14a8:	0f 91       	pop	r16
    14aa:	ff 90       	pop	r15
    14ac:	ef 90       	pop	r14
    14ae:	df 90       	pop	r13
    14b0:	cf 90       	pop	r12
    14b2:	bf 90       	pop	r11
    14b4:	af 90       	pop	r10
    14b6:	9f 90       	pop	r9
    14b8:	8f 90       	pop	r8
    14ba:	7f 90       	pop	r7
    14bc:	6f 90       	pop	r6
    14be:	5f 90       	pop	r5
    14c0:	4f 90       	pop	r4
    14c2:	3f 90       	pop	r3
    14c4:	2f 90       	pop	r2
    14c6:	08 95       	ret

000014c8 <deleteFile>:
//Function: to delete a specified file from the root directory
//Arguments: pointer to the file name
//return: none
//********************************************************************
void deleteFile (unsigned char *fileName)
{
    14c8:	cf 93       	push	r28
    14ca:	df 93       	push	r29
    14cc:	ec 01       	movw	r28, r24
  unsigned char error;

  error = convertFileName (fileName);
    14ce:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <convertFileName>
  if(error) return;
    14d2:	88 23       	and	r24, r24
    14d4:	21 f4       	brne	.+8      	; 0x14de <deleteFile+0x16>

  findFiles (DELETE, fileName);
    14d6:	82 e0       	ldi	r24, 0x02	; 2
    14d8:	be 01       	movw	r22, r28
    14da:	0e 94 77 08 	call	0x10ee	; 0x10ee <findFiles>
}
    14de:	df 91       	pop	r29
    14e0:	cf 91       	pop	r28
    14e2:	08 95       	ret

000014e4 <readFile>:
//return: 0, if normal operation or flag is READ
//	      1, if file is already existing and flag = VERIFY
//		  2, if file name is incompatible
//***************************************************************************
unsigned char readFile (unsigned char flag, unsigned char *fileName)
{
    14e4:	2f 92       	push	r2
    14e6:	3f 92       	push	r3
    14e8:	4f 92       	push	r4
    14ea:	5f 92       	push	r5
    14ec:	6f 92       	push	r6
    14ee:	7f 92       	push	r7
    14f0:	8f 92       	push	r8
    14f2:	9f 92       	push	r9
    14f4:	af 92       	push	r10
    14f6:	bf 92       	push	r11
    14f8:	cf 92       	push	r12
    14fa:	df 92       	push	r13
    14fc:	ef 92       	push	r14
    14fe:	ff 92       	push	r15
    1500:	0f 93       	push	r16
    1502:	1f 93       	push	r17
    1504:	df 93       	push	r29
    1506:	cf 93       	push	r28
    1508:	00 d0       	rcall	.+0      	; 0x150a <readFile+0x26>
    150a:	00 d0       	rcall	.+0      	; 0x150c <readFile+0x28>
    150c:	cd b7       	in	r28, 0x3d	; 61
    150e:	de b7       	in	r29, 0x3e	; 62
    1510:	e8 2e       	mov	r14, r24
    1512:	8b 01       	movw	r16, r22
struct dir_Structure *dir;
unsigned long cluster, byteCounter = 0, fileSize, firstSector;
unsigned int k;
unsigned char j, error;

error = convertFileName (fileName); //convert fileName into FAT format
    1514:	cb 01       	movw	r24, r22
    1516:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <convertFileName>
if(error) return 2;
    151a:	88 23       	and	r24, r24
    151c:	11 f0       	breq	.+4      	; 0x1522 <readFile+0x3e>
    151e:	82 e0       	ldi	r24, 0x02	; 2
    1520:	9b c0       	rjmp	.+310    	; 0x1658 <readFile+0x174>

dir = findFiles (GET_FILE, fileName); //get the file location
    1522:	81 e0       	ldi	r24, 0x01	; 1
    1524:	b8 01       	movw	r22, r16
    1526:	0e 94 77 08 	call	0x10ee	; 0x10ee <findFiles>
    152a:	9c 01       	movw	r18, r24
if(dir == 0) 
    152c:	00 97       	sbiw	r24, 0x00	; 0
    152e:	09 f4       	brne	.+2      	; 0x1532 <readFile+0x4e>
    1530:	92 c0       	rjmp	.+292    	; 0x1656 <readFile+0x172>
  return (0);

if(flag == VERIFY) return (1);	//specified file name is already existing
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	e8 16       	cp	r14, r24
    1536:	09 f4       	brne	.+2      	; 0x153a <readFile+0x56>
    1538:	8f c0       	rjmp	.+286    	; 0x1658 <readFile+0x174>

cluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    153a:	d9 01       	movw	r26, r18
    153c:	54 96       	adiw	r26, 0x14	; 20
    153e:	8d 91       	ld	r24, X+
    1540:	9c 91       	ld	r25, X
    1542:	55 97       	sbiw	r26, 0x15	; 21
    1544:	a0 e0       	ldi	r26, 0x00	; 0
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	4c 01       	movw	r8, r24
    154a:	77 24       	eor	r7, r7
    154c:	66 24       	eor	r6, r6
    154e:	f9 01       	movw	r30, r18
    1550:	82 8d       	ldd	r24, Z+26	; 0x1a
    1552:	93 8d       	ldd	r25, Z+27	; 0x1b
    1554:	a0 e0       	ldi	r26, 0x00	; 0
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	68 2a       	or	r6, r24
    155a:	79 2a       	or	r7, r25
    155c:	8a 2a       	or	r8, r26
    155e:	9b 2a       	or	r9, r27

fileSize = dir->fileSize;
    1560:	d9 01       	movw	r26, r18
    1562:	5c 96       	adiw	r26, 0x1c	; 28
    1564:	8d 91       	ld	r24, X+
    1566:	9d 91       	ld	r25, X+
    1568:	0d 90       	ld	r0, X+
    156a:	bc 91       	ld	r27, X
    156c:	a0 2d       	mov	r26, r0
    156e:	89 83       	std	Y+1, r24	; 0x01
    1570:	9a 83       	std	Y+2, r25	; 0x02
    1572:	ab 83       	std	Y+3, r26	; 0x03
    1574:	bc 83       	std	Y+4, r27	; 0x04

TX_NEWLINE;
    1576:	8d e0       	ldi	r24, 0x0D	; 13
    1578:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    157c:	8a e0       	ldi	r24, 0x0A	; 10
    157e:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
TX_NEWLINE;
    1582:	8d e0       	ldi	r24, 0x0D	; 13
    1584:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    1588:	8a e0       	ldi	r24, 0x0A	; 10
    158a:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    158e:	22 24       	eor	r2, r2
    1590:	33 24       	eor	r3, r3
    1592:	21 01       	movw	r4, r2
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    1594:	20 91 a5 02 	lds	r18, 0x02A5
    1598:	30 91 a6 02 	lds	r19, 0x02A6
    159c:	e0 90 8d 00 	lds	r14, 0x008D
    15a0:	f0 90 8e 00 	lds	r15, 0x008E
    15a4:	00 91 8f 00 	lds	r16, 0x008F
    15a8:	10 91 90 00 	lds	r17, 0x0090
    15ac:	c4 01       	movw	r24, r8
    15ae:	b3 01       	movw	r22, r6
    15b0:	62 50       	subi	r22, 0x02	; 2
    15b2:	70 40       	sbci	r23, 0x00	; 0
    15b4:	80 40       	sbci	r24, 0x00	; 0
    15b6:	90 40       	sbci	r25, 0x00	; 0
    15b8:	40 e0       	ldi	r20, 0x00	; 0
    15ba:	50 e0       	ldi	r21, 0x00	; 0
    15bc:	0e 94 b8 18 	call	0x3170	; 0x3170 <__mulsi3>
    15c0:	5b 01       	movw	r10, r22
    15c2:	6c 01       	movw	r12, r24
    15c4:	ae 0c       	add	r10, r14
    15c6:	bf 1c       	adc	r11, r15
    15c8:	c0 1e       	adc	r12, r16
    15ca:	d1 1e       	adc	r13, r17
    15cc:	ee 24       	eor	r14, r14
    15ce:	25 c0       	rjmp	.+74     	; 0x161a <readFile+0x136>
{
  firstSector = getFirstSector (cluster);

  for(j=0; j<sectorPerCluster; j++)
  {
    SD_readSingleBlock(firstSector + j);
    15d0:	c6 01       	movw	r24, r12
    15d2:	b5 01       	movw	r22, r10
    15d4:	6e 0d       	add	r22, r14
    15d6:	71 1d       	adc	r23, r1
    15d8:	81 1d       	adc	r24, r1
    15da:	91 1d       	adc	r25, r1
    15dc:	0e 94 65 13 	call	0x26ca	; 0x26ca <SD_readSingleBlock>
    15e0:	00 e0       	ldi	r16, 0x00	; 0
    15e2:	10 e0       	ldi	r17, 0x00	; 0
    
	for(k=0; k<512; k++)
    {
      transmitByte(buffer[k]);
    15e4:	f8 01       	movw	r30, r16
    15e6:	eb 55       	subi	r30, 0x5B	; 91
    15e8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ea:	80 81       	ld	r24, Z
    15ec:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
      if ((byteCounter++) >= fileSize ) return 0;
    15f0:	89 81       	ldd	r24, Y+1	; 0x01
    15f2:	9a 81       	ldd	r25, Y+2	; 0x02
    15f4:	ab 81       	ldd	r26, Y+3	; 0x03
    15f6:	bc 81       	ldd	r27, Y+4	; 0x04
    15f8:	28 16       	cp	r2, r24
    15fa:	39 06       	cpc	r3, r25
    15fc:	4a 06       	cpc	r4, r26
    15fe:	5b 06       	cpc	r5, r27
    1600:	50 f5       	brcc	.+84     	; 0x1656 <readFile+0x172>
    1602:	08 94       	sec
    1604:	21 1c       	adc	r2, r1
    1606:	31 1c       	adc	r3, r1
    1608:	41 1c       	adc	r4, r1
    160a:	51 1c       	adc	r5, r1

  for(j=0; j<sectorPerCluster; j++)
  {
    SD_readSingleBlock(firstSector + j);
    
	for(k=0; k<512; k++)
    160c:	0f 5f       	subi	r16, 0xFF	; 255
    160e:	1f 4f       	sbci	r17, 0xFF	; 255
    1610:	92 e0       	ldi	r25, 0x02	; 2
    1612:	00 30       	cpi	r16, 0x00	; 0
    1614:	19 07       	cpc	r17, r25
    1616:	31 f7       	brne	.-52     	; 0x15e4 <readFile+0x100>

while(1)
{
  firstSector = getFirstSector (cluster);

  for(j=0; j<sectorPerCluster; j++)
    1618:	e3 94       	inc	r14
    161a:	20 91 a5 02 	lds	r18, 0x02A5
    161e:	30 91 a6 02 	lds	r19, 0x02A6
    1622:	8e 2d       	mov	r24, r14
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	82 17       	cp	r24, r18
    1628:	93 07       	cpc	r25, r19
    162a:	90 f2       	brcs	.-92     	; 0x15d0 <readFile+0xec>
    {
      transmitByte(buffer[k]);
      if ((byteCounter++) >= fileSize ) return 0;
    }
  }
  cluster = getSetNextCluster (cluster, GET, 0);
    162c:	c4 01       	movw	r24, r8
    162e:	b3 01       	movw	r22, r6
    1630:	40 e0       	ldi	r20, 0x00	; 0
    1632:	00 e0       	ldi	r16, 0x00	; 0
    1634:	10 e0       	ldi	r17, 0x00	; 0
    1636:	20 e0       	ldi	r18, 0x00	; 0
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	0e 94 fa 07 	call	0xff4	; 0xff4 <getSetNextCluster>
    163e:	3b 01       	movw	r6, r22
    1640:	4c 01       	movw	r8, r24
  if(cluster == 0) {transmitString_F(PSTR("Error in getting cluster")); return 0;}
    1642:	61 15       	cp	r22, r1
    1644:	71 05       	cpc	r23, r1
    1646:	81 05       	cpc	r24, r1
    1648:	91 05       	cpc	r25, r1
    164a:	09 f0       	breq	.+2      	; 0x164e <readFile+0x16a>
    164c:	a3 cf       	rjmp	.-186    	; 0x1594 <readFile+0xb0>
    164e:	89 e4       	ldi	r24, 0x49	; 73
    1650:	91 e0       	ldi	r25, 0x01	; 1
    1652:	0e 94 3e 14 	call	0x287c	; 0x287c <transmitString_F>
    1656:	80 e0       	ldi	r24, 0x00	; 0
}
return 0;
}
    1658:	0f 90       	pop	r0
    165a:	0f 90       	pop	r0
    165c:	0f 90       	pop	r0
    165e:	0f 90       	pop	r0
    1660:	cf 91       	pop	r28
    1662:	df 91       	pop	r29
    1664:	1f 91       	pop	r17
    1666:	0f 91       	pop	r16
    1668:	ff 90       	pop	r15
    166a:	ef 90       	pop	r14
    166c:	df 90       	pop	r13
    166e:	cf 90       	pop	r12
    1670:	bf 90       	pop	r11
    1672:	af 90       	pop	r10
    1674:	9f 90       	pop	r9
    1676:	8f 90       	pop	r8
    1678:	7f 90       	pop	r7
    167a:	6f 90       	pop	r6
    167c:	5f 90       	pop	r5
    167e:	4f 90       	pop	r4
    1680:	3f 90       	pop	r3
    1682:	2f 90       	pop	r2
    1684:	08 95       	ret

00001686 <writeFile>:
//			file name does not exist; if the file already exists then append the data
//Arguments: pointer to the file name
//return: none
//************************************************************************************
void writeFile (unsigned char *fileName)
{
    1686:	2f 92       	push	r2
    1688:	3f 92       	push	r3
    168a:	4f 92       	push	r4
    168c:	5f 92       	push	r5
    168e:	6f 92       	push	r6
    1690:	7f 92       	push	r7
    1692:	8f 92       	push	r8
    1694:	9f 92       	push	r9
    1696:	af 92       	push	r10
    1698:	bf 92       	push	r11
    169a:	cf 92       	push	r12
    169c:	df 92       	push	r13
    169e:	ef 92       	push	r14
    16a0:	ff 92       	push	r15
    16a2:	0f 93       	push	r16
    16a4:	1f 93       	push	r17
    16a6:	df 93       	push	r29
    16a8:	cf 93       	push	r28
    16aa:	cd b7       	in	r28, 0x3d	; 61
    16ac:	de b7       	in	r29, 0x3e	; 62
    16ae:	27 97       	sbiw	r28, 0x07	; 7
    16b0:	0f b6       	in	r0, 0x3f	; 63
    16b2:	f8 94       	cli
    16b4:	de bf       	out	0x3e, r29	; 62
    16b6:	0f be       	out	0x3f, r0	; 63
    16b8:	cd bf       	out	0x3d, r28	; 61
    16ba:	9d 83       	std	Y+5, r25	; 0x05
    16bc:	8c 83       	std	Y+4, r24	; 0x04
unsigned char j, data, error, fileCreatedFlag = 0, start = 0, appendFile = 0, sectorEndFlag = 0, sector=0;
unsigned int i, firstClusterHigh=0, firstClusterLow=0;  //value 0 is assigned just to avoid warning in compilation
struct dir_Structure *dir;
unsigned long cluster, nextCluster, prevCluster, firstSector, clusterCount, extraMemory;

j = readFile (VERIFY, fileName);
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	6c 81       	ldd	r22, Y+4	; 0x04
    16c2:	7d 81       	ldd	r23, Y+5	; 0x05
    16c4:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <readFile>

if(j == 1) 
    16c8:	81 30       	cpi	r24, 0x01	; 1
    16ca:	09 f0       	breq	.+2      	; 0x16ce <writeFile+0x48>
    16cc:	5b c0       	rjmp	.+182    	; 0x1784 <writeFile+0xfe>
{
  transmitString_F(PSTR(" File already exists, appending data..")); 
    16ce:	8f e0       	ldi	r24, 0x0F	; 15
    16d0:	91 e0       	ldi	r25, 0x01	; 1
    16d2:	0e 94 3e 14 	call	0x287c	; 0x287c <transmitString_F>
  appendFile = 1;
  cluster = appendStartCluster;
    16d6:	60 90 b2 02 	lds	r6, 0x02B2
    16da:	70 90 b3 02 	lds	r7, 0x02B3
    16de:	80 90 b4 02 	lds	r8, 0x02B4
    16e2:	90 90 b5 02 	lds	r9, 0x02B5
    16e6:	aa 24       	eor	r10, r10
    16e8:	bb 24       	eor	r11, r11
    16ea:	65 01       	movw	r12, r10
  clusterCount=0;
  while(1)
  {
    nextCluster = getSetNextCluster (cluster, GET, 0);
    16ec:	c4 01       	movw	r24, r8
    16ee:	b3 01       	movw	r22, r6
    16f0:	40 e0       	ldi	r20, 0x00	; 0
    16f2:	00 e0       	ldi	r16, 0x00	; 0
    16f4:	10 e0       	ldi	r17, 0x00	; 0
    16f6:	20 e0       	ldi	r18, 0x00	; 0
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	0e 94 fa 07 	call	0xff4	; 0xff4 <getSetNextCluster>
    if(nextCluster == EOF) break;
    16fe:	6f 3f       	cpi	r22, 0xFF	; 255
    1700:	2f ef       	ldi	r18, 0xFF	; 255
    1702:	72 07       	cpc	r23, r18
    1704:	2f ef       	ldi	r18, 0xFF	; 255
    1706:	82 07       	cpc	r24, r18
    1708:	2f e0       	ldi	r18, 0x0F	; 15
    170a:	92 07       	cpc	r25, r18
    170c:	41 f0       	breq	.+16     	; 0x171e <writeFile+0x98>
	cluster = nextCluster;
	clusterCount++;
    170e:	08 94       	sec
    1710:	a1 1c       	adc	r10, r1
    1712:	b1 1c       	adc	r11, r1
    1714:	c1 1c       	adc	r12, r1
    1716:	d1 1c       	adc	r13, r1
    1718:	3b 01       	movw	r6, r22
    171a:	4c 01       	movw	r8, r24
    171c:	e7 cf       	rjmp	.-50     	; 0x16ec <writeFile+0x66>
  }

  sector = (fileSize - (clusterCount * sectorPerCluster * bytesPerSector)) / bytesPerSector; //last sector number of the last cluster of the file
    171e:	20 91 a5 02 	lds	r18, 0x02A5
    1722:	30 91 a6 02 	lds	r19, 0x02A6
    1726:	60 91 95 00 	lds	r22, 0x0095
    172a:	70 91 96 00 	lds	r23, 0x0096
    172e:	e0 90 95 00 	lds	r14, 0x0095
    1732:	f0 90 96 00 	lds	r15, 0x0096
    1736:	80 e0       	ldi	r24, 0x00	; 0
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	40 e0       	ldi	r20, 0x00	; 0
    173c:	50 e0       	ldi	r21, 0x00	; 0
    173e:	0e 94 b8 18 	call	0x3170	; 0x3170 <__mulsi3>
    1742:	a6 01       	movw	r20, r12
    1744:	95 01       	movw	r18, r10
    1746:	0e 94 b8 18 	call	0x3170	; 0x3170 <__mulsi3>
    174a:	9b 01       	movw	r18, r22
    174c:	ac 01       	movw	r20, r24
    174e:	60 91 91 00 	lds	r22, 0x0091
    1752:	70 91 92 00 	lds	r23, 0x0092
    1756:	80 91 93 00 	lds	r24, 0x0093
    175a:	90 91 94 00 	lds	r25, 0x0094
    175e:	62 1b       	sub	r22, r18
    1760:	73 0b       	sbc	r23, r19
    1762:	84 0b       	sbc	r24, r20
    1764:	95 0b       	sbc	r25, r21
    1766:	00 e0       	ldi	r16, 0x00	; 0
    1768:	10 e0       	ldi	r17, 0x00	; 0
    176a:	a8 01       	movw	r20, r16
    176c:	97 01       	movw	r18, r14
    176e:	0e 94 d7 18 	call	0x31ae	; 0x31ae <__udivmodsi4>
    1772:	b2 2e       	mov	r11, r18
    1774:	21 e0       	ldi	r18, 0x01	; 1
    1776:	aa 24       	eor	r10, r10
    1778:	a3 94       	inc	r10
    177a:	1a 82       	std	Y+2, r1	; 0x02
    177c:	19 82       	std	Y+1, r1	; 0x01
    177e:	1f 82       	std	Y+7, r1	; 0x07
    1780:	1e 82       	std	Y+6, r1	; 0x06
    1782:	59 c0       	rjmp	.+178    	; 0x1836 <writeFile+0x1b0>
  start = 1;
//  appendFile();
//  return;
}
else if(j == 2) 
    1784:	82 30       	cpi	r24, 0x02	; 2
    1786:	09 f4       	brne	.+2      	; 0x178a <writeFile+0x104>
    1788:	40 c3       	rjmp	.+1664   	; 0x1e0a <writeFile+0x784>
{
   return; //invalid file name
}
else
{
  TX_NEWLINE;
    178a:	8d e0       	ldi	r24, 0x0D	; 13
    178c:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    1790:	8a e0       	ldi	r24, 0x0A	; 10
    1792:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
  transmitString_F(PSTR(" Creating File.."));
    1796:	8e ef       	ldi	r24, 0xFE	; 254
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	0e 94 3e 14 	call	0x287c	; 0x287c <transmitString_F>

  cluster = getSetFreeCluster (NEXT_FREE, GET, 0);
    179e:	82 e0       	ldi	r24, 0x02	; 2
    17a0:	60 e0       	ldi	r22, 0x00	; 0
    17a2:	20 e0       	ldi	r18, 0x00	; 0
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	40 e0       	ldi	r20, 0x00	; 0
    17a8:	50 e0       	ldi	r21, 0x00	; 0
    17aa:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <getSetFreeCluster>
    17ae:	9b 01       	movw	r18, r22
    17b0:	ac 01       	movw	r20, r24
  if(cluster > totalClusters)
    17b2:	80 91 97 00 	lds	r24, 0x0097
    17b6:	90 91 98 00 	lds	r25, 0x0098
    17ba:	a0 91 99 00 	lds	r26, 0x0099
    17be:	b0 91 9a 00 	lds	r27, 0x009A
    17c2:	82 17       	cp	r24, r18
    17c4:	93 07       	cpc	r25, r19
    17c6:	a4 07       	cpc	r26, r20
    17c8:	b5 07       	cpc	r27, r21
    17ca:	40 f4       	brcc	.+16     	; 0x17dc <writeFile+0x156>
     cluster = rootCluster;
    17cc:	20 91 9b 00 	lds	r18, 0x009B
    17d0:	30 91 9c 00 	lds	r19, 0x009C
    17d4:	40 91 9d 00 	lds	r20, 0x009D
    17d8:	50 91 9e 00 	lds	r21, 0x009E

  cluster = searchNextFreeCluster(cluster);
    17dc:	ca 01       	movw	r24, r20
    17de:	b9 01       	movw	r22, r18
    17e0:	0e 94 72 04 	call	0x8e4	; 0x8e4 <searchNextFreeCluster>
    17e4:	3b 01       	movw	r6, r22
    17e6:	4c 01       	movw	r8, r24
   if(cluster == 0)
    17e8:	61 15       	cp	r22, r1
    17ea:	71 05       	cpc	r23, r1
    17ec:	81 05       	cpc	r24, r1
    17ee:	91 05       	cpc	r25, r1
    17f0:	49 f4       	brne	.+18     	; 0x1804 <writeFile+0x17e>
   {
      TX_NEWLINE;
    17f2:	8d e0       	ldi	r24, 0x0D	; 13
    17f4:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    17f8:	8a e0       	ldi	r24, 0x0A	; 10
    17fa:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
      transmitString_F(PSTR(" No free cluster!"));
    17fe:	8c ee       	ldi	r24, 0xEC	; 236
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	01 c3       	rjmp	.+1538   	; 0x1e06 <writeFile+0x780>
	  return;
   }
  getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
    1804:	41 e0       	ldi	r20, 0x01	; 1
    1806:	0f ef       	ldi	r16, 0xFF	; 255
    1808:	1f ef       	ldi	r17, 0xFF	; 255
    180a:	2f ef       	ldi	r18, 0xFF	; 255
    180c:	3f e0       	ldi	r19, 0x0F	; 15
    180e:	0e 94 fa 07 	call	0xff4	; 0xff4 <getSetNextCluster>
   
  firstClusterHigh = (unsigned int) ((cluster & 0xffff0000) >> 16 );
    1812:	c4 01       	movw	r24, r8
    1814:	aa 27       	eor	r26, r26
    1816:	bb 27       	eor	r27, r27
    1818:	9a 83       	std	Y+2, r25	; 0x02
    181a:	89 83       	std	Y+1, r24	; 0x01
  firstClusterLow = (unsigned int) ( cluster & 0x0000ffff);
    181c:	7f 82       	std	Y+7, r7	; 0x07
    181e:	6e 82       	std	Y+6, r6	; 0x06
  fileSize = 0;
    1820:	10 92 91 00 	sts	0x0091, r1
    1824:	10 92 92 00 	sts	0x0092, r1
    1828:	10 92 93 00 	sts	0x0093, r1
    182c:	10 92 94 00 	sts	0x0094, r1
    1830:	20 e0       	ldi	r18, 0x00	; 0
    1832:	aa 24       	eor	r10, r10
    1834:	bb 24       	eor	r11, r11
    1836:	1b 82       	std	Y+3, r1	; 0x03
while(1)
{
   if(start)
   {
      start = 0;
	  startBlock = getFirstSector (cluster) + sector;
    1838:	2b 2c       	mov	r2, r11
    183a:	33 24       	eor	r3, r3
    183c:	44 24       	eor	r4, r4
    183e:	55 24       	eor	r5, r5
    1840:	c4 01       	movw	r24, r8
    1842:	b3 01       	movw	r22, r6
    1844:	62 50       	subi	r22, 0x02	; 2
    1846:	70 40       	sbci	r23, 0x00	; 0
    1848:	80 40       	sbci	r24, 0x00	; 0
    184a:	90 40       	sbci	r25, 0x00	; 0



while(1)
{
   if(start)
    184c:	22 23       	and	r18, r18
    184e:	e9 f1       	breq	.+122    	; 0x18ca <writeFile+0x244>
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    1850:	20 91 a5 02 	lds	r18, 0x02A5
    1854:	30 91 a6 02 	lds	r19, 0x02A6
    1858:	e0 90 8d 00 	lds	r14, 0x008D
    185c:	f0 90 8e 00 	lds	r15, 0x008E
    1860:	00 91 8f 00 	lds	r16, 0x008F
    1864:	10 91 90 00 	lds	r17, 0x0090
while(1)
{
   if(start)
   {
      start = 0;
	  startBlock = getFirstSector (cluster) + sector;
    1868:	e2 0c       	add	r14, r2
    186a:	f3 1c       	adc	r15, r3
    186c:	04 1d       	adc	r16, r4
    186e:	15 1d       	adc	r17, r5
    1870:	40 e0       	ldi	r20, 0x00	; 0
    1872:	50 e0       	ldi	r21, 0x00	; 0
    1874:	0e 94 b8 18 	call	0x3170	; 0x3170 <__mulsi3>
    1878:	e6 0e       	add	r14, r22
    187a:	f7 1e       	adc	r15, r23
    187c:	08 1f       	adc	r16, r24
    187e:	19 1f       	adc	r17, r25
    1880:	e0 92 a1 00 	sts	0x00A1, r14
    1884:	f0 92 a2 00 	sts	0x00A2, r15
    1888:	00 93 a3 00 	sts	0x00A3, r16
    188c:	10 93 a4 00 	sts	0x00A4, r17
	  SD_readSingleBlock (startBlock);
    1890:	60 91 a1 00 	lds	r22, 0x00A1
    1894:	70 91 a2 00 	lds	r23, 0x00A2
    1898:	80 91 a3 00 	lds	r24, 0x00A3
    189c:	90 91 a4 00 	lds	r25, 0x00A4
    18a0:	0e 94 65 13 	call	0x26ca	; 0x26ca <SD_readSingleBlock>
	  i = fileSize % bytesPerSector;
    18a4:	20 91 95 00 	lds	r18, 0x0095
    18a8:	30 91 96 00 	lds	r19, 0x0096
    18ac:	40 e0       	ldi	r20, 0x00	; 0
    18ae:	50 e0       	ldi	r21, 0x00	; 0
    18b0:	60 91 91 00 	lds	r22, 0x0091
    18b4:	70 91 92 00 	lds	r23, 0x0092
    18b8:	80 91 93 00 	lds	r24, 0x0093
    18bc:	90 91 94 00 	lds	r25, 0x0094
    18c0:	0e 94 d7 18 	call	0x31ae	; 0x31ae <__udivmodsi4>
    18c4:	8b 01       	movw	r16, r22
    18c6:	eb 2c       	mov	r14, r11
    18c8:	1f c0       	rjmp	.+62     	; 0x1908 <writeFile+0x282>
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    18ca:	20 91 a5 02 	lds	r18, 0x02A5
    18ce:	30 91 a6 02 	lds	r19, 0x02A6
    18d2:	e0 90 8d 00 	lds	r14, 0x008D
    18d6:	f0 90 8e 00 	lds	r15, 0x008E
    18da:	00 91 8f 00 	lds	r16, 0x008F
    18de:	10 91 90 00 	lds	r17, 0x0090
    18e2:	40 e0       	ldi	r20, 0x00	; 0
    18e4:	50 e0       	ldi	r21, 0x00	; 0
    18e6:	0e 94 b8 18 	call	0x3170	; 0x3170 <__mulsi3>
    18ea:	e6 0e       	add	r14, r22
    18ec:	f7 1e       	adc	r15, r23
    18ee:	08 1f       	adc	r16, r24
    18f0:	19 1f       	adc	r17, r25
	  i = fileSize % bytesPerSector;
	  j = sector;
   }
   else
   {
      startBlock = getFirstSector (cluster);
    18f2:	e0 92 a1 00 	sts	0x00A1, r14
    18f6:	f0 92 a2 00 	sts	0x00A2, r15
    18fa:	00 93 a3 00 	sts	0x00A3, r16
    18fe:	10 93 a4 00 	sts	0x00A4, r17
    1902:	ee 24       	eor	r14, r14
    1904:	00 e0       	ldi	r16, 0x00	; 0
    1906:	10 e0       	ldi	r17, 0x00	; 0
	  i=0;
	  j=0;
   }
   

   TX_NEWLINE;
    1908:	8d e0       	ldi	r24, 0x0D	; 13
    190a:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    190e:	8a e0       	ldi	r24, 0x0A	; 10
    1910:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
   transmitString_F(PSTR(" Enter text (end with ~):"));
    1914:	82 ed       	ldi	r24, 0xD2	; 210
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	0e 94 3e 14 	call	0x287c	; 0x287c <transmitString_F>
   
   do
   {
     if(sectorEndFlag == 1) //special case when the last character in previous sector was '\r'
    191c:	8b 81       	ldd	r24, Y+3	; 0x03
    191e:	81 30       	cpi	r24, 0x01	; 1
    1920:	e9 f4       	brne	.+58     	; 0x195c <writeFile+0x2d6>
	 {
	 	transmitByte ('\n');
    1922:	8a e0       	ldi	r24, 0x0A	; 10
    1924:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
        buffer[i++] = '\n'; //appending 'Line Feed (LF)' character
    1928:	f8 01       	movw	r30, r16
    192a:	eb 55       	subi	r30, 0x5B	; 91
    192c:	ff 4f       	sbci	r31, 0xFF	; 255
    192e:	8a e0       	ldi	r24, 0x0A	; 10
    1930:	80 83       	st	Z, r24
    1932:	0f 5f       	subi	r16, 0xFF	; 255
    1934:	1f 4f       	sbci	r17, 0xFF	; 255
		fileSize++;
    1936:	80 91 91 00 	lds	r24, 0x0091
    193a:	90 91 92 00 	lds	r25, 0x0092
    193e:	a0 91 93 00 	lds	r26, 0x0093
    1942:	b0 91 94 00 	lds	r27, 0x0094
    1946:	01 96       	adiw	r24, 0x01	; 1
    1948:	a1 1d       	adc	r26, r1
    194a:	b1 1d       	adc	r27, r1
    194c:	80 93 91 00 	sts	0x0091, r24
    1950:	90 93 92 00 	sts	0x0092, r25
    1954:	a0 93 93 00 	sts	0x0093, r26
    1958:	b0 93 94 00 	sts	0x0094, r27
	 }

	sectorEndFlag = 0;

	 data = receiveByte();
    195c:	0e 94 35 14 	call	0x286a	; 0x286a <receiveByte>
    1960:	f8 2e       	mov	r15, r24
	 if(data == 0x08)	//'Back Space' key pressed
    1962:	98 e0       	ldi	r25, 0x08	; 8
    1964:	89 17       	cp	r24, r25
    1966:	d1 f4       	brne	.+52     	; 0x199c <writeFile+0x316>
	 { 
	   if(i != 0)
    1968:	01 15       	cp	r16, r1
    196a:	11 05       	cpc	r17, r1
    196c:	b9 f3       	breq	.-18     	; 0x195c <writeFile+0x2d6>
	   { 
	     transmitByte(data);
    196e:	88 e0       	ldi	r24, 0x08	; 8
    1970:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
		 transmitByte(' '); 
    1974:	80 e2       	ldi	r24, 0x20	; 32
    1976:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
	     transmitByte(data); 
    197a:	88 e0       	ldi	r24, 0x08	; 8
    197c:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
	     i--; 
    1980:	01 50       	subi	r16, 0x01	; 1
    1982:	10 40       	sbci	r17, 0x00	; 0
		 fileSize--;
    1984:	80 91 91 00 	lds	r24, 0x0091
    1988:	90 91 92 00 	lds	r25, 0x0092
    198c:	a0 91 93 00 	lds	r26, 0x0093
    1990:	b0 91 94 00 	lds	r27, 0x0094
    1994:	01 97       	sbiw	r24, 0x01	; 1
    1996:	a1 09       	sbc	r26, r1
    1998:	b1 09       	sbc	r27, r1
    199a:	d8 cf       	rjmp	.-80     	; 0x194c <writeFile+0x2c6>
	   } 
	   continue;     
	 }
	 transmitByte(data);
    199c:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
     buffer[i++] = data;
    19a0:	f8 01       	movw	r30, r16
    19a2:	eb 55       	subi	r30, 0x5B	; 91
    19a4:	ff 4f       	sbci	r31, 0xFF	; 255
    19a6:	f0 82       	st	Z, r15
    19a8:	0f 5f       	subi	r16, 0xFF	; 255
    19aa:	1f 4f       	sbci	r17, 0xFF	; 255
	 fileSize++;
    19ac:	80 91 91 00 	lds	r24, 0x0091
    19b0:	90 91 92 00 	lds	r25, 0x0092
    19b4:	a0 91 93 00 	lds	r26, 0x0093
    19b8:	b0 91 94 00 	lds	r27, 0x0094
    19bc:	01 96       	adiw	r24, 0x01	; 1
    19be:	a1 1d       	adc	r26, r1
    19c0:	b1 1d       	adc	r27, r1
    19c2:	80 93 91 00 	sts	0x0091, r24
    19c6:	90 93 92 00 	sts	0x0092, r25
    19ca:	a0 93 93 00 	sts	0x0093, r26
    19ce:	b0 93 94 00 	sts	0x0094, r27
     if(data == '\r')  //'Carriege Return (CR)' character
    19d2:	ad e0       	ldi	r26, 0x0D	; 13
    19d4:	fa 16       	cp	r15, r26
    19d6:	21 f5       	brne	.+72     	; 0x1a20 <writeFile+0x39a>
     {
        if(i == 512)
    19d8:	b2 e0       	ldi	r27, 0x02	; 2
    19da:	00 30       	cpi	r16, 0x00	; 0
    19dc:	1b 07       	cpc	r17, r27
    19de:	19 f4       	brne	.+6      	; 0x19e6 <writeFile+0x360>
    19e0:	e1 e0       	ldi	r30, 0x01	; 1
    19e2:	eb 83       	std	Y+3, r30	; 0x03
    19e4:	24 c0       	rjmp	.+72     	; 0x1a2e <writeFile+0x3a8>
		   sectorEndFlag = 1;  //flag to indicate that the appended '\n' char should be put in the next sector
	    else
		{ 
		   transmitByte ('\n');
    19e6:	8a e0       	ldi	r24, 0x0A	; 10
    19e8:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
           buffer[i++] = '\n'; //appending 'Line Feed (LF)' character
    19ec:	f8 01       	movw	r30, r16
    19ee:	eb 55       	subi	r30, 0x5B	; 91
    19f0:	ff 4f       	sbci	r31, 0xFF	; 255
    19f2:	8a e0       	ldi	r24, 0x0A	; 10
    19f4:	80 83       	st	Z, r24
    19f6:	0f 5f       	subi	r16, 0xFF	; 255
    19f8:	1f 4f       	sbci	r17, 0xFF	; 255
		   fileSize++;
    19fa:	80 91 91 00 	lds	r24, 0x0091
    19fe:	90 91 92 00 	lds	r25, 0x0092
    1a02:	a0 91 93 00 	lds	r26, 0x0093
    1a06:	b0 91 94 00 	lds	r27, 0x0094
    1a0a:	01 96       	adiw	r24, 0x01	; 1
    1a0c:	a1 1d       	adc	r26, r1
    1a0e:	b1 1d       	adc	r27, r1
    1a10:	80 93 91 00 	sts	0x0091, r24
    1a14:	90 93 92 00 	sts	0x0092, r25
    1a18:	a0 93 93 00 	sts	0x0093, r26
    1a1c:	b0 93 94 00 	sts	0x0094, r27
	    }
     }
	 
     if(i >= 512)   //though 'i' will never become greater than 512, it's kept here to avoid 
    1a20:	f2 e0       	ldi	r31, 0x02	; 2
    1a22:	00 30       	cpi	r16, 0x00	; 0
    1a24:	1f 07       	cpc	r17, r31
    1a26:	10 f4       	brcc	.+4      	; 0x1a2c <writeFile+0x3a6>
    1a28:	1b 82       	std	Y+3, r1	; 0x03
    1a2a:	2a c0       	rjmp	.+84     	; 0x1a80 <writeFile+0x3fa>
    1a2c:	1b 82       	std	Y+3, r1	; 0x03
	 {				//infinite loop in case it happens to be greater than 512 due to some data corruption
	   i=0;
	   error = SD_writeSingleBlock (startBlock);
    1a2e:	60 91 a1 00 	lds	r22, 0x00A1
    1a32:	70 91 a2 00 	lds	r23, 0x00A2
    1a36:	80 91 a3 00 	lds	r24, 0x00A3
    1a3a:	90 91 a4 00 	lds	r25, 0x00A4
    1a3e:	0e 94 17 13 	call	0x262e	; 0x262e <SD_writeSingleBlock>
       j++;
    1a42:	e3 94       	inc	r14
	   if(j == sectorPerCluster) {j = 0; break;}
    1a44:	20 91 a5 02 	lds	r18, 0x02A5
    1a48:	30 91 a6 02 	lds	r19, 0x02A6
    1a4c:	8e 2d       	mov	r24, r14
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	82 17       	cp	r24, r18
    1a52:	93 07       	cpc	r25, r19
    1a54:	d1 f0       	breq	.+52     	; 0x1a8a <writeFile+0x404>
	   startBlock++; 
    1a56:	80 91 a1 00 	lds	r24, 0x00A1
    1a5a:	90 91 a2 00 	lds	r25, 0x00A2
    1a5e:	a0 91 a3 00 	lds	r26, 0x00A3
    1a62:	b0 91 a4 00 	lds	r27, 0x00A4
    1a66:	01 96       	adiw	r24, 0x01	; 1
    1a68:	a1 1d       	adc	r26, r1
    1a6a:	b1 1d       	adc	r27, r1
    1a6c:	80 93 a1 00 	sts	0x00A1, r24
    1a70:	90 93 a2 00 	sts	0x00A2, r25
    1a74:	a0 93 a3 00 	sts	0x00A3, r26
    1a78:	b0 93 a4 00 	sts	0x00A4, r27
    1a7c:	00 e0       	ldi	r16, 0x00	; 0
    1a7e:	10 e0       	ldi	r17, 0x00	; 0
     }
	}while (data != '~');
    1a80:	2e e7       	ldi	r18, 0x7E	; 126
    1a82:	f2 16       	cp	r15, r18
    1a84:	09 f0       	breq	.+2      	; 0x1a88 <writeFile+0x402>
    1a86:	4a cf       	rjmp	.-364    	; 0x191c <writeFile+0x296>
    1a88:	05 c0       	rjmp	.+10     	; 0x1a94 <writeFile+0x40e>

   if(data == '~') 
    1a8a:	8e e7       	ldi	r24, 0x7E	; 126
    1a8c:	f8 16       	cp	r15, r24
    1a8e:	c1 f5       	brne	.+112    	; 0x1b00 <writeFile+0x47a>
    1a90:	00 e0       	ldi	r16, 0x00	; 0
    1a92:	10 e0       	ldi	r17, 0x00	; 0
   {
      fileSize--;	//to remove the last entered '~' character
    1a94:	80 91 91 00 	lds	r24, 0x0091
    1a98:	90 91 92 00 	lds	r25, 0x0092
    1a9c:	a0 91 93 00 	lds	r26, 0x0093
    1aa0:	b0 91 94 00 	lds	r27, 0x0094
    1aa4:	01 97       	sbiw	r24, 0x01	; 1
    1aa6:	a1 09       	sbc	r26, r1
    1aa8:	b1 09       	sbc	r27, r1
    1aaa:	80 93 91 00 	sts	0x0091, r24
    1aae:	90 93 92 00 	sts	0x0092, r25
    1ab2:	a0 93 93 00 	sts	0x0093, r26
    1ab6:	b0 93 94 00 	sts	0x0094, r27
	  i--;
    1aba:	b8 01       	movw	r22, r16
    1abc:	61 50       	subi	r22, 0x01	; 1
    1abe:	70 40       	sbci	r23, 0x00	; 0
    1ac0:	06 c0       	rjmp	.+12     	; 0x1ace <writeFile+0x448>
	  for(;i<512;i++)  //fill the rest of the buffer with 0x00
        buffer[i]= 0x00;
    1ac2:	fb 01       	movw	r30, r22
    1ac4:	eb 55       	subi	r30, 0x5B	; 91
    1ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac8:	10 82       	st	Z, r1

   if(data == '~') 
   {
      fileSize--;	//to remove the last entered '~' character
	  i--;
	  for(;i<512;i++)  //fill the rest of the buffer with 0x00
    1aca:	6f 5f       	subi	r22, 0xFF	; 255
    1acc:	7f 4f       	sbci	r23, 0xFF	; 255
    1ace:	92 e0       	ldi	r25, 0x02	; 2
    1ad0:	60 30       	cpi	r22, 0x00	; 0
    1ad2:	79 07       	cpc	r23, r25
    1ad4:	b0 f3       	brcs	.-20     	; 0x1ac2 <writeFile+0x43c>
        buffer[i]= 0x00;
   	  error = SD_writeSingleBlock (startBlock);
    1ad6:	60 91 a1 00 	lds	r22, 0x00A1
    1ada:	70 91 a2 00 	lds	r23, 0x00A2
    1ade:	80 91 a3 00 	lds	r24, 0x00A3
    1ae2:	90 91 a4 00 	lds	r25, 0x00A4
    1ae6:	0e 94 17 13 	call	0x262e	; 0x262e <SD_writeSingleBlock>

   getSetNextCluster(prevCluster, SET, cluster);
   getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
}        

getSetFreeCluster (NEXT_FREE, SET, cluster); //update FSinfo next free cluster entry
    1aea:	82 e0       	ldi	r24, 0x02	; 2
    1aec:	61 e0       	ldi	r22, 0x01	; 1
    1aee:	a4 01       	movw	r20, r8
    1af0:	93 01       	movw	r18, r6
    1af2:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <getSetFreeCluster>

error = getDateTime_FAT();    //get current date & time from the RTC
    1af6:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <getDateTime_FAT>
if(error) { dateFAT = 0; timeFAT = 0;}
    1afa:	88 23       	and	r24, r24
    1afc:	49 f5       	brne	.+82     	; 0x1b50 <writeFile+0x4ca>
    1afe:	30 c0       	rjmp	.+96     	; 0x1b60 <writeFile+0x4da>
      break;
   } 
	  
   prevCluster = cluster;

   cluster = searchNextFreeCluster(prevCluster); //look for a free cluster starting from the current cluster
    1b00:	c4 01       	movw	r24, r8
    1b02:	b3 01       	movw	r22, r6
    1b04:	0e 94 72 04 	call	0x8e4	; 0x8e4 <searchNextFreeCluster>
    1b08:	6b 01       	movw	r12, r22
    1b0a:	7c 01       	movw	r14, r24

   if(cluster == 0)
    1b0c:	61 15       	cp	r22, r1
    1b0e:	71 05       	cpc	r23, r1
    1b10:	81 05       	cpc	r24, r1
    1b12:	91 05       	cpc	r25, r1
    1b14:	49 f4       	brne	.+18     	; 0x1b28 <writeFile+0x4a2>
   {
      TX_NEWLINE;
    1b16:	8d e0       	ldi	r24, 0x0D	; 13
    1b18:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    1b1c:	8a e0       	ldi	r24, 0x0A	; 10
    1b1e:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
      transmitString_F(PSTR(" No free cluster!"));
    1b22:	80 ec       	ldi	r24, 0xC0	; 192
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	6f c1       	rjmp	.+734    	; 0x1e06 <writeFile+0x780>
	  return;
   }

   getSetNextCluster(prevCluster, SET, cluster);
    1b28:	c4 01       	movw	r24, r8
    1b2a:	b3 01       	movw	r22, r6
    1b2c:	41 e0       	ldi	r20, 0x01	; 1
    1b2e:	97 01       	movw	r18, r14
    1b30:	86 01       	movw	r16, r12
    1b32:	0e 94 fa 07 	call	0xff4	; 0xff4 <getSetNextCluster>
   getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
    1b36:	c7 01       	movw	r24, r14
    1b38:	b6 01       	movw	r22, r12
    1b3a:	41 e0       	ldi	r20, 0x01	; 1
    1b3c:	0f ef       	ldi	r16, 0xFF	; 255
    1b3e:	1f ef       	ldi	r17, 0xFF	; 255
    1b40:	2f ef       	ldi	r18, 0xFF	; 255
    1b42:	3f e0       	ldi	r19, 0x0F	; 15
    1b44:	0e 94 fa 07 	call	0xff4	; 0xff4 <getSetNextCluster>
    1b48:	20 e0       	ldi	r18, 0x00	; 0
    1b4a:	36 01       	movw	r6, r12
    1b4c:	47 01       	movw	r8, r14
    1b4e:	78 ce       	rjmp	.-784    	; 0x1840 <writeFile+0x1ba>
}        

getSetFreeCluster (NEXT_FREE, SET, cluster); //update FSinfo next free cluster entry

error = getDateTime_FAT();    //get current date & time from the RTC
if(error) { dateFAT = 0; timeFAT = 0;}
    1b50:	10 92 8c 00 	sts	0x008C, r1
    1b54:	10 92 8b 00 	sts	0x008B, r1
    1b58:	10 92 a0 00 	sts	0x00A0, r1
    1b5c:	10 92 9f 00 	sts	0x009F, r1

if(appendFile)  //executes this loop if file is to be appended
    1b60:	aa 20       	and	r10, r10
    1b62:	09 f4       	brne	.+2      	; 0x1b66 <writeFile+0x4e0>
    1b64:	54 c0       	rjmp	.+168    	; 0x1c0e <writeFile+0x588>
{
  SD_readSingleBlock (appendFileSector);    
    1b66:	60 91 b8 02 	lds	r22, 0x02B8
    1b6a:	70 91 b9 02 	lds	r23, 0x02B9
    1b6e:	80 91 ba 02 	lds	r24, 0x02BA
    1b72:	90 91 bb 02 	lds	r25, 0x02BB
    1b76:	0e 94 65 13 	call	0x26ca	; 0x26ca <SD_readSingleBlock>
  dir = (struct dir_Structure *) &buffer[appendFileLocation]; 
    1b7a:	e0 91 87 00 	lds	r30, 0x0087
    1b7e:	f0 91 88 00 	lds	r31, 0x0088
    1b82:	eb 55       	subi	r30, 0x5B	; 91
    1b84:	ff 4f       	sbci	r31, 0xFF	; 255

  dir->lastAccessDate = 0;   //date of last access ignored
    1b86:	13 8a       	std	Z+19, r1	; 0x13
    1b88:	12 8a       	std	Z+18, r1	; 0x12
  dir->writeTime = timeFAT;  //setting new time of last write, obtained from RTC
    1b8a:	80 91 9f 00 	lds	r24, 0x009F
    1b8e:	90 91 a0 00 	lds	r25, 0x00A0
    1b92:	97 8b       	std	Z+23, r25	; 0x17
    1b94:	86 8b       	std	Z+22, r24	; 0x16
  dir->writeDate = dateFAT;  //setting new date of last write, obtained from RTC
    1b96:	80 91 8b 00 	lds	r24, 0x008B
    1b9a:	90 91 8c 00 	lds	r25, 0x008C
    1b9e:	91 8f       	std	Z+25, r25	; 0x19
    1ba0:	80 8f       	std	Z+24, r24	; 0x18
  extraMemory = fileSize - dir->fileSize;
    1ba2:	20 91 91 00 	lds	r18, 0x0091
    1ba6:	30 91 92 00 	lds	r19, 0x0092
    1baa:	40 91 93 00 	lds	r20, 0x0093
    1bae:	50 91 94 00 	lds	r21, 0x0094
    1bb2:	84 8d       	ldd	r24, Z+28	; 0x1c
    1bb4:	95 8d       	ldd	r25, Z+29	; 0x1d
    1bb6:	a6 8d       	ldd	r26, Z+30	; 0x1e
    1bb8:	b7 8d       	ldd	r27, Z+31	; 0x1f
    1bba:	79 01       	movw	r14, r18
    1bbc:	8a 01       	movw	r16, r20
    1bbe:	e8 1a       	sub	r14, r24
    1bc0:	f9 0a       	sbc	r15, r25
    1bc2:	0a 0b       	sbc	r16, r26
    1bc4:	1b 0b       	sbc	r17, r27
  dir->fileSize = fileSize;
    1bc6:	24 8f       	std	Z+28, r18	; 0x1c
    1bc8:	35 8f       	std	Z+29, r19	; 0x1d
    1bca:	46 8f       	std	Z+30, r20	; 0x1e
    1bcc:	57 8f       	std	Z+31, r21	; 0x1f
  SD_writeSingleBlock (appendFileSector);
    1bce:	60 91 b8 02 	lds	r22, 0x02B8
    1bd2:	70 91 b9 02 	lds	r23, 0x02B9
    1bd6:	80 91 ba 02 	lds	r24, 0x02BA
    1bda:	90 91 bb 02 	lds	r25, 0x02BB
    1bde:	0e 94 17 13 	call	0x262e	; 0x262e <SD_writeSingleBlock>
  freeMemoryUpdate (REMOVE, extraMemory); //updating free memory count in FSinfo sector;
    1be2:	81 e0       	ldi	r24, 0x01	; 1
    1be4:	b8 01       	movw	r22, r16
    1be6:	a7 01       	movw	r20, r14
    1be8:	0e 94 83 05 	call	0xb06	; 0xb06 <freeMemoryUpdate>

  
  TX_NEWLINE;
    1bec:	8d e0       	ldi	r24, 0x0D	; 13
    1bee:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    1bf2:	8a e0       	ldi	r24, 0x0A	; 10
    1bf4:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
  transmitString_F(PSTR(" File appended!"));
    1bf8:	80 eb       	ldi	r24, 0xB0	; 176
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	0e 94 3e 14 	call	0x287c	; 0x287c <transmitString_F>
  TX_NEWLINE;
    1c00:	8d e0       	ldi	r24, 0x0D	; 13
    1c02:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    1c06:	8a e0       	ldi	r24, 0x0A	; 10
    1c08:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    1c0c:	fe c0       	rjmp	.+508    	; 0x1e0a <writeFile+0x784>
  return;
}

//executes following portion when new file is created

prevCluster = rootCluster; //root cluster
    1c0e:	80 90 9b 00 	lds	r8, 0x009B
    1c12:	90 90 9c 00 	lds	r9, 0x009C
    1c16:	a0 90 9d 00 	lds	r10, 0x009D
    1c1a:	b0 90 9e 00 	lds	r11, 0x009E
    1c1e:	22 24       	eor	r2, r2
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    1c20:	20 91 a5 02 	lds	r18, 0x02A5
    1c24:	30 91 a6 02 	lds	r19, 0x02A6
    1c28:	e0 90 8d 00 	lds	r14, 0x008D
    1c2c:	f0 90 8e 00 	lds	r15, 0x008E
    1c30:	00 91 8f 00 	lds	r16, 0x008F
    1c34:	10 91 90 00 	lds	r17, 0x0090
    1c38:	c5 01       	movw	r24, r10
    1c3a:	b4 01       	movw	r22, r8
    1c3c:	62 50       	subi	r22, 0x02	; 2
    1c3e:	70 40       	sbci	r23, 0x00	; 0
    1c40:	80 40       	sbci	r24, 0x00	; 0
    1c42:	90 40       	sbci	r25, 0x00	; 0
    1c44:	40 e0       	ldi	r20, 0x00	; 0
    1c46:	50 e0       	ldi	r21, 0x00	; 0
    1c48:	0e 94 b8 18 	call	0x3170	; 0x3170 <__mulsi3>
    1c4c:	2b 01       	movw	r4, r22
    1c4e:	3c 01       	movw	r6, r24
    1c50:	4e 0c       	add	r4, r14
    1c52:	5f 1c       	adc	r5, r15
    1c54:	60 1e       	adc	r6, r16
    1c56:	71 1e       	adc	r7, r17
    1c58:	33 24       	eor	r3, r3
    1c5a:	8c c0       	rjmp	.+280    	; 0x1d74 <writeFile+0x6ee>
{
   firstSector = getFirstSector (prevCluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_readSingleBlock (firstSector + sector);
    1c5c:	73 01       	movw	r14, r6
    1c5e:	62 01       	movw	r12, r4
    1c60:	c3 0c       	add	r12, r3
    1c62:	d1 1c       	adc	r13, r1
    1c64:	e1 1c       	adc	r14, r1
    1c66:	f1 1c       	adc	r15, r1
    1c68:	c7 01       	movw	r24, r14
    1c6a:	b6 01       	movw	r22, r12
    1c6c:	0e 94 65 13 	call	0x26ca	; 0x26ca <SD_readSingleBlock>
    1c70:	00 e2       	ldi	r16, 0x20	; 32
    1c72:	10 e0       	ldi	r17, 0x00	; 0
    1c74:	74 c0       	rjmp	.+232    	; 0x1d5e <writeFile+0x6d8>

     for(i=0; i<bytesPerSector; i+=32)
     {
	    dir = (struct dir_Structure *) &buffer[i];

		if(fileCreatedFlag)   //to mark last directory entry with 0x00 (empty) mark
    1c76:	22 20       	and	r2, r2
    1c78:	09 f0       	breq	.+2      	; 0x1c7c <writeFile+0x5f6>
    1c7a:	c7 c0       	rjmp	.+398    	; 0x1e0a <writeFile+0x784>
		 { 					  //indicating end of the directory file list
		   //dir->name[0] = EMPTY;
		   //SD_writeSingleBlock (firstSector + sector);
           return;
    1c7c:	af 01       	movw	r20, r30
    1c7e:	4b 55       	subi	r20, 0x5B	; 91
    1c80:	5f 4f       	sbci	r21, 0xFF	; 255
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
    1c82:	f8 01       	movw	r30, r16
    1c84:	eb 57       	subi	r30, 0x7B	; 123
    1c86:	ff 4f       	sbci	r31, 0xFF	; 255
    1c88:	e0 81       	ld	r30, Z
    1c8a:	ee 23       	and	r30, r30
    1c8c:	19 f0       	breq	.+6      	; 0x1c94 <writeFile+0x60e>
    1c8e:	e5 3e       	cpi	r30, 0xE5	; 229
    1c90:	09 f0       	breq	.+2      	; 0x1c94 <writeFile+0x60e>
    1c92:	63 c0       	rjmp	.+198    	; 0x1d5a <writeFile+0x6d4>
    1c94:	20 e0       	ldi	r18, 0x00	; 0
    1c96:	30 e0       	ldi	r19, 0x00	; 0
		{
		  for(j=0; j<11; j++)
  			dir->name[j] = fileName[j];
    1c98:	ba 01       	movw	r22, r20
    1c9a:	62 0f       	add	r22, r18
    1c9c:	73 1f       	adc	r23, r19
    1c9e:	ac 81       	ldd	r26, Y+4	; 0x04
    1ca0:	bd 81       	ldd	r27, Y+5	; 0x05
    1ca2:	a2 0f       	add	r26, r18
    1ca4:	b3 1f       	adc	r27, r19
    1ca6:	8c 91       	ld	r24, X
    1ca8:	db 01       	movw	r26, r22
    1caa:	8c 93       	st	X, r24
    1cac:	2f 5f       	subi	r18, 0xFF	; 255
    1cae:	3f 4f       	sbci	r19, 0xFF	; 255
           return;
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
		{
		  for(j=0; j<11; j++)
    1cb0:	2b 30       	cpi	r18, 0x0B	; 11
    1cb2:	31 05       	cpc	r19, r1
    1cb4:	89 f7       	brne	.-30     	; 0x1c98 <writeFile+0x612>
  			dir->name[j] = fileName[j];
		  dir->attrib = ATTR_ARCHIVE;	//settting file attribute as 'archive'
    1cb6:	f8 01       	movw	r30, r16
    1cb8:	eb 55       	subi	r30, 0x5B	; 91
    1cba:	ff 4f       	sbci	r31, 0xFF	; 255
    1cbc:	75 97       	sbiw	r30, 0x15	; 21
    1cbe:	b0 e2       	ldi	r27, 0x20	; 32
    1cc0:	b1 93       	st	Z+, r27
		  dir->NTreserved = 0;			//always set to 0
    1cc2:	11 92       	st	Z+, r1
		  dir->timeTenth = 0;			//always set to 0
    1cc4:	11 92       	st	Z+, r1
		  dir->createTime = timeFAT; 	//setting time of file creation, obtained from RTC
    1cc6:	20 91 9f 00 	lds	r18, 0x009F
    1cca:	30 91 a0 00 	lds	r19, 0x00A0
    1cce:	21 93       	st	Z+, r18
    1cd0:	31 93       	st	Z+, r19
		  dir->createDate = dateFAT; 	//setting date of file creation, obtained from RTC
    1cd2:	80 91 8b 00 	lds	r24, 0x008B
    1cd6:	90 91 8c 00 	lds	r25, 0x008C
    1cda:	81 93       	st	Z+, r24
    1cdc:	91 93       	st	Z+, r25
		  dir->lastAccessDate = 0;   	//date of last access ignored
    1cde:	11 82       	std	Z+1, r1	; 0x01
    1ce0:	10 82       	st	Z, r1
		  dir->writeTime = timeFAT;  	//setting new time of last write, obtained from RTC
    1ce2:	34 96       	adiw	r30, 0x04	; 4
    1ce4:	21 93       	st	Z+, r18
    1ce6:	31 93       	st	Z+, r19
		  dir->writeDate = dateFAT;  	//setting new date of last write, obtained from RTC
    1ce8:	91 83       	std	Z+1, r25	; 0x01
    1cea:	80 83       	st	Z, r24
		  dir->firstClusterHI = firstClusterHigh;
    1cec:	34 97       	sbiw	r30, 0x04	; 4
    1cee:	89 81       	ldd	r24, Y+1	; 0x01
    1cf0:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf2:	91 83       	std	Z+1, r25	; 0x01
    1cf4:	80 83       	st	Z, r24
		  dir->firstClusterLO = firstClusterLow;
    1cf6:	36 96       	adiw	r30, 0x06	; 6
    1cf8:	ae 81       	ldd	r26, Y+6	; 0x06
    1cfa:	bf 81       	ldd	r27, Y+7	; 0x07
    1cfc:	a1 93       	st	Z+, r26
    1cfe:	b1 93       	st	Z+, r27
		  dir->fileSize = fileSize;
    1d00:	80 91 91 00 	lds	r24, 0x0091
    1d04:	90 91 92 00 	lds	r25, 0x0092
    1d08:	a0 91 93 00 	lds	r26, 0x0093
    1d0c:	b0 91 94 00 	lds	r27, 0x0094
    1d10:	80 83       	st	Z, r24
    1d12:	91 83       	std	Z+1, r25	; 0x01
    1d14:	a2 83       	std	Z+2, r26	; 0x02
    1d16:	b3 83       	std	Z+3, r27	; 0x03

		  SD_writeSingleBlock (firstSector + sector);
    1d18:	c7 01       	movw	r24, r14
    1d1a:	b6 01       	movw	r22, r12
    1d1c:	0e 94 17 13 	call	0x262e	; 0x262e <SD_writeSingleBlock>
		  fileCreatedFlag = 1;

		  TX_NEWLINE;
    1d20:	8d e0       	ldi	r24, 0x0D	; 13
    1d22:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    1d26:	8a e0       	ldi	r24, 0x0A	; 10
    1d28:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
		  TX_NEWLINE;
    1d2c:	8d e0       	ldi	r24, 0x0D	; 13
    1d2e:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    1d32:	8a e0       	ldi	r24, 0x0A	; 10
    1d34:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
		  transmitString_F(PSTR(" File Created! "));
    1d38:	80 ea       	ldi	r24, 0xA0	; 160
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	0e 94 3e 14 	call	0x287c	; 0x287c <transmitString_F>

		  freeMemoryUpdate (REMOVE, fileSize); //updating free memory count in FSinfo sector
    1d40:	40 91 91 00 	lds	r20, 0x0091
    1d44:	50 91 92 00 	lds	r21, 0x0092
    1d48:	60 91 93 00 	lds	r22, 0x0093
    1d4c:	70 91 94 00 	lds	r23, 0x0094
    1d50:	81 e0       	ldi	r24, 0x01	; 1
    1d52:	0e 94 83 05 	call	0xb06	; 0xb06 <freeMemoryUpdate>
    1d56:	22 24       	eor	r2, r2
    1d58:	23 94       	inc	r2
    1d5a:	00 5e       	subi	r16, 0xE0	; 224
    1d5c:	1f 4f       	sbci	r17, 0xFF	; 255
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
    1d5e:	80 91 95 00 	lds	r24, 0x0095
    1d62:	90 91 96 00 	lds	r25, 0x0096
    1d66:	f8 01       	movw	r30, r16
    1d68:	b0 97       	sbiw	r30, 0x20	; 32
    1d6a:	e8 17       	cp	r30, r24
    1d6c:	f9 07       	cpc	r31, r25
    1d6e:	08 f4       	brcc	.+2      	; 0x1d72 <writeFile+0x6ec>
    1d70:	82 cf       	rjmp	.-252    	; 0x1c76 <writeFile+0x5f0>

while(1)
{
   firstSector = getFirstSector (prevCluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
    1d72:	33 94       	inc	r3
    1d74:	20 91 a5 02 	lds	r18, 0x02A5
    1d78:	30 91 a6 02 	lds	r19, 0x02A6
    1d7c:	83 2d       	mov	r24, r3
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	82 17       	cp	r24, r18
    1d82:	93 07       	cpc	r25, r19
    1d84:	08 f4       	brcc	.+2      	; 0x1d88 <writeFile+0x702>
    1d86:	6a cf       	rjmp	.-300    	; 0x1c5c <writeFile+0x5d6>
	     
        }
     }
   }

   cluster = getSetNextCluster (prevCluster, GET, 0);
    1d88:	c5 01       	movw	r24, r10
    1d8a:	b4 01       	movw	r22, r8
    1d8c:	40 e0       	ldi	r20, 0x00	; 0
    1d8e:	00 e0       	ldi	r16, 0x00	; 0
    1d90:	10 e0       	ldi	r17, 0x00	; 0
    1d92:	20 e0       	ldi	r18, 0x00	; 0
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	0e 94 fa 07 	call	0xff4	; 0xff4 <getSetNextCluster>
    1d9a:	6b 01       	movw	r12, r22
    1d9c:	7c 01       	movw	r14, r24

   if(cluster > 0x0ffffff6)
    1d9e:	67 3f       	cpi	r22, 0xF7	; 247
    1da0:	bf ef       	ldi	r27, 0xFF	; 255
    1da2:	7b 07       	cpc	r23, r27
    1da4:	bf ef       	ldi	r27, 0xFF	; 255
    1da6:	8b 07       	cpc	r24, r27
    1da8:	bf e0       	ldi	r27, 0x0F	; 15
    1daa:	9b 07       	cpc	r25, r27
    1dac:	10 f1       	brcs	.+68     	; 0x1df2 <writeFile+0x76c>
   {
      if(cluster == EOF)   //this situation will come when total files in root is multiple of (32*sectorPerCluster)
    1dae:	6f 3f       	cpi	r22, 0xFF	; 255
    1db0:	ef ef       	ldi	r30, 0xFF	; 255
    1db2:	7e 07       	cpc	r23, r30
    1db4:	ef ef       	ldi	r30, 0xFF	; 255
    1db6:	8e 07       	cpc	r24, r30
    1db8:	ef e0       	ldi	r30, 0x0F	; 15
    1dba:	9e 07       	cpc	r25, r30
    1dbc:	b9 f4       	brne	.+46     	; 0x1dec <writeFile+0x766>
	  {  
		cluster = searchNextFreeCluster(prevCluster); //find next cluster for root directory entries
    1dbe:	c5 01       	movw	r24, r10
    1dc0:	b4 01       	movw	r22, r8
    1dc2:	0e 94 72 04 	call	0x8e4	; 0x8e4 <searchNextFreeCluster>
    1dc6:	6b 01       	movw	r12, r22
    1dc8:	7c 01       	movw	r14, r24
		getSetNextCluster(prevCluster, SET, cluster); //link the new cluster of root to the previous cluster
    1dca:	c5 01       	movw	r24, r10
    1dcc:	b4 01       	movw	r22, r8
    1dce:	41 e0       	ldi	r20, 0x01	; 1
    1dd0:	97 01       	movw	r18, r14
    1dd2:	86 01       	movw	r16, r12
    1dd4:	0e 94 fa 07 	call	0xff4	; 0xff4 <getSetNextCluster>
		getSetNextCluster(cluster, SET, EOF);  //set the new cluster as end of the root directory
    1dd8:	c7 01       	movw	r24, r14
    1dda:	b6 01       	movw	r22, r12
    1ddc:	41 e0       	ldi	r20, 0x01	; 1
    1dde:	0f ef       	ldi	r16, 0xFF	; 255
    1de0:	1f ef       	ldi	r17, 0xFF	; 255
    1de2:	2f ef       	ldi	r18, 0xFF	; 255
    1de4:	3f e0       	ldi	r19, 0x0F	; 15
    1de6:	0e 94 fa 07 	call	0xff4	; 0xff4 <getSetNextCluster>
    1dea:	03 c0       	rjmp	.+6      	; 0x1df2 <writeFile+0x76c>
      } 

      else
      {	
	    transmitString_F(PSTR("End of Cluster Chain")); 
    1dec:	8b e8       	ldi	r24, 0x8B	; 139
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	0a c0       	rjmp	.+20     	; 0x1e06 <writeFile+0x780>
	    return;
    1df2:	46 01       	movw	r8, r12
    1df4:	57 01       	movw	r10, r14
      }
   }
   if(cluster == 0) {transmitString_F(PSTR("Error in getting cluster")); return;}
    1df6:	c1 14       	cp	r12, r1
    1df8:	d1 04       	cpc	r13, r1
    1dfa:	e1 04       	cpc	r14, r1
    1dfc:	f1 04       	cpc	r15, r1
    1dfe:	09 f0       	breq	.+2      	; 0x1e02 <writeFile+0x77c>
    1e00:	0f cf       	rjmp	.-482    	; 0x1c20 <writeFile+0x59a>
    1e02:	82 e7       	ldi	r24, 0x72	; 114
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	0e 94 3e 14 	call	0x287c	; 0x287c <transmitString_F>
   
   prevCluster = cluster;
 }
 
 return;
}
    1e0a:	27 96       	adiw	r28, 0x07	; 7
    1e0c:	0f b6       	in	r0, 0x3f	; 63
    1e0e:	f8 94       	cli
    1e10:	de bf       	out	0x3e, r29	; 62
    1e12:	0f be       	out	0x3f, r0	; 63
    1e14:	cd bf       	out	0x3d, r28	; 61
    1e16:	cf 91       	pop	r28
    1e18:	df 91       	pop	r29
    1e1a:	1f 91       	pop	r17
    1e1c:	0f 91       	pop	r16
    1e1e:	ff 90       	pop	r15
    1e20:	ef 90       	pop	r14
    1e22:	df 90       	pop	r13
    1e24:	cf 90       	pop	r12
    1e26:	bf 90       	pop	r11
    1e28:	af 90       	pop	r10
    1e2a:	9f 90       	pop	r9
    1e2c:	8f 90       	pop	r8
    1e2e:	7f 90       	pop	r7
    1e30:	6f 90       	pop	r6
    1e32:	5f 90       	pop	r5
    1e34:	4f 90       	pop	r4
    1e36:	3f 90       	pop	r3
    1e38:	2f 90       	pop	r2
    1e3a:	08 95       	ret

00001e3c <port_init>:
#include "FAT32.h"


void port_init(void)
{
PORTA = 0x00;
    1e3c:	1b ba       	out	0x1b, r1	; 27
DDRA  = 0x00;
    1e3e:	1a ba       	out	0x1a, r1	; 26
PORTB = 0xEF;
    1e40:	8f ee       	ldi	r24, 0xEF	; 239
    1e42:	88 bb       	out	0x18, r24	; 24
DDRB  = 0xBF; //MISO line i/p, rest o/p
    1e44:	8f eb       	ldi	r24, 0xBF	; 191
    1e46:	87 bb       	out	0x17, r24	; 23
PORTC = 0x00;
    1e48:	15 ba       	out	0x15, r1	; 21
DDRC  = 0x00;
    1e4a:	14 ba       	out	0x14, r1	; 20
PORTD = 0x00;
    1e4c:	12 ba       	out	0x12, r1	; 18
DDRD  = 0xFE;
    1e4e:	8e ef       	ldi	r24, 0xFE	; 254
    1e50:	81 bb       	out	0x11, r24	; 17
}
    1e52:	08 95       	ret

00001e54 <init_devices>:


//call this routine to initialize all peripherals
void init_devices(void)
{
 cli();  //all interrupts disabled
    1e54:	f8 94       	cli
 port_init();
    1e56:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <port_init>
 spi_init();
    1e5a:	0e 94 1c 14 	call	0x2838	; 0x2838 <spi_init>
 twi_init();
    1e5e:	0e 94 57 18 	call	0x30ae	; 0x30ae <twi_init>
 uart0_init();
    1e62:	0e 94 2b 14 	call	0x2856	; 0x2856 <uart0_init>

 MCUCR = 0x00;
    1e66:	15 be       	out	0x35, r1	; 53
 GICR  = 0x00;
    1e68:	1b be       	out	0x3b, r1	; 59
 TIMSK = 0x00; //timer interrupt sources
    1e6a:	19 be       	out	0x39, r1	; 57
 //all peripherals are now initialized
}
    1e6c:	08 95       	ret

00001e6e <main>:

//*************************** MAIN *******************************//
int main(void)
{
    1e6e:	6f 92       	push	r6
    1e70:	7f 92       	push	r7
    1e72:	8f 92       	push	r8
    1e74:	9f 92       	push	r9
    1e76:	af 92       	push	r10
    1e78:	bf 92       	push	r11
    1e7a:	cf 92       	push	r12
    1e7c:	df 92       	push	r13
    1e7e:	ef 92       	push	r14
    1e80:	ff 92       	push	r15
    1e82:	0f 93       	push	r16
    1e84:	1f 93       	push	r17
    1e86:	df 93       	push	r29
    1e88:	cf 93       	push	r28
    1e8a:	cd b7       	in	r28, 0x3d	; 61
    1e8c:	de b7       	in	r29, 0x3e	; 62
    1e8e:	2e 97       	sbiw	r28, 0x0e	; 14
    1e90:	0f b6       	in	r0, 0x3f	; 63
    1e92:	f8 94       	cli
    1e94:	de bf       	out	0x3e, r29	; 62
    1e96:	0f be       	out	0x3f, r0	; 63
    1e98:	cd bf       	out	0x3d, r28	; 61
    1e9a:	88 ee       	ldi	r24, 0xE8	; 232
    1e9c:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e9e:	28 ec       	ldi	r18, 0xC8	; 200
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	f9 01       	movw	r30, r18
    1ea4:	31 97       	sbiw	r30, 0x01	; 1
    1ea6:	f1 f7       	brne	.-4      	; 0x1ea4 <main+0x36>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ea8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eaa:	d9 f7       	brne	.-10     	; 0x1ea2 <main+0x34>
unsigned int i;
unsigned char fileName[13];

_delay_ms(100);  //delay for VCC stabilization

init_devices();
    1eac:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <init_devices>

PORTD |= 0x04; //switching ON the LED (for testing purpose only)
    1eb0:	92 9a       	sbi	0x12, 2	; 18

TX_NEWLINE;
    1eb2:	8d e0       	ldi	r24, 0x0D	; 13
    1eb4:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    1eb8:	8a e0       	ldi	r24, 0x0A	; 10
    1eba:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
TX_NEWLINE;
    1ebe:	8d e0       	ldi	r24, 0x0D	; 13
    1ec0:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    1ec4:	8a e0       	ldi	r24, 0x0A	; 10
    1ec6:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
transmitString_F (PSTR("****************************************************"));
    1eca:	8f e0       	ldi	r24, 0x0F	; 15
    1ecc:	95 e0       	ldi	r25, 0x05	; 5
    1ece:	0e 94 3e 14 	call	0x287c	; 0x287c <transmitString_F>
TX_NEWLINE;
    1ed2:	8d e0       	ldi	r24, 0x0D	; 13
    1ed4:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    1ed8:	8a e0       	ldi	r24, 0x0A	; 10
    1eda:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
transmitString_F (PSTR("    Dharmani's microSD Card Testing..  "));
    1ede:	87 ee       	ldi	r24, 0xE7	; 231
    1ee0:	94 e0       	ldi	r25, 0x04	; 4
    1ee2:	0e 94 3e 14 	call	0x287c	; 0x287c <transmitString_F>
TX_NEWLINE;
    1ee6:	8d e0       	ldi	r24, 0x0D	; 13
    1ee8:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    1eec:	8a e0       	ldi	r24, 0x0A	; 10
    1eee:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
transmitString_F (PSTR("****************************************************"));
    1ef2:	82 eb       	ldi	r24, 0xB2	; 178
    1ef4:	94 e0       	ldi	r25, 0x04	; 4
    1ef6:	0e 94 3e 14 	call	0x287c	; 0x287c <transmitString_F>
TX_NEWLINE;
    1efa:	8d e0       	ldi	r24, 0x0D	; 13
    1efc:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    1f00:	8a e0       	ldi	r24, 0x0A	; 10
    1f02:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>

cardType = 0;
    1f06:	10 92 b6 02 	sts	0x02B6, r1
    1f0a:	00 e0       	ldi	r16, 0x00	; 0
    1f0c:	10 e0       	ldi	r17, 0x00	; 0

for (i=0; i<10; i++)
{
  error = SD_init();
    1f0e:	0e 94 96 13 	call	0x272c	; 0x272c <SD_init>
  if(!error) break;
    1f12:	88 23       	and	r24, r24
    1f14:	99 f0       	breq	.+38     	; 0x1f3c <main+0xce>
transmitString_F (PSTR("****************************************************"));
TX_NEWLINE;

cardType = 0;

for (i=0; i<10; i++)
    1f16:	0f 5f       	subi	r16, 0xFF	; 255
    1f18:	1f 4f       	sbci	r17, 0xFF	; 255
    1f1a:	0a 30       	cpi	r16, 0x0A	; 10
    1f1c:	11 05       	cpc	r17, r1
    1f1e:	b9 f7       	brne	.-18     	; 0x1f0e <main+0xa0>
  if(!error) break;
}

if(error)
{
  if(error == 1) transmitString_F(PSTR("SD card not detected.."));
    1f20:	81 30       	cpi	r24, 0x01	; 1
    1f22:	29 f4       	brne	.+10     	; 0x1f2e <main+0xc0>
    1f24:	8b e9       	ldi	r24, 0x9B	; 155
    1f26:	94 e0       	ldi	r25, 0x04	; 4
    1f28:	0e 94 3e 14 	call	0x287c	; 0x287c <transmitString_F>
    1f2c:	06 c0       	rjmp	.+12     	; 0x1f3a <main+0xcc>
  if(error == 2) transmitString_F(PSTR("Card Initialization failed.."));
    1f2e:	82 30       	cpi	r24, 0x02	; 2
    1f30:	21 f4       	brne	.+8      	; 0x1f3a <main+0xcc>
    1f32:	8e e7       	ldi	r24, 0x7E	; 126
    1f34:	94 e0       	ldi	r25, 0x04	; 4
    1f36:	0e 94 3e 14 	call	0x287c	; 0x287c <transmitString_F>
    1f3a:	ff cf       	rjmp	.-2      	; 0x1f3a <main+0xcc>

  while(1);  //wait here forever if error in SD init 
}

switch (cardType)
    1f3c:	80 91 b6 02 	lds	r24, 0x02B6
    1f40:	82 30       	cpi	r24, 0x02	; 2
    1f42:	39 f0       	breq	.+14     	; 0x1f52 <main+0xe4>
    1f44:	83 30       	cpi	r24, 0x03	; 3
    1f46:	41 f0       	breq	.+16     	; 0x1f58 <main+0xea>
    1f48:	81 30       	cpi	r24, 0x01	; 1
    1f4a:	49 f4       	brne	.+18     	; 0x1f5e <main+0xf0>
{
  case 1:transmitString_F(PSTR("Standard Capacity Card (Ver 1.x) Detected!"));
    1f4c:	83 e5       	ldi	r24, 0x53	; 83
    1f4e:	94 e0       	ldi	r25, 0x04	; 4
    1f50:	08 c0       	rjmp	.+16     	; 0x1f62 <main+0xf4>
  		 break;
  case 2:transmitString_F(PSTR("High Capacity Card Detected!"));
    1f52:	86 e3       	ldi	r24, 0x36	; 54
    1f54:	94 e0       	ldi	r25, 0x04	; 4
    1f56:	05 c0       	rjmp	.+10     	; 0x1f62 <main+0xf4>
  		 break;
  case 3:transmitString_F(PSTR("Standard Capacity Card (Ver 2.x) Detected!"));
    1f58:	8b e0       	ldi	r24, 0x0B	; 11
    1f5a:	94 e0       	ldi	r25, 0x04	; 4
    1f5c:	02 c0       	rjmp	.+4      	; 0x1f62 <main+0xf4>
  		 break;
  default:transmitString_F(PSTR("Unknown SD Card Detected!"));
    1f5e:	81 ef       	ldi	r24, 0xF1	; 241
    1f60:	93 e0       	ldi	r25, 0x03	; 3
    1f62:	0e 94 3e 14 	call	0x287c	; 0x287c <transmitString_F>
  		 break; 
}


SPI_HIGH_SPEED;	//SCK - 4 MHz
    1f66:	80 e5       	ldi	r24, 0x50	; 80
    1f68:	8d b9       	out	0x0d, r24	; 13
    1f6a:	70 9a       	sbi	0x0e, 0	; 14
    1f6c:	80 ed       	ldi	r24, 0xD0	; 208
    1f6e:	97 e0       	ldi	r25, 0x07	; 7
    1f70:	01 97       	sbiw	r24, 0x01	; 1
    1f72:	f1 f7       	brne	.-4      	; 0x1f70 <main+0x102>
_delay_ms(1);   //some delay


FAT32_active = 1;
error = getBootSectorData (); //read boot sector and keep necessary data in global variables
    1f74:	0e 94 14 07 	call	0xe28	; 0xe28 <getBootSectorData>
if(error) 	
    1f78:	88 23       	and	r24, r24
    1f7a:	19 f4       	brne	.+6      	; 0x1f82 <main+0x114>
    1f7c:	ee 24       	eor	r14, r14
    1f7e:	e3 94       	inc	r14
    1f80:	0b c0       	rjmp	.+22     	; 0x1f98 <main+0x12a>
{
  TX_NEWLINE;
    1f82:	8d e0       	ldi	r24, 0x0D	; 13
    1f84:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    1f88:	8a e0       	ldi	r24, 0x0A	; 10
    1f8a:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
  transmitString_F (PSTR("FAT32 not found!"));  //FAT32 incompatible drive
    1f8e:	80 ee       	ldi	r24, 0xE0	; 224
    1f90:	93 e0       	ldi	r25, 0x03	; 3
    1f92:	0e 94 3e 14 	call	0x287c	; 0x287c <transmitString_F>
    1f96:	ee 24       	eor	r14, r14
data = receiveByte(); transmitByte(data);
startBlock += (data & 0x0f);
TX_NEWLINE;
}

totalBlocks = 1;
    1f98:	f1 e0       	ldi	r31, 0x01	; 1
    1f9a:	8f 2e       	mov	r8, r31
    1f9c:	91 2c       	mov	r9, r1
    1f9e:	a1 2c       	mov	r10, r1
    1fa0:	b1 2c       	mov	r11, r1

case '6': 
case '7': 
case '8': TX_NEWLINE;
		  TX_NEWLINE;
          transmitString_F(PSTR("Enter file name: "));
    1fa2:	6e 01       	movw	r12, r28
    1fa4:	08 94       	sec
    1fa6:	c1 1c       	adc	r12, r1
    1fa8:	d1 1c       	adc	r13, r1
          for(i=0; i<13; i++)
    1faa:	ee e0       	ldi	r30, 0x0E	; 14
    1fac:	6e 2e       	mov	r6, r30
    1fae:	71 2c       	mov	r7, r1
    1fb0:	6c 0e       	add	r6, r28
    1fb2:	7d 1e       	adc	r7, r29
  FAT32_active = 0;
}

while(1)
{
TX_NEWLINE;
    1fb4:	8d e0       	ldi	r24, 0x0D	; 13
    1fb6:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    1fba:	8a e0       	ldi	r24, 0x0A	; 10
    1fbc:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
transmitString_F(PSTR("Press any key..."));
    1fc0:	8f ec       	ldi	r24, 0xCF	; 207
    1fc2:	93 e0       	ldi	r25, 0x03	; 3
    1fc4:	0e 94 3e 14 	call	0x287c	; 0x287c <transmitString_F>
TX_NEWLINE;
    1fc8:	8d e0       	ldi	r24, 0x0D	; 13
    1fca:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    1fce:	8a e0       	ldi	r24, 0x0A	; 10
    1fd0:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
option = receiveByte();
    1fd4:	0e 94 35 14 	call	0x286a	; 0x286a <receiveByte>
TX_NEWLINE;
    1fd8:	8d e0       	ldi	r24, 0x0D	; 13
    1fda:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    1fde:	8a e0       	ldi	r24, 0x0A	; 10
    1fe0:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
transmitString_F(PSTR("> 0: Erase Blocks "));
    1fe4:	8c eb       	ldi	r24, 0xBC	; 188
    1fe6:	93 e0       	ldi	r25, 0x03	; 3
    1fe8:	0e 94 3e 14 	call	0x287c	; 0x287c <transmitString_F>
TX_NEWLINE;
    1fec:	8d e0       	ldi	r24, 0x0D	; 13
    1fee:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    1ff2:	8a e0       	ldi	r24, 0x0A	; 10
    1ff4:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
transmitString_F(PSTR("> 1: Write single Block          2: Read single Block"));
    1ff8:	86 e8       	ldi	r24, 0x86	; 134
    1ffa:	93 e0       	ldi	r25, 0x03	; 3
    1ffc:	0e 94 3e 14 	call	0x287c	; 0x287c <transmitString_F>
#ifndef FAT_TESTING_ONLY
TX_NEWLINE;
transmitString_F(PSTR("> 3: Write multiple Blocks       4: Read multiple Blocks"));
#endif

TX_NEWLINE;
    2000:	8d e0       	ldi	r24, 0x0D	; 13
    2002:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    2006:	8a e0       	ldi	r24, 0x0A	; 10
    2008:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
transmitString_F(PSTR("> 5: Get file list               6: Read File"));
    200c:	88 e5       	ldi	r24, 0x58	; 88
    200e:	93 e0       	ldi	r25, 0x03	; 3
    2010:	0e 94 3e 14 	call	0x287c	; 0x287c <transmitString_F>
TX_NEWLINE;
    2014:	8d e0       	ldi	r24, 0x0D	; 13
    2016:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    201a:	8a e0       	ldi	r24, 0x0A	; 10
    201c:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
transmitString_F(PSTR("> 7: Write File                  8: Delete File"));
    2020:	88 e2       	ldi	r24, 0x28	; 40
    2022:	93 e0       	ldi	r25, 0x03	; 3
    2024:	0e 94 3e 14 	call	0x287c	; 0x287c <transmitString_F>
TX_NEWLINE;
    2028:	8d e0       	ldi	r24, 0x0D	; 13
    202a:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    202e:	8a e0       	ldi	r24, 0x0A	; 10
    2030:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
transmitString_F(PSTR("> 9: Read SD Memory Capacity     a: Show Date & Time"));
    2034:	83 ef       	ldi	r24, 0xF3	; 243
    2036:	92 e0       	ldi	r25, 0x02	; 2
    2038:	0e 94 3e 14 	call	0x287c	; 0x287c <transmitString_F>

TX_NEWLINE;
    203c:	8d e0       	ldi	r24, 0x0D	; 13
    203e:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    2042:	8a e0       	ldi	r24, 0x0A	; 10
    2044:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
transmitString_F(PSTR("> b: Update Date                 c: Update Time"));
    2048:	83 ec       	ldi	r24, 0xC3	; 195
    204a:	92 e0       	ldi	r25, 0x02	; 2
    204c:	0e 94 3e 14 	call	0x287c	; 0x287c <transmitString_F>
TX_NEWLINE;
    2050:	8d e0       	ldi	r24, 0x0D	; 13
    2052:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    2056:	8a e0       	ldi	r24, 0x0A	; 10
    2058:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>

TX_NEWLINE;
    205c:	8d e0       	ldi	r24, 0x0D	; 13
    205e:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    2062:	8a e0       	ldi	r24, 0x0A	; 10
    2064:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
TX_NEWLINE;
    2068:	8d e0       	ldi	r24, 0x0D	; 13
    206a:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    206e:	8a e0       	ldi	r24, 0x0A	; 10
    2070:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
transmitString_F(PSTR("> Select Option (0-9/a/b/c): "));
    2074:	85 ea       	ldi	r24, 0xA5	; 165
    2076:	92 e0       	ldi	r25, 0x02	; 2
    2078:	0e 94 3e 14 	call	0x287c	; 0x287c <transmitString_F>

/*WARNING: If option 0, 1 or 3 is selected, the card data may not be detected by PC/Laptop again,
as it may disturb the FAT format. In such a case you will need to format the card again with FAT32.
This options are given for learnig the raw data transfer to & from the SD Card*/

option = receiveByte();
    207c:	0e 94 35 14 	call	0x286a	; 0x286a <receiveByte>
    2080:	f8 2e       	mov	r15, r24
transmitByte(option);
    2082:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>

if(option >=0x35 && option <=0x39)  //options 5 to 9 disabled if FAT32 not found
    2086:	8f 2d       	mov	r24, r15
    2088:	85 53       	subi	r24, 0x35	; 53
    208a:	85 30       	cpi	r24, 0x05	; 5
    208c:	98 f4       	brcc	.+38     	; 0x20b4 <main+0x246>
{
  if(!FAT32_active) 
    208e:	ee 20       	and	r14, r14
    2090:	89 f4       	brne	.+34     	; 0x20b4 <main+0x246>
  {
    TX_NEWLINE;
    2092:	8d e0       	ldi	r24, 0x0D	; 13
    2094:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    2098:	8a e0       	ldi	r24, 0x0A	; 10
    209a:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    TX_NEWLINE;
    209e:	8d e0       	ldi	r24, 0x0D	; 13
    20a0:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    20a4:	8a e0       	ldi	r24, 0x0A	; 10
    20a6:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
	transmitString_F(PSTR("FAT32 options disabled!"));
    20aa:	8d e8       	ldi	r24, 0x8D	; 141
    20ac:	92 e0       	ldi	r25, 0x02	; 2
    20ae:	0e 94 3e 14 	call	0x287c	; 0x287c <transmitString_F>
    20b2:	80 cf       	rjmp	.-256    	; 0x1fb4 <main+0x146>
	continue;
  } 
}


if((option >= 0x30) && (option <=0x34)) //get starting block address for options 0 to 4
    20b4:	8f 2d       	mov	r24, r15
    20b6:	80 53       	subi	r24, 0x30	; 48
    20b8:	85 30       	cpi	r24, 0x05	; 5
    20ba:	08 f0       	brcs	.+2      	; 0x20be <main+0x250>
    20bc:	a2 c0       	rjmp	.+324    	; 0x2202 <main+0x394>
{
TX_NEWLINE;
    20be:	8d e0       	ldi	r24, 0x0D	; 13
    20c0:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    20c4:	8a e0       	ldi	r24, 0x0A	; 10
    20c6:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
TX_NEWLINE;
    20ca:	8d e0       	ldi	r24, 0x0D	; 13
    20cc:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    20d0:	8a e0       	ldi	r24, 0x0A	; 10
    20d2:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
transmitString_F(PSTR("Enter the Block number (0000-9999):"));
    20d6:	89 e6       	ldi	r24, 0x69	; 105
    20d8:	92 e0       	ldi	r25, 0x02	; 2
    20da:	0e 94 3e 14 	call	0x287c	; 0x287c <transmitString_F>
data = receiveByte(); transmitByte(data);
    20de:	0e 94 35 14 	call	0x286a	; 0x286a <receiveByte>
    20e2:	08 2f       	mov	r16, r24
    20e4:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
startBlock = (data & 0x0f) * 1000;
    20e8:	10 e0       	ldi	r17, 0x00	; 0
    20ea:	0f 70       	andi	r16, 0x0F	; 15
    20ec:	10 70       	andi	r17, 0x00	; 0
    20ee:	88 ee       	ldi	r24, 0xE8	; 232
    20f0:	93 e0       	ldi	r25, 0x03	; 3
    20f2:	9c 01       	movw	r18, r24
    20f4:	02 9f       	mul	r16, r18
    20f6:	c0 01       	movw	r24, r0
    20f8:	03 9f       	mul	r16, r19
    20fa:	90 0d       	add	r25, r0
    20fc:	12 9f       	mul	r17, r18
    20fe:	90 0d       	add	r25, r0
    2100:	11 24       	eor	r1, r1
    2102:	aa 27       	eor	r26, r26
    2104:	97 fd       	sbrc	r25, 7
    2106:	a0 95       	com	r26
    2108:	ba 2f       	mov	r27, r26
    210a:	80 93 a1 00 	sts	0x00A1, r24
    210e:	90 93 a2 00 	sts	0x00A2, r25
    2112:	a0 93 a3 00 	sts	0x00A3, r26
    2116:	b0 93 a4 00 	sts	0x00A4, r27
data = receiveByte(); transmitByte(data);
    211a:	0e 94 35 14 	call	0x286a	; 0x286a <receiveByte>
    211e:	08 2f       	mov	r16, r24
    2120:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
startBlock += (data & 0x0f) * 100;
    2124:	20 91 a1 00 	lds	r18, 0x00A1
    2128:	30 91 a2 00 	lds	r19, 0x00A2
    212c:	40 91 a3 00 	lds	r20, 0x00A3
    2130:	50 91 a4 00 	lds	r21, 0x00A4
    2134:	10 e0       	ldi	r17, 0x00	; 0
    2136:	0f 70       	andi	r16, 0x0F	; 15
    2138:	10 70       	andi	r17, 0x00	; 0
    213a:	84 e6       	ldi	r24, 0x64	; 100
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	bc 01       	movw	r22, r24
    2140:	06 9f       	mul	r16, r22
    2142:	c0 01       	movw	r24, r0
    2144:	07 9f       	mul	r16, r23
    2146:	90 0d       	add	r25, r0
    2148:	16 9f       	mul	r17, r22
    214a:	90 0d       	add	r25, r0
    214c:	11 24       	eor	r1, r1
    214e:	aa 27       	eor	r26, r26
    2150:	97 fd       	sbrc	r25, 7
    2152:	a0 95       	com	r26
    2154:	ba 2f       	mov	r27, r26
    2156:	82 0f       	add	r24, r18
    2158:	93 1f       	adc	r25, r19
    215a:	a4 1f       	adc	r26, r20
    215c:	b5 1f       	adc	r27, r21
    215e:	80 93 a1 00 	sts	0x00A1, r24
    2162:	90 93 a2 00 	sts	0x00A2, r25
    2166:	a0 93 a3 00 	sts	0x00A3, r26
    216a:	b0 93 a4 00 	sts	0x00A4, r27
data = receiveByte(); transmitByte(data);
    216e:	0e 94 35 14 	call	0x286a	; 0x286a <receiveByte>
    2172:	08 2f       	mov	r16, r24
    2174:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
startBlock += (data & 0x0f) * 10;
    2178:	20 91 a1 00 	lds	r18, 0x00A1
    217c:	30 91 a2 00 	lds	r19, 0x00A2
    2180:	40 91 a3 00 	lds	r20, 0x00A3
    2184:	50 91 a4 00 	lds	r21, 0x00A4
    2188:	10 e0       	ldi	r17, 0x00	; 0
    218a:	0f 70       	andi	r16, 0x0F	; 15
    218c:	10 70       	andi	r17, 0x00	; 0
    218e:	c8 01       	movw	r24, r16
    2190:	73 e0       	ldi	r23, 0x03	; 3
    2192:	88 0f       	add	r24, r24
    2194:	99 1f       	adc	r25, r25
    2196:	7a 95       	dec	r23
    2198:	e1 f7       	brne	.-8      	; 0x2192 <main+0x324>
    219a:	00 0f       	add	r16, r16
    219c:	11 1f       	adc	r17, r17
    219e:	80 0f       	add	r24, r16
    21a0:	91 1f       	adc	r25, r17
    21a2:	aa 27       	eor	r26, r26
    21a4:	97 fd       	sbrc	r25, 7
    21a6:	a0 95       	com	r26
    21a8:	ba 2f       	mov	r27, r26
    21aa:	82 0f       	add	r24, r18
    21ac:	93 1f       	adc	r25, r19
    21ae:	a4 1f       	adc	r26, r20
    21b0:	b5 1f       	adc	r27, r21
    21b2:	80 93 a1 00 	sts	0x00A1, r24
    21b6:	90 93 a2 00 	sts	0x00A2, r25
    21ba:	a0 93 a3 00 	sts	0x00A3, r26
    21be:	b0 93 a4 00 	sts	0x00A4, r27
data = receiveByte(); transmitByte(data);
    21c2:	0e 94 35 14 	call	0x286a	; 0x286a <receiveByte>
    21c6:	18 2f       	mov	r17, r24
    21c8:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
startBlock += (data & 0x0f);
    21cc:	80 91 a1 00 	lds	r24, 0x00A1
    21d0:	90 91 a2 00 	lds	r25, 0x00A2
    21d4:	a0 91 a3 00 	lds	r26, 0x00A3
    21d8:	b0 91 a4 00 	lds	r27, 0x00A4
    21dc:	1f 70       	andi	r17, 0x0F	; 15
    21de:	81 0f       	add	r24, r17
    21e0:	91 1d       	adc	r25, r1
    21e2:	a1 1d       	adc	r26, r1
    21e4:	b1 1d       	adc	r27, r1
    21e6:	80 93 a1 00 	sts	0x00A1, r24
    21ea:	90 93 a2 00 	sts	0x00A2, r25
    21ee:	a0 93 a3 00 	sts	0x00A3, r26
    21f2:	b0 93 a4 00 	sts	0x00A4, r27
TX_NEWLINE;
    21f6:	8d e0       	ldi	r24, 0x0D	; 13
    21f8:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    21fc:	8a e0       	ldi	r24, 0x0A	; 10
    21fe:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
}

totalBlocks = 1;
    2202:	80 92 ac 02 	sts	0x02AC, r8
    2206:	90 92 ad 02 	sts	0x02AD, r9
    220a:	a0 92 ae 02 	sts	0x02AE, r10
    220e:	b0 92 af 02 	sts	0x02AF, r11
totalBlocks += (data & 0x0f);
TX_NEWLINE;
}
#endif

switch (option)
    2212:	79 e3       	ldi	r23, 0x39	; 57
    2214:	f7 16       	cp	r15, r23
    2216:	09 f4       	brne	.+2      	; 0x221a <main+0x3ac>
    2218:	40 c1       	rjmp	.+640    	; 0x249a <main+0x62c>
    221a:	7f 15       	cp	r23, r15
    221c:	b0 f0       	brcs	.+44     	; 0x224a <main+0x3dc>
    221e:	82 e3       	ldi	r24, 0x32	; 50
    2220:	f8 16       	cp	r15, r24
    2222:	09 f4       	brne	.+2      	; 0x2226 <main+0x3b8>
    2224:	9b c0       	rjmp	.+310    	; 0x235c <main+0x4ee>
    2226:	8f 15       	cp	r24, r15
    2228:	40 f0       	brcs	.+16     	; 0x223a <main+0x3cc>
    222a:	20 e3       	ldi	r18, 0x30	; 48
    222c:	f2 16       	cp	r15, r18
    222e:	49 f1       	breq	.+82     	; 0x2282 <main+0x414>
    2230:	31 e3       	ldi	r19, 0x31	; 49
    2232:	f3 16       	cp	r15, r19
    2234:	09 f0       	breq	.+2      	; 0x2238 <main+0x3ca>
    2236:	3f c1       	rjmp	.+638    	; 0x24b6 <main+0x648>
    2238:	45 c0       	rjmp	.+138    	; 0x22c4 <main+0x456>
    223a:	65 e3       	ldi	r22, 0x35	; 53
    223c:	f6 16       	cp	r15, r22
    223e:	09 f4       	brne	.+2      	; 0x2242 <main+0x3d4>
    2240:	c3 c0       	rjmp	.+390    	; 0x23c8 <main+0x55a>
    2242:	f6 16       	cp	r15, r22
    2244:	08 f4       	brcc	.+2      	; 0x2248 <main+0x3da>
    2246:	37 c1       	rjmp	.+622    	; 0x24b6 <main+0x648>
    2248:	cb c0       	rjmp	.+406    	; 0x23e0 <main+0x572>
    224a:	73 e4       	ldi	r23, 0x43	; 67
    224c:	f7 16       	cp	r15, r23
    224e:	09 f4       	brne	.+2      	; 0x2252 <main+0x3e4>
    2250:	2f c1       	rjmp	.+606    	; 0x24b0 <main+0x642>
    2252:	7f 15       	cp	r23, r15
    2254:	48 f0       	brcs	.+18     	; 0x2268 <main+0x3fa>
    2256:	81 e4       	ldi	r24, 0x41	; 65
    2258:	f8 16       	cp	r15, r24
    225a:	09 f4       	brne	.+2      	; 0x225e <main+0x3f0>
    225c:	21 c1       	rjmp	.+578    	; 0x24a0 <main+0x632>
    225e:	22 e4       	ldi	r18, 0x42	; 66
    2260:	f2 16       	cp	r15, r18
    2262:	09 f0       	breq	.+2      	; 0x2266 <main+0x3f8>
    2264:	28 c1       	rjmp	.+592    	; 0x24b6 <main+0x648>
    2266:	21 c1       	rjmp	.+578    	; 0x24aa <main+0x63c>
    2268:	32 e6       	ldi	r19, 0x62	; 98
    226a:	f3 16       	cp	r15, r19
    226c:	09 f4       	brne	.+2      	; 0x2270 <main+0x402>
    226e:	1d c1       	rjmp	.+570    	; 0x24aa <main+0x63c>
    2270:	63 e6       	ldi	r22, 0x63	; 99
    2272:	f6 16       	cp	r15, r22
    2274:	09 f4       	brne	.+2      	; 0x2278 <main+0x40a>
    2276:	1c c1       	rjmp	.+568    	; 0x24b0 <main+0x642>
    2278:	71 e6       	ldi	r23, 0x61	; 97
    227a:	f7 16       	cp	r15, r23
    227c:	09 f0       	breq	.+2      	; 0x2280 <main+0x412>
    227e:	1b c1       	rjmp	.+566    	; 0x24b6 <main+0x648>
    2280:	0f c1       	rjmp	.+542    	; 0x24a0 <main+0x632>
{
case '0': //error = SD_erase (block, totalBlocks);
          error = SD_erase (startBlock, totalBlocks);
    2282:	60 91 a1 00 	lds	r22, 0x00A1
    2286:	70 91 a2 00 	lds	r23, 0x00A2
    228a:	80 91 a3 00 	lds	r24, 0x00A3
    228e:	90 91 a4 00 	lds	r25, 0x00A4
    2292:	20 91 ac 02 	lds	r18, 0x02AC
    2296:	30 91 ad 02 	lds	r19, 0x02AD
    229a:	40 91 ae 02 	lds	r20, 0x02AE
    229e:	50 91 af 02 	lds	r21, 0x02AF
    22a2:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <SD_erase>
    22a6:	18 2f       	mov	r17, r24
          TX_NEWLINE;
    22a8:	8d e0       	ldi	r24, 0x0D	; 13
    22aa:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    22ae:	8a e0       	ldi	r24, 0x0A	; 10
    22b0:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
          if(error)
    22b4:	11 23       	and	r17, r17
    22b6:	19 f0       	breq	.+6      	; 0x22be <main+0x450>
              transmitString_F(PSTR("Erase failed.."));
    22b8:	8a e5       	ldi	r24, 0x5A	; 90
    22ba:	92 e0       	ldi	r25, 0x02	; 2
    22bc:	49 c0       	rjmp	.+146    	; 0x2350 <main+0x4e2>
          else
              transmitString_F(PSTR("Erased!"));
    22be:	82 e5       	ldi	r24, 0x52	; 82
    22c0:	92 e0       	ldi	r25, 0x02	; 2
    22c2:	46 c0       	rjmp	.+140    	; 0x2350 <main+0x4e2>
          break;

case '1': TX_NEWLINE;
    22c4:	8d e0       	ldi	r24, 0x0D	; 13
    22c6:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    22ca:	8a e0       	ldi	r24, 0x0A	; 10
    22cc:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
          transmitString_F(PSTR(" Enter text (End with ~):"));
    22d0:	88 e3       	ldi	r24, 0x38	; 56
    22d2:	92 e0       	ldi	r25, 0x02	; 2
    22d4:	0e 94 3e 14 	call	0x287c	; 0x287c <transmitString_F>
    22d8:	00 e0       	ldi	r16, 0x00	; 0
    22da:	10 e0       	ldi	r17, 0x00	; 0
          i=0;
            do
            {
                data = receiveByte();
    22dc:	0e 94 35 14 	call	0x286a	; 0x286a <receiveByte>
    22e0:	f8 2e       	mov	r15, r24
                transmitByte(data);
    22e2:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
                buffer[i++] = data;
    22e6:	f8 01       	movw	r30, r16
    22e8:	eb 55       	subi	r30, 0x5B	; 91
    22ea:	ff 4f       	sbci	r31, 0xFF	; 255
    22ec:	f0 82       	st	Z, r15
    22ee:	0f 5f       	subi	r16, 0xFF	; 255
    22f0:	1f 4f       	sbci	r17, 0xFF	; 255
                if(data == 0x0d)
    22f2:	8d e0       	ldi	r24, 0x0D	; 13
    22f4:	f8 16       	cp	r15, r24
    22f6:	51 f4       	brne	.+20     	; 0x230c <main+0x49e>
                {
                    transmitByte(0x0a);
    22f8:	8a e0       	ldi	r24, 0x0A	; 10
    22fa:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
                    buffer[i++] = 0x0a;
    22fe:	f8 01       	movw	r30, r16
    2300:	eb 55       	subi	r30, 0x5B	; 91
    2302:	ff 4f       	sbci	r31, 0xFF	; 255
    2304:	8a e0       	ldi	r24, 0x0A	; 10
    2306:	80 83       	st	Z, r24
    2308:	0f 5f       	subi	r16, 0xFF	; 255
    230a:	1f 4f       	sbci	r17, 0xFF	; 255
                }
                if(i == 512) break;
    230c:	22 e0       	ldi	r18, 0x02	; 2
    230e:	00 30       	cpi	r16, 0x00	; 0
    2310:	12 07       	cpc	r17, r18
    2312:	19 f0       	breq	.+6      	; 0x231a <main+0x4ac>
            }while (data != '~');
    2314:	3e e7       	ldi	r19, 0x7E	; 126
    2316:	f3 16       	cp	r15, r19
    2318:	09 f7       	brne	.-62     	; 0x22dc <main+0x46e>

            error = SD_writeSingleBlock (startBlock);
    231a:	60 91 a1 00 	lds	r22, 0x00A1
    231e:	70 91 a2 00 	lds	r23, 0x00A2
    2322:	80 91 a3 00 	lds	r24, 0x00A3
    2326:	90 91 a4 00 	lds	r25, 0x00A4
    232a:	0e 94 17 13 	call	0x262e	; 0x262e <SD_writeSingleBlock>
    232e:	18 2f       	mov	r17, r24
            TX_NEWLINE;
    2330:	8d e0       	ldi	r24, 0x0D	; 13
    2332:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    2336:	8a e0       	ldi	r24, 0x0A	; 10
    2338:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
            TX_NEWLINE;
    233c:	8d e0       	ldi	r24, 0x0D	; 13
    233e:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    2342:	8a e0       	ldi	r24, 0x0A	; 10
    2344:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
            if(error)
    2348:	11 23       	and	r17, r17
    234a:	29 f0       	breq	.+10     	; 0x2356 <main+0x4e8>
                transmitString_F(PSTR("Write failed.."));
    234c:	89 e2       	ldi	r24, 0x29	; 41
    234e:	92 e0       	ldi	r25, 0x02	; 2
    2350:	0e 94 3e 14 	call	0x287c	; 0x287c <transmitString_F>
    2354:	c6 c0       	rjmp	.+396    	; 0x24e2 <main+0x674>
            else
                transmitString_F(PSTR("Write successful!"));
    2356:	87 e1       	ldi	r24, 0x17	; 23
    2358:	92 e0       	ldi	r25, 0x02	; 2
    235a:	fa cf       	rjmp	.-12     	; 0x2350 <main+0x4e2>
            break;

case '2': error = SD_readSingleBlock (startBlock);
    235c:	60 91 a1 00 	lds	r22, 0x00A1
    2360:	70 91 a2 00 	lds	r23, 0x00A2
    2364:	80 91 a3 00 	lds	r24, 0x00A3
    2368:	90 91 a4 00 	lds	r25, 0x00A4
    236c:	0e 94 65 13 	call	0x26ca	; 0x26ca <SD_readSingleBlock>
    2370:	18 2f       	mov	r17, r24
          TX_NEWLINE;
    2372:	8d e0       	ldi	r24, 0x0D	; 13
    2374:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    2378:	8a e0       	ldi	r24, 0x0A	; 10
    237a:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
          if(error)
    237e:	11 23       	and	r17, r17
    2380:	19 f0       	breq	.+6      	; 0x2388 <main+0x51a>
            transmitString_F(PSTR("Read failed.."));
    2382:	89 e0       	ldi	r24, 0x09	; 9
    2384:	92 e0       	ldi	r25, 0x02	; 2
    2386:	e4 cf       	rjmp	.-56     	; 0x2350 <main+0x4e2>
    2388:	00 e0       	ldi	r16, 0x00	; 0
    238a:	10 e0       	ldi	r17, 0x00	; 0
          else
          {
            for(i=0;i<512;i++)
            {
                if(buffer[i] == '~') break;
    238c:	f8 01       	movw	r30, r16
    238e:	eb 55       	subi	r30, 0x5B	; 91
    2390:	ff 4f       	sbci	r31, 0xFF	; 255
    2392:	80 81       	ld	r24, Z
    2394:	8e 37       	cpi	r24, 0x7E	; 126
    2396:	49 f0       	breq	.+18     	; 0x23aa <main+0x53c>
                transmitByte(buffer[i]);
    2398:	80 81       	ld	r24, Z
    239a:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
          TX_NEWLINE;
          if(error)
            transmitString_F(PSTR("Read failed.."));
          else
          {
            for(i=0;i<512;i++)
    239e:	0f 5f       	subi	r16, 0xFF	; 255
    23a0:	1f 4f       	sbci	r17, 0xFF	; 255
    23a2:	62 e0       	ldi	r22, 0x02	; 2
    23a4:	00 30       	cpi	r16, 0x00	; 0
    23a6:	16 07       	cpc	r17, r22
    23a8:	89 f7       	brne	.-30     	; 0x238c <main+0x51e>
            {
                if(buffer[i] == '~') break;
                transmitByte(buffer[i]);
            }
            TX_NEWLINE;
    23aa:	8d e0       	ldi	r24, 0x0D	; 13
    23ac:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    23b0:	8a e0       	ldi	r24, 0x0A	; 10
    23b2:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
            TX_NEWLINE;
    23b6:	8d e0       	ldi	r24, 0x0D	; 13
    23b8:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    23bc:	8a e0       	ldi	r24, 0x0A	; 10
    23be:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
            transmitString_F(PSTR("Read successful!"));
    23c2:	88 ef       	ldi	r24, 0xF8	; 248
    23c4:	91 e0       	ldi	r25, 0x01	; 1
    23c6:	c4 cf       	rjmp	.-120    	; 0x2350 <main+0x4e2>
          else
            transmitString_F(PSTR("Read successful!"));
          break;
#endif

case '5': TX_NEWLINE;
    23c8:	8d e0       	ldi	r24, 0x0D	; 13
    23ca:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    23ce:	8a e0       	ldi	r24, 0x0A	; 10
    23d0:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
  		  findFiles(GET_LIST,0);
    23d4:	80 e0       	ldi	r24, 0x00	; 0
    23d6:	60 e0       	ldi	r22, 0x00	; 0
    23d8:	70 e0       	ldi	r23, 0x00	; 0
    23da:	0e 94 77 08 	call	0x10ee	; 0x10ee <findFiles>
    23de:	81 c0       	rjmp	.+258    	; 0x24e2 <main+0x674>
          break;

case '6': 
case '7': 
case '8': TX_NEWLINE;
    23e0:	8d e0       	ldi	r24, 0x0D	; 13
    23e2:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    23e6:	8a e0       	ldi	r24, 0x0A	; 10
    23e8:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
		  TX_NEWLINE;
    23ec:	8d e0       	ldi	r24, 0x0D	; 13
    23ee:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    23f2:	8a e0       	ldi	r24, 0x0A	; 10
    23f4:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
          transmitString_F(PSTR("Enter file name: "));
    23f8:	86 ee       	ldi	r24, 0xE6	; 230
    23fa:	91 e0       	ldi	r25, 0x01	; 1
    23fc:	0e 94 3e 14 	call	0x287c	; 0x287c <transmitString_F>
    2400:	f6 01       	movw	r30, r12
          for(i=0; i<13; i++)
			fileName[i] = 0x00;   //clearing any previously stored file name
    2402:	11 92       	st	Z+, r1
case '6': 
case '7': 
case '8': TX_NEWLINE;
		  TX_NEWLINE;
          transmitString_F(PSTR("Enter file name: "));
          for(i=0; i<13; i++)
    2404:	e6 15       	cp	r30, r6
    2406:	f7 05       	cpc	r31, r7
    2408:	e1 f7       	brne	.-8      	; 0x2402 <main+0x594>
    240a:	00 e0       	ldi	r16, 0x00	; 0
    240c:	10 e0       	ldi	r17, 0x00	; 0
			fileName[i] = 0x00;   //clearing any previously stored file name
          i=0;
          while(1)
          {
            data = receiveByte();
    240e:	0e 94 35 14 	call	0x286a	; 0x286a <receiveByte>
    2412:	98 2f       	mov	r25, r24
            if(data == 0x0d) break;  //'ENTER' key pressed
    2414:	8d 30       	cpi	r24, 0x0D	; 13
    2416:	29 f1       	breq	.+74     	; 0x2462 <main+0x5f4>
			if(data == 0x08)	//'Back Space' key pressed
    2418:	88 30       	cpi	r24, 0x08	; 8
    241a:	79 f4       	brne	.+30     	; 0x243a <main+0x5cc>
	 		{ 
	   			if(i != 0)
    241c:	01 15       	cp	r16, r1
    241e:	11 05       	cpc	r17, r1
    2420:	b1 f3       	breq	.-20     	; 0x240e <main+0x5a0>
	   			{ 
	     			transmitByte(data);
    2422:	88 e0       	ldi	r24, 0x08	; 8
    2424:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
					transmitByte(' '); 
    2428:	80 e2       	ldi	r24, 0x20	; 32
    242a:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
	     			transmitByte(data); 
    242e:	88 e0       	ldi	r24, 0x08	; 8
    2430:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
	     			i--; 
    2434:	01 50       	subi	r16, 0x01	; 1
    2436:	10 40       	sbci	r17, 0x00	; 0
    2438:	ea cf       	rjmp	.-44     	; 0x240e <main+0x5a0>
	   			} 
	   			continue;     
	 		}
			if(data <0x20 || data > 0x7e) continue;  //check for valid English text character
    243a:	80 52       	subi	r24, 0x20	; 32
    243c:	8f 35       	cpi	r24, 0x5F	; 95
    243e:	38 f7       	brcc	.-50     	; 0x240e <main+0x5a0>
			transmitByte(data);
    2440:	89 2f       	mov	r24, r25
    2442:	9e 87       	std	Y+14, r25	; 0x0e
    2444:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
            fileName[i++] = data;
    2448:	f6 01       	movw	r30, r12
    244a:	e0 0f       	add	r30, r16
    244c:	f1 1f       	adc	r31, r17
    244e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2450:	90 83       	st	Z, r25
    2452:	0f 5f       	subi	r16, 0xFF	; 255
    2454:	1f 4f       	sbci	r17, 0xFF	; 255
            if(i==13){transmitString_F(PSTR(" file name too long..")); break;}
    2456:	0d 30       	cpi	r16, 0x0D	; 13
    2458:	11 05       	cpc	r17, r1
    245a:	c9 f6       	brne	.-78     	; 0x240e <main+0x5a0>
    245c:	80 ed       	ldi	r24, 0xD0	; 208
    245e:	91 e0       	ldi	r25, 0x01	; 1
    2460:	77 cf       	rjmp	.-274    	; 0x2350 <main+0x4e2>
          }
          if(i>12) break;
    2462:	0d 30       	cpi	r16, 0x0D	; 13
    2464:	11 05       	cpc	r17, r1
    2466:	e8 f5       	brcc	.+122    	; 0x24e2 <main+0x674>
       
	      TX_NEWLINE;
    2468:	8d e0       	ldi	r24, 0x0D	; 13
    246a:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    246e:	8a e0       	ldi	r24, 0x0A	; 10
    2470:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
		  if(option == '6')
    2474:	76 e3       	ldi	r23, 0x36	; 54
    2476:	f7 16       	cp	r15, r23
    2478:	29 f4       	brne	.+10     	; 0x2484 <main+0x616>
		     readFile( READ, fileName);
    247a:	80 e0       	ldi	r24, 0x00	; 0
    247c:	b6 01       	movw	r22, r12
    247e:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <readFile>
    2482:	2f c0       	rjmp	.+94     	; 0x24e2 <main+0x674>
		  if(option == '7')
    2484:	87 e3       	ldi	r24, 0x37	; 55
    2486:	f8 16       	cp	r15, r24
    2488:	21 f4       	brne	.+8      	; 0x2492 <main+0x624>
		  	 writeFile(fileName);
    248a:	c6 01       	movw	r24, r12
    248c:	0e 94 43 0b 	call	0x1686	; 0x1686 <writeFile>
    2490:	28 c0       	rjmp	.+80     	; 0x24e2 <main+0x674>
 		  if(option == '8')
		     deleteFile(fileName);
    2492:	c6 01       	movw	r24, r12
    2494:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <deleteFile>
    2498:	24 c0       	rjmp	.+72     	; 0x24e2 <main+0x674>
          break;

case '9': memoryStatistics();
    249a:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <memoryStatistics>
    249e:	21 c0       	rjmp	.+66     	; 0x24e2 <main+0x674>
          break;

case 'a': 
case 'A': RTC_displayDate();
    24a0:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <RTC_displayDate>
		  RTC_displayTime();
    24a4:	0e 94 41 18 	call	0x3082	; 0x3082 <RTC_displayTime>
    24a8:	1c c0       	rjmp	.+56     	; 0x24e2 <main+0x674>
		  break;
case 'b': 
case 'B': RTC_updateDate();
    24aa:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <RTC_updateDate>
    24ae:	19 c0       	rjmp	.+50     	; 0x24e2 <main+0x674>
		  break;
case 'c': 
case 'C': RTC_updateTime();
    24b0:	0e 94 44 16 	call	0x2c88	; 0x2c88 <RTC_updateTime>
    24b4:	16 c0       	rjmp	.+44     	; 0x24e2 <main+0x674>
	      break;

default: TX_NEWLINE;
    24b6:	8d e0       	ldi	r24, 0x0D	; 13
    24b8:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    24bc:	8a e0       	ldi	r24, 0x0A	; 10
    24be:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
         TX_NEWLINE;
    24c2:	8d e0       	ldi	r24, 0x0D	; 13
    24c4:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    24c8:	8a e0       	ldi	r24, 0x0A	; 10
    24ca:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
         transmitString_F(PSTR(" Invalid option!"));
    24ce:	8f eb       	ldi	r24, 0xBF	; 191
    24d0:	91 e0       	ldi	r25, 0x01	; 1
    24d2:	0e 94 3e 14 	call	0x287c	; 0x287c <transmitString_F>
         TX_NEWLINE;
    24d6:	8d e0       	ldi	r24, 0x0D	; 13
    24d8:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    24dc:	8a e0       	ldi	r24, 0x0A	; 10
    24de:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
}

TX_NEWLINE;
    24e2:	8d e0       	ldi	r24, 0x0D	; 13
    24e4:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    24e8:	8a e0       	ldi	r24, 0x0A	; 10
    24ea:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    24ee:	62 cd       	rjmp	.-1340   	; 0x1fb4 <main+0x146>

000024f0 <SD_sendCommand>:
//Arguments	: unsigned char (8-bit command value)
// 			  & unsigned long (32-bit command argument)
//return	: unsigned char; response byte
//******************************************************************
unsigned char SD_sendCommand(unsigned char cmd, unsigned long arg)
{
    24f0:	df 92       	push	r13
    24f2:	ef 92       	push	r14
    24f4:	ff 92       	push	r15
    24f6:	0f 93       	push	r16
    24f8:	1f 93       	push	r17
    24fa:	d8 2e       	mov	r13, r24
    24fc:	7a 01       	movw	r14, r20
    24fe:	8b 01       	movw	r16, r22
//SD card accepts byte address while SDHC accepts block address in multiples of 512
//so, if it's SD card we need to convert block address into corresponding byte address by 
//multipying it with 512. which is equivalent to shifting it left 9 times
//following 'if' loop does that

if(SDHC_flag == 0)		
    2500:	80 91 ab 02 	lds	r24, 0x02AB
    2504:	88 23       	and	r24, r24
    2506:	b9 f4       	brne	.+46     	; 0x2536 <SD_sendCommand+0x46>
if(cmd == READ_SINGLE_BLOCK     ||
    2508:	8d 2d       	mov	r24, r13
    250a:	81 51       	subi	r24, 0x11	; 17
    250c:	82 30       	cpi	r24, 0x02	; 2
    250e:	60 f0       	brcs	.+24     	; 0x2528 <SD_sendCommand+0x38>
    2510:	88 e1       	ldi	r24, 0x18	; 24
    2512:	d8 16       	cp	r13, r24
    2514:	49 f0       	breq	.+18     	; 0x2528 <SD_sendCommand+0x38>
    2516:	89 e1       	ldi	r24, 0x19	; 25
    2518:	d8 16       	cp	r13, r24
    251a:	31 f0       	breq	.+12     	; 0x2528 <SD_sendCommand+0x38>
    251c:	80 e2       	ldi	r24, 0x20	; 32
    251e:	d8 16       	cp	r13, r24
    2520:	19 f0       	breq	.+6      	; 0x2528 <SD_sendCommand+0x38>
    2522:	81 e2       	ldi	r24, 0x21	; 33
    2524:	d8 16       	cp	r13, r24
    2526:	39 f4       	brne	.+14     	; 0x2536 <SD_sendCommand+0x46>
   cmd == WRITE_SINGLE_BLOCK    ||
   cmd == WRITE_MULTIPLE_BLOCKS ||
   cmd == ERASE_BLOCK_START_ADDR|| 
   cmd == ERASE_BLOCK_END_ADDR ) 
   {
     arg = arg << 9;
    2528:	39 e0       	ldi	r19, 0x09	; 9
    252a:	ee 0c       	add	r14, r14
    252c:	ff 1c       	adc	r15, r15
    252e:	00 1f       	adc	r16, r16
    2530:	11 1f       	adc	r17, r17
    2532:	3a 95       	dec	r19
    2534:	d1 f7       	brne	.-12     	; 0x252a <SD_sendCommand+0x3a>
   }	   

SD_CS_ASSERT;
    2536:	c4 98       	cbi	0x18, 4	; 24

SPI_transmit(cmd | 0x40); //send command, first two bits always '01'
    2538:	8d 2d       	mov	r24, r13
    253a:	80 64       	ori	r24, 0x40	; 64
    253c:	0e 94 20 14 	call	0x2840	; 0x2840 <SPI_transmit>
SPI_transmit(arg>>24);
    2540:	81 2f       	mov	r24, r17
    2542:	99 27       	eor	r25, r25
    2544:	aa 27       	eor	r26, r26
    2546:	bb 27       	eor	r27, r27
    2548:	0e 94 20 14 	call	0x2840	; 0x2840 <SPI_transmit>
SPI_transmit(arg>>16);
    254c:	c8 01       	movw	r24, r16
    254e:	aa 27       	eor	r26, r26
    2550:	bb 27       	eor	r27, r27
    2552:	0e 94 20 14 	call	0x2840	; 0x2840 <SPI_transmit>
SPI_transmit(arg>>8);
    2556:	bb 27       	eor	r27, r27
    2558:	a1 2f       	mov	r26, r17
    255a:	90 2f       	mov	r25, r16
    255c:	8f 2d       	mov	r24, r15
    255e:	0e 94 20 14 	call	0x2840	; 0x2840 <SPI_transmit>
SPI_transmit(arg);
    2562:	8e 2d       	mov	r24, r14
    2564:	0e 94 20 14 	call	0x2840	; 0x2840 <SPI_transmit>

if(cmd == SEND_IF_COND)	 //it is compulsory to send correct CRC for CMD8 (CRC=0x87) & CMD0 (CRC=0x95)
    2568:	88 e0       	ldi	r24, 0x08	; 8
    256a:	d8 16       	cp	r13, r24
    256c:	11 f4       	brne	.+4      	; 0x2572 <SD_sendCommand+0x82>
  SPI_transmit(0x87);    //for remaining commands, CRC is ignored in SPI mode
    256e:	87 e8       	ldi	r24, 0x87	; 135
    2570:	01 c0       	rjmp	.+2      	; 0x2574 <SD_sendCommand+0x84>
else 
  SPI_transmit(0x95); 
    2572:	85 e9       	ldi	r24, 0x95	; 149
    2574:	0e 94 20 14 	call	0x2840	; 0x2840 <SPI_transmit>

while((response = SPI_receive()) == 0xff) //wait response
   if(retry++ > 0xfe) break; //time out error
    2578:	10 e0       	ldi	r17, 0x00	; 0
    257a:	02 c0       	rjmp	.+4      	; 0x2580 <SD_sendCommand+0x90>
SPI_transmit(arg);

if(cmd == SEND_IF_COND)	 //it is compulsory to send correct CRC for CMD8 (CRC=0x87) & CMD0 (CRC=0x95)
  SPI_transmit(0x87);    //for remaining commands, CRC is ignored in SPI mode
else 
  SPI_transmit(0x95); 
    257c:	11 50       	subi	r17, 0x01	; 1

while((response = SPI_receive()) == 0xff) //wait response
   if(retry++ > 0xfe) break; //time out error
    257e:	d1 f0       	breq	.+52     	; 0x25b4 <SD_sendCommand+0xc4>
if(cmd == SEND_IF_COND)	 //it is compulsory to send correct CRC for CMD8 (CRC=0x87) & CMD0 (CRC=0x95)
  SPI_transmit(0x87);    //for remaining commands, CRC is ignored in SPI mode
else 
  SPI_transmit(0x95); 

while((response = SPI_receive()) == 0xff) //wait response
    2580:	0e 94 25 14 	call	0x284a	; 0x284a <SPI_receive>
    2584:	08 2f       	mov	r16, r24
    2586:	8f 3f       	cpi	r24, 0xFF	; 255
    2588:	c9 f3       	breq	.-14     	; 0x257c <SD_sendCommand+0x8c>
   if(retry++ > 0xfe) break; //time out error

if(response == 0x00 && cmd == 58)  //checking response of CMD58
    258a:	88 23       	and	r24, r24
    258c:	99 f4       	brne	.+38     	; 0x25b4 <SD_sendCommand+0xc4>
    258e:	8a e3       	ldi	r24, 0x3A	; 58
    2590:	d8 16       	cp	r13, r24
    2592:	81 f4       	brne	.+32     	; 0x25b4 <SD_sendCommand+0xc4>
{
  status = SPI_receive() & 0x40;     //first byte of the OCR register (bit 31:24)
    2594:	0e 94 25 14 	call	0x284a	; 0x284a <SPI_receive>
  if(status == 0x40) SDHC_flag = 1;  //we need it to verify SDHC card
    2598:	86 ff       	sbrs	r24, 6
    259a:	04 c0       	rjmp	.+8      	; 0x25a4 <SD_sendCommand+0xb4>
    259c:	81 e0       	ldi	r24, 0x01	; 1
    259e:	80 93 ab 02 	sts	0x02AB, r24
    25a2:	02 c0       	rjmp	.+4      	; 0x25a8 <SD_sendCommand+0xb8>
  else SDHC_flag = 0;
    25a4:	10 92 ab 02 	sts	0x02AB, r1

  SPI_receive(); //remaining 3 bytes of the OCR register are ignored here
    25a8:	0e 94 25 14 	call	0x284a	; 0x284a <SPI_receive>
  SPI_receive(); //one can use these bytes to check power supply limits of SD
    25ac:	0e 94 25 14 	call	0x284a	; 0x284a <SPI_receive>
  SPI_receive(); 
    25b0:	0e 94 25 14 	call	0x284a	; 0x284a <SPI_receive>
}

SPI_receive(); //extra 8 CLK
    25b4:	0e 94 25 14 	call	0x284a	; 0x284a <SPI_receive>
SD_CS_DEASSERT;
    25b8:	c4 9a       	sbi	0x18, 4	; 24

return response; //return state
}
    25ba:	80 2f       	mov	r24, r16
    25bc:	1f 91       	pop	r17
    25be:	0f 91       	pop	r16
    25c0:	ff 90       	pop	r15
    25c2:	ef 90       	pop	r14
    25c4:	df 90       	pop	r13
    25c6:	08 95       	ret

000025c8 <SD_erase>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//*****************************************************************
unsigned char SD_erase (unsigned long startBlock, unsigned long totalBlocks)
{
    25c8:	af 92       	push	r10
    25ca:	bf 92       	push	r11
    25cc:	cf 92       	push	r12
    25ce:	df 92       	push	r13
    25d0:	ef 92       	push	r14
    25d2:	ff 92       	push	r15
    25d4:	0f 93       	push	r16
    25d6:	1f 93       	push	r17
    25d8:	7b 01       	movw	r14, r22
    25da:	8c 01       	movw	r16, r24
    25dc:	59 01       	movw	r10, r18
    25de:	6a 01       	movw	r12, r20
unsigned char response;

response = SD_sendCommand(ERASE_BLOCK_START_ADDR, startBlock); //send starting block address
    25e0:	80 e2       	ldi	r24, 0x20	; 32
    25e2:	b8 01       	movw	r22, r16
    25e4:	a7 01       	movw	r20, r14
    25e6:	0e 94 78 12 	call	0x24f0	; 0x24f0 <SD_sendCommand>
if(response != 0x00) //check for SD status: 0x00 - OK (No flags set)
    25ea:	88 23       	and	r24, r24
    25ec:	b9 f4       	brne	.+46     	; 0x261c <SD_erase+0x54>
  return response;

response = SD_sendCommand(ERASE_BLOCK_END_ADDR,(startBlock + totalBlocks - 1)); //send end block address
    25ee:	08 94       	sec
    25f0:	e1 08       	sbc	r14, r1
    25f2:	f1 08       	sbc	r15, r1
    25f4:	01 09       	sbc	r16, r1
    25f6:	11 09       	sbc	r17, r1
    25f8:	ea 0c       	add	r14, r10
    25fa:	fb 1c       	adc	r15, r11
    25fc:	0c 1d       	adc	r16, r12
    25fe:	1d 1d       	adc	r17, r13
    2600:	81 e2       	ldi	r24, 0x21	; 33
    2602:	b8 01       	movw	r22, r16
    2604:	a7 01       	movw	r20, r14
    2606:	0e 94 78 12 	call	0x24f0	; 0x24f0 <SD_sendCommand>
if(response != 0x00)
    260a:	88 23       	and	r24, r24
    260c:	39 f4       	brne	.+14     	; 0x261c <SD_erase+0x54>
  return response;

response = SD_sendCommand(ERASE_SELECTED_BLOCKS, 0); //erase all selected blocks
    260e:	86 e2       	ldi	r24, 0x26	; 38
    2610:	40 e0       	ldi	r20, 0x00	; 0
    2612:	50 e0       	ldi	r21, 0x00	; 0
    2614:	60 e0       	ldi	r22, 0x00	; 0
    2616:	70 e0       	ldi	r23, 0x00	; 0
    2618:	0e 94 78 12 	call	0x24f0	; 0x24f0 <SD_sendCommand>
if(response != 0x00)
  return response;

return 0; //normal return
}
    261c:	1f 91       	pop	r17
    261e:	0f 91       	pop	r16
    2620:	ff 90       	pop	r15
    2622:	ef 90       	pop	r14
    2624:	df 90       	pop	r13
    2626:	cf 90       	pop	r12
    2628:	bf 90       	pop	r11
    262a:	af 90       	pop	r10
    262c:	08 95       	ret

0000262e <SD_writeSingleBlock>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_writeSingleBlock(unsigned long startBlock)
{
    262e:	cf 93       	push	r28
    2630:	df 93       	push	r29
    2632:	ab 01       	movw	r20, r22
    2634:	bc 01       	movw	r22, r24
unsigned char response;
unsigned int i, retry=0;

 response = SD_sendCommand(WRITE_SINGLE_BLOCK, startBlock); //write a Block command
    2636:	88 e1       	ldi	r24, 0x18	; 24
    2638:	0e 94 78 12 	call	0x24f0	; 0x24f0 <SD_sendCommand>
  
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)
    263c:	88 23       	and	r24, r24
    263e:	11 f0       	breq	.+4      	; 0x2644 <SD_writeSingleBlock+0x16>
    2640:	98 2f       	mov	r25, r24
    2642:	3f c0       	rjmp	.+126    	; 0x26c2 <SD_writeSingleBlock+0x94>

SD_CS_ASSERT;
    2644:	c4 98       	cbi	0x18, 4	; 24

SPI_transmit(0xfe);     //Send start block token 0xfe (0x11111110)
    2646:	8e ef       	ldi	r24, 0xFE	; 254
    2648:	0e 94 20 14 	call	0x2840	; 0x2840 <SPI_transmit>
    264c:	c0 e0       	ldi	r28, 0x00	; 0
    264e:	d0 e0       	ldi	r29, 0x00	; 0

for(i=0; i<512; i++)    //send 512 bytes data
  SPI_transmit(buffer[i]);
    2650:	fe 01       	movw	r30, r28
    2652:	eb 55       	subi	r30, 0x5B	; 91
    2654:	ff 4f       	sbci	r31, 0xFF	; 255
    2656:	80 81       	ld	r24, Z
    2658:	0e 94 20 14 	call	0x2840	; 0x2840 <SPI_transmit>

SD_CS_ASSERT;

SPI_transmit(0xfe);     //Send start block token 0xfe (0x11111110)

for(i=0; i<512; i++)    //send 512 bytes data
    265c:	21 96       	adiw	r28, 0x01	; 1
    265e:	82 e0       	ldi	r24, 0x02	; 2
    2660:	c0 30       	cpi	r28, 0x00	; 0
    2662:	d8 07       	cpc	r29, r24
    2664:	a9 f7       	brne	.-22     	; 0x2650 <SD_writeSingleBlock+0x22>
  SPI_transmit(buffer[i]);

SPI_transmit(0xff);     //transmit dummy CRC (16-bit), CRC is ignored here
    2666:	8f ef       	ldi	r24, 0xFF	; 255
    2668:	0e 94 20 14 	call	0x2840	; 0x2840 <SPI_transmit>
SPI_transmit(0xff);
    266c:	8f ef       	ldi	r24, 0xFF	; 255
    266e:	0e 94 20 14 	call	0x2840	; 0x2840 <SPI_transmit>

response = SPI_receive();
    2672:	0e 94 25 14 	call	0x284a	; 0x284a <SPI_receive>
    2676:	98 2f       	mov	r25, r24

if( (response & 0x1f) != 0x05) //response= 0xXXX0AAA1 ; AAA='010' - data accepted
    2678:	8f 71       	andi	r24, 0x1F	; 31
    267a:	85 30       	cpi	r24, 0x05	; 5
    267c:	41 f0       	breq	.+16     	; 0x268e <SD_writeSingleBlock+0x60>
{                              //AAA='101'-data rejected due to CRC error
  SD_CS_DEASSERT;              //AAA='110'-data rejected due to write error
    267e:	c4 9a       	sbi	0x18, 4	; 24
    2680:	20 c0       	rjmp	.+64     	; 0x26c2 <SD_writeSingleBlock+0x94>
  return response;
}

while(!SPI_receive()) //wait for SD card to complete writing and get idle
if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
    2682:	8f ef       	ldi	r24, 0xFF	; 255
    2684:	cf 3f       	cpi	r28, 0xFF	; 255
    2686:	d8 07       	cpc	r29, r24
    2688:	91 f0       	breq	.+36     	; 0x26ae <SD_writeSingleBlock+0x80>
    268a:	21 96       	adiw	r28, 0x01	; 1
    268c:	02 c0       	rjmp	.+4      	; 0x2692 <SD_writeSingleBlock+0x64>
    268e:	c0 e0       	ldi	r28, 0x00	; 0
    2690:	d0 e0       	ldi	r29, 0x00	; 0
{                              //AAA='101'-data rejected due to CRC error
  SD_CS_DEASSERT;              //AAA='110'-data rejected due to write error
  return response;
}

while(!SPI_receive()) //wait for SD card to complete writing and get idle
    2692:	0e 94 25 14 	call	0x284a	; 0x284a <SPI_receive>
    2696:	88 23       	and	r24, r24
    2698:	a1 f3       	breq	.-24     	; 0x2682 <SD_writeSingleBlock+0x54>
if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}

SD_CS_DEASSERT;
    269a:	c4 9a       	sbi	0x18, 4	; 24
SPI_transmit(0xff);   //just spend 8 clock cycle delay before reasserting the CS line
    269c:	8f ef       	ldi	r24, 0xFF	; 255
    269e:	0e 94 20 14 	call	0x2840	; 0x2840 <SPI_transmit>
SD_CS_ASSERT;         //re-asserting the CS line to verify if card is still busy
    26a2:	c4 98       	cbi	0x18, 4	; 24
    26a4:	08 c0       	rjmp	.+16     	; 0x26b6 <SD_writeSingleBlock+0x88>

while(!SPI_receive()) //wait for SD card to complete writing and get idle
   if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
    26a6:	8f ef       	ldi	r24, 0xFF	; 255
    26a8:	cf 3f       	cpi	r28, 0xFF	; 255
    26aa:	d8 07       	cpc	r29, r24
    26ac:	19 f4       	brne	.+6      	; 0x26b4 <SD_writeSingleBlock+0x86>
    26ae:	c4 9a       	sbi	0x18, 4	; 24
    26b0:	91 e0       	ldi	r25, 0x01	; 1
    26b2:	07 c0       	rjmp	.+14     	; 0x26c2 <SD_writeSingleBlock+0x94>
    26b4:	21 96       	adiw	r28, 0x01	; 1

SD_CS_DEASSERT;
SPI_transmit(0xff);   //just spend 8 clock cycle delay before reasserting the CS line
SD_CS_ASSERT;         //re-asserting the CS line to verify if card is still busy

while(!SPI_receive()) //wait for SD card to complete writing and get idle
    26b6:	0e 94 25 14 	call	0x284a	; 0x284a <SPI_receive>
    26ba:	88 23       	and	r24, r24
    26bc:	a1 f3       	breq	.-24     	; 0x26a6 <SD_writeSingleBlock+0x78>
   if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
SD_CS_DEASSERT;
    26be:	c4 9a       	sbi	0x18, 4	; 24
    26c0:	90 e0       	ldi	r25, 0x00	; 0

return 0;
}
    26c2:	89 2f       	mov	r24, r25
    26c4:	df 91       	pop	r29
    26c6:	cf 91       	pop	r28
    26c8:	08 95       	ret

000026ca <SD_readSingleBlock>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_readSingleBlock(unsigned long startBlock)
{
    26ca:	1f 93       	push	r17
    26cc:	cf 93       	push	r28
    26ce:	df 93       	push	r29
    26d0:	ab 01       	movw	r20, r22
    26d2:	bc 01       	movw	r22, r24
unsigned char response;
unsigned int i, retry=0;

 response = SD_sendCommand(READ_SINGLE_BLOCK, startBlock); //read a Block command
    26d4:	81 e1       	ldi	r24, 0x11	; 17
    26d6:	0e 94 78 12 	call	0x24f0	; 0x24f0 <SD_sendCommand>
    26da:	18 2f       	mov	r17, r24
 
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)
    26dc:	88 23       	and	r24, r24
    26de:	09 f5       	brne	.+66     	; 0x2722 <SD_readSingleBlock+0x58>

SD_CS_ASSERT;
    26e0:	c4 98       	cbi	0x18, 4	; 24
    26e2:	c0 e0       	ldi	r28, 0x00	; 0
    26e4:	d0 e0       	ldi	r29, 0x00	; 0
    26e6:	05 c0       	rjmp	.+10     	; 0x26f2 <SD_readSingleBlock+0x28>

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
    26e8:	21 97       	sbiw	r28, 0x01	; 1
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out
    26ea:	19 f4       	brne	.+6      	; 0x26f2 <SD_readSingleBlock+0x28>
    26ec:	c4 9a       	sbi	0x18, 4	; 24
    26ee:	11 e0       	ldi	r17, 0x01	; 1
    26f0:	18 c0       	rjmp	.+48     	; 0x2722 <SD_readSingleBlock+0x58>
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)

SD_CS_ASSERT;

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
    26f2:	0e 94 25 14 	call	0x284a	; 0x284a <SPI_receive>
    26f6:	8e 3f       	cpi	r24, 0xFE	; 254
    26f8:	b9 f7       	brne	.-18     	; 0x26e8 <SD_readSingleBlock+0x1e>
    26fa:	c0 e0       	ldi	r28, 0x00	; 0
    26fc:	d0 e0       	ldi	r29, 0x00	; 0
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out

for(i=0; i<512; i++) //read 512 bytes
  buffer[i] = SPI_receive();
    26fe:	0e 94 25 14 	call	0x284a	; 0x284a <SPI_receive>
    2702:	fe 01       	movw	r30, r28
    2704:	eb 55       	subi	r30, 0x5B	; 91
    2706:	ff 4f       	sbci	r31, 0xFF	; 255
    2708:	80 83       	st	Z, r24

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out

for(i=0; i<512; i++) //read 512 bytes
    270a:	21 96       	adiw	r28, 0x01	; 1
    270c:	82 e0       	ldi	r24, 0x02	; 2
    270e:	c0 30       	cpi	r28, 0x00	; 0
    2710:	d8 07       	cpc	r29, r24
    2712:	a9 f7       	brne	.-22     	; 0x26fe <SD_readSingleBlock+0x34>
  buffer[i] = SPI_receive();

SPI_receive(); //receive incoming CRC (16-bit), CRC is ignored here
    2714:	0e 94 25 14 	call	0x284a	; 0x284a <SPI_receive>
SPI_receive();
    2718:	0e 94 25 14 	call	0x284a	; 0x284a <SPI_receive>

SPI_receive(); //extra 8 clock pulses
    271c:	0e 94 25 14 	call	0x284a	; 0x284a <SPI_receive>
SD_CS_DEASSERT;
    2720:	c4 9a       	sbi	0x18, 4	; 24

return 0;
}
    2722:	81 2f       	mov	r24, r17
    2724:	df 91       	pop	r29
    2726:	cf 91       	pop	r28
    2728:	1f 91       	pop	r17
    272a:	08 95       	ret

0000272c <SD_init>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_init(void)
{
    272c:	1f 93       	push	r17
    272e:	cf 93       	push	r28
    2730:	df 93       	push	r29
    2732:	10 e0       	ldi	r17, 0x00	; 0
unsigned char i, response, SD_version;
unsigned int retry=0 ;

 for(i=0;i<10;i++)
      SPI_transmit(0xff);   //80 clock pulses spent before sending the first command
    2734:	8f ef       	ldi	r24, 0xFF	; 255
    2736:	0e 94 20 14 	call	0x2840	; 0x2840 <SPI_transmit>
unsigned char SD_init(void)
{
unsigned char i, response, SD_version;
unsigned int retry=0 ;

 for(i=0;i<10;i++)
    273a:	1f 5f       	subi	r17, 0xFF	; 255
    273c:	1a 30       	cpi	r17, 0x0A	; 10
    273e:	d1 f7       	brne	.-12     	; 0x2734 <SD_init+0x8>
      SPI_transmit(0xff);   //80 clock pulses spent before sending the first command

SD_CS_ASSERT;
    2740:	c4 98       	cbi	0x18, 4	; 24
    2742:	c0 e0       	ldi	r28, 0x00	; 0
    2744:	d0 e0       	ldi	r29, 0x00	; 0
do
{
  
   response = SD_sendCommand(GO_IDLE_STATE, 0); //send 'reset & go idle' command
    2746:	80 e0       	ldi	r24, 0x00	; 0
    2748:	40 e0       	ldi	r20, 0x00	; 0
    274a:	50 e0       	ldi	r21, 0x00	; 0
    274c:	60 e0       	ldi	r22, 0x00	; 0
    274e:	70 e0       	ldi	r23, 0x00	; 0
    2750:	0e 94 78 12 	call	0x24f0	; 0x24f0 <SD_sendCommand>
   retry++;
    2754:	21 96       	adiw	r28, 0x01	; 1
   if(retry>0x20) 
    2756:	c1 32       	cpi	r28, 0x21	; 33
    2758:	d1 05       	cpc	r29, r1
    275a:	11 f4       	brne	.+4      	; 0x2760 <SD_init+0x34>
    275c:	81 e0       	ldi	r24, 0x01	; 1
    275e:	68 c0       	rjmp	.+208    	; 0x2830 <SD_init+0x104>
   	  return 1;   //time out, card not detected
   
} while(response != 0x01);
    2760:	81 30       	cpi	r24, 0x01	; 1
    2762:	89 f7       	brne	.-30     	; 0x2746 <SD_init+0x1a>

SD_CS_DEASSERT;
    2764:	c4 9a       	sbi	0x18, 4	; 24
SPI_transmit (0xff);
    2766:	8f ef       	ldi	r24, 0xFF	; 255
    2768:	0e 94 20 14 	call	0x2840	; 0x2840 <SPI_transmit>
SPI_transmit (0xff);
    276c:	8f ef       	ldi	r24, 0xFF	; 255
    276e:	0e 94 20 14 	call	0x2840	; 0x2840 <SPI_transmit>
    2772:	c0 e0       	ldi	r28, 0x00	; 0
    2774:	d0 e0       	ldi	r29, 0x00	; 0

SD_version = 2; //default set to SD compliance with ver2.x; 
				//this may change after checking the next command
do
{
response = SD_sendCommand(SEND_IF_COND,0x000001AA); //Check power supply status, mendatory for SDHC card
    2776:	88 e0       	ldi	r24, 0x08	; 8
    2778:	4a ea       	ldi	r20, 0xAA	; 170
    277a:	51 e0       	ldi	r21, 0x01	; 1
    277c:	60 e0       	ldi	r22, 0x00	; 0
    277e:	70 e0       	ldi	r23, 0x00	; 0
    2780:	0e 94 78 12 	call	0x24f0	; 0x24f0 <SD_sendCommand>
retry++;
    2784:	21 96       	adiw	r28, 0x01	; 1
if(retry>0xfe) 
    2786:	cf 3f       	cpi	r28, 0xFF	; 255
    2788:	d1 05       	cpc	r29, r1
    278a:	59 f4       	brne	.+22     	; 0x27a2 <SD_init+0x76>
   {
	  TX_NEWLINE;
    278c:	8d e0       	ldi	r24, 0x0D	; 13
    278e:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    2792:	8a e0       	ldi	r24, 0x0A	; 10
    2794:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
	  SD_version = 1;
	  cardType = 1;
    2798:	81 e0       	ldi	r24, 0x01	; 1
    279a:	80 93 b6 02 	sts	0x02B6, r24
    279e:	11 e0       	ldi	r17, 0x01	; 1
    27a0:	03 c0       	rjmp	.+6      	; 0x27a8 <SD_init+0x7c>
	  break;
   } //time out

}while(response != 0x01);
    27a2:	81 30       	cpi	r24, 0x01	; 1
    27a4:	41 f7       	brne	.-48     	; 0x2776 <SD_init+0x4a>
    27a6:	12 e0       	ldi	r17, 0x02	; 2
    27a8:	c0 e0       	ldi	r28, 0x00	; 0
    27aa:	d0 e0       	ldi	r29, 0x00	; 0

retry = 0;

do
{
response = SD_sendCommand(APP_CMD,0); //CMD55, must be sent before sending any ACMD command
    27ac:	87 e3       	ldi	r24, 0x37	; 55
    27ae:	40 e0       	ldi	r20, 0x00	; 0
    27b0:	50 e0       	ldi	r21, 0x00	; 0
    27b2:	60 e0       	ldi	r22, 0x00	; 0
    27b4:	70 e0       	ldi	r23, 0x00	; 0
    27b6:	0e 94 78 12 	call	0x24f0	; 0x24f0 <SD_sendCommand>
response = SD_sendCommand(SD_SEND_OP_COND,0x40000000); //ACMD41
    27ba:	89 e2       	ldi	r24, 0x29	; 41
    27bc:	40 e0       	ldi	r20, 0x00	; 0
    27be:	50 e0       	ldi	r21, 0x00	; 0
    27c0:	60 e0       	ldi	r22, 0x00	; 0
    27c2:	70 e4       	ldi	r23, 0x40	; 64
    27c4:	0e 94 78 12 	call	0x24f0	; 0x24f0 <SD_sendCommand>

retry++;
    27c8:	21 96       	adiw	r28, 0x01	; 1
if(retry>0xfe) 
    27ca:	cf 3f       	cpi	r28, 0xFF	; 255
    27cc:	d1 05       	cpc	r29, r1
    27ce:	41 f4       	brne	.+16     	; 0x27e0 <SD_init+0xb4>
   {
      TX_NEWLINE;
    27d0:	8d e0       	ldi	r24, 0x0D	; 13
    27d2:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    27d6:	8a e0       	ldi	r24, 0x0A	; 10
    27d8:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    27dc:	82 e0       	ldi	r24, 0x02	; 2
    27de:	28 c0       	rjmp	.+80     	; 0x2830 <SD_init+0x104>
	  return 2;  //time out, card initialization failed
   } 

}while(response != 0x00);
    27e0:	88 23       	and	r24, r24
    27e2:	21 f7       	brne	.-56     	; 0x27ac <SD_init+0x80>


retry = 0;
SDHC_flag = 0;
    27e4:	10 92 ab 02 	sts	0x02AB, r1

if (SD_version == 2)
    27e8:	12 30       	cpi	r17, 0x02	; 2
    27ea:	11 f5       	brne	.+68     	; 0x2830 <SD_init+0x104>
    27ec:	c0 e0       	ldi	r28, 0x00	; 0
    27ee:	d0 e0       	ldi	r29, 0x00	; 0
{ 
   do
   {
	 response = SD_sendCommand(READ_OCR,0);
    27f0:	8a e3       	ldi	r24, 0x3A	; 58
    27f2:	40 e0       	ldi	r20, 0x00	; 0
    27f4:	50 e0       	ldi	r21, 0x00	; 0
    27f6:	60 e0       	ldi	r22, 0x00	; 0
    27f8:	70 e0       	ldi	r23, 0x00	; 0
    27fa:	0e 94 78 12 	call	0x24f0	; 0x24f0 <SD_sendCommand>
	 retry++;
    27fe:	21 96       	adiw	r28, 0x01	; 1
	 if(retry>0xfe) 
    2800:	cf 3f       	cpi	r28, 0xFF	; 255
    2802:	d1 05       	cpc	r29, r1
    2804:	49 f4       	brne	.+18     	; 0x2818 <SD_init+0xec>
     {
       TX_NEWLINE;
    2806:	8d e0       	ldi	r24, 0x0D	; 13
    2808:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    280c:	8a e0       	ldi	r24, 0x0A	; 10
    280e:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
	   cardType = 0;
    2812:	10 92 b6 02 	sts	0x02B6, r1
    2816:	02 c0       	rjmp	.+4      	; 0x281c <SD_init+0xf0>
	   break;
     } //time out

   }while(response != 0x00);
    2818:	88 23       	and	r24, r24
    281a:	51 f7       	brne	.-44     	; 0x27f0 <SD_init+0xc4>

   if(SDHC_flag == 1) cardType = 2;
    281c:	80 91 ab 02 	lds	r24, 0x02AB
    2820:	81 30       	cpi	r24, 0x01	; 1
    2822:	11 f4       	brne	.+4      	; 0x2828 <SD_init+0xfc>
    2824:	82 e0       	ldi	r24, 0x02	; 2
    2826:	01 c0       	rjmp	.+2      	; 0x282a <SD_init+0xfe>
   else cardType = 3;
    2828:	83 e0       	ldi	r24, 0x03	; 3
    282a:	80 93 b6 02 	sts	0x02B6, r24
    282e:	80 e0       	ldi	r24, 0x00	; 0
//SD_sendCommand(CRC_ON_OFF, OFF); //disable CRC; deafault - CRC disabled in SPI mode
//SD_sendCommand(SET_BLOCK_LEN, 512); //set block size to 512; default size is 512


return 0; //successful return
}
    2830:	df 91       	pop	r29
    2832:	cf 91       	pop	r28
    2834:	1f 91       	pop	r17
    2836:	08 95       	ret

00002838 <spi_init>:

//SPI initialize for SD card
//clock rate: 125Khz
void spi_init(void)
{
SPCR = 0x52; //setup SPI: Master mode, MSB first, SCK phase low, SCK idle low
    2838:	82 e5       	ldi	r24, 0x52	; 82
    283a:	8d b9       	out	0x0d, r24	; 13
SPSR = 0x00;
    283c:	1e b8       	out	0x0e, r1	; 14
}
    283e:	08 95       	ret

00002840 <SPI_transmit>:

unsigned char SPI_transmit(unsigned char data)
{
// Start transmission
SPDR = data;
    2840:	8f b9       	out	0x0f, r24	; 15

// Wait for transmission complete
while(!(SPSR & (1<<SPIF)));
    2842:	77 9b       	sbis	0x0e, 7	; 14
    2844:	fe cf       	rjmp	.-4      	; 0x2842 <SPI_transmit+0x2>
data = SPDR;
    2846:	8f b1       	in	r24, 0x0f	; 15

return(data);
}
    2848:	08 95       	ret

0000284a <SPI_receive>:
unsigned char SPI_receive(void)
{
unsigned char data;
// Wait for reception complete

SPDR = 0xff;
    284a:	8f ef       	ldi	r24, 0xFF	; 255
    284c:	8f b9       	out	0x0f, r24	; 15
while(!(SPSR & (1<<SPIF)));
    284e:	77 9b       	sbis	0x0e, 7	; 14
    2850:	fe cf       	rjmp	.-4      	; 0x284e <SPI_receive+0x4>
data = SPDR;
    2852:	8f b1       	in	r24, 0x0f	; 15

// Return data register
return data;
}
    2854:	08 95       	ret

00002856 <uart0_init>:
//char size: 8 bit
//parity: Disabled
//**************************************************
void uart0_init(void)
{
 UCSRB = 0x00; //disable while setting baud rate
    2856:	1a b8       	out	0x0a, r1	; 10
 UCSRA = 0x00;
    2858:	1b b8       	out	0x0b, r1	; 11
 UCSRC = (1 << URSEL) | 0x06;
    285a:	86 e8       	ldi	r24, 0x86	; 134
    285c:	80 bd       	out	0x20, r24	; 32
 UBRRL = 0x19; //set baud rate lo
    285e:	89 e1       	ldi	r24, 0x19	; 25
    2860:	89 b9       	out	0x09, r24	; 9
 UBRRH = 0x00; //set baud rate hi
    2862:	10 bc       	out	0x20, r1	; 32
 UCSRB = 0x18;
    2864:	88 e1       	ldi	r24, 0x18	; 24
    2866:	8a b9       	out	0x0a, r24	; 10
}
    2868:	08 95       	ret

0000286a <receiveByte>:
//*************************************************
unsigned char receiveByte( void )
{
	unsigned char data, status;
	
	while(!(UCSRA & (1<<RXC))); 	// Wait for incomming data
    286a:	5f 9b       	sbis	0x0b, 7	; 11
    286c:	fe cf       	rjmp	.-4      	; 0x286a <receiveByte>
	
	status = UCSRA;
    286e:	8b b1       	in	r24, 0x0b	; 11
	data = UDR;
    2870:	8c b1       	in	r24, 0x0c	; 12
	
	return(data);
}
    2872:	08 95       	ret

00002874 <transmitByte>:
//***************************************************
//Function to transmit a single byte
//***************************************************
void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
    2874:	5d 9b       	sbis	0x0b, 5	; 11
    2876:	fe cf       	rjmp	.-4      	; 0x2874 <transmitByte>
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
    2878:	8c b9       	out	0x0c, r24	; 12
}
    287a:	08 95       	ret

0000287c <transmitString_F>:

//***************************************************
//Function to transmit a string in Flash
//***************************************************
void transmitString_F(char* string)
{
    287c:	fc 01       	movw	r30, r24
    287e:	04 c0       	rjmp	.+8      	; 0x2888 <transmitString_F+0xc>
//***************************************************
//Function to transmit a single byte
//***************************************************
void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
    2880:	5d 9b       	sbis	0x0b, 5	; 11
    2882:	fe cf       	rjmp	.-4      	; 0x2880 <transmitString_F+0x4>
//Function to transmit a string in Flash
//***************************************************
void transmitString_F(char* string)
{
  while (pgm_read_byte(&(*string)))
   transmitByte(pgm_read_byte(&(*string++)));
    2884:	31 96       	adiw	r30, 0x01	; 1
//***************************************************
void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
    2886:	8c b9       	out	0x0c, r24	; 12
//***************************************************
//Function to transmit a string in Flash
//***************************************************
void transmitString_F(char* string)
{
  while (pgm_read_byte(&(*string)))
    2888:	84 91       	lpm	r24, Z+
    288a:	88 23       	and	r24, r24
    288c:	c9 f7       	brne	.-14     	; 0x2880 <transmitString_F+0x4>
   transmitByte(pgm_read_byte(&(*string++)));
}
    288e:	08 95       	ret

00002890 <transmitString>:

//***************************************************
//Function to transmit a string in RAM
//***************************************************
void transmitString(unsigned char* string)
{
    2890:	fc 01       	movw	r30, r24
    2892:	04 c0       	rjmp	.+8      	; 0x289c <transmitString+0xc>
//***************************************************
//Function to transmit a single byte
//***************************************************
void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
    2894:	5d 9b       	sbis	0x0b, 5	; 11
    2896:	fe cf       	rjmp	.-4      	; 0x2894 <transmitString+0x4>
//Function to transmit a string in RAM
//***************************************************
void transmitString(unsigned char* string)
{
  while (*string)
   transmitByte(*string++);
    2898:	31 96       	adiw	r30, 0x01	; 1
//***************************************************
void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
    289a:	8c b9       	out	0x0c, r24	; 12
//***************************************************
//Function to transmit a string in RAM
//***************************************************
void transmitString(unsigned char* string)
{
  while (*string)
    289c:	80 81       	ld	r24, Z
    289e:	88 23       	and	r24, r24
    28a0:	c9 f7       	brne	.-14     	; 0x2894 <transmitString+0x4>
   transmitByte(*string++);
}
    28a2:	08 95       	ret

000028a4 <transmitHex>:
//Function to transmit hex format data
//first argument indicates type: CHAR, INT or LONG
//Second argument is the data to be displayed
//***************************************************
void transmitHex( unsigned char dataType, unsigned long data )
{
    28a4:	df 93       	push	r29
    28a6:	cf 93       	push	r28
    28a8:	cd b7       	in	r28, 0x3d	; 61
    28aa:	de b7       	in	r29, 0x3e	; 62
    28ac:	2b 97       	sbiw	r28, 0x0b	; 11
    28ae:	0f b6       	in	r0, 0x3f	; 63
    28b0:	f8 94       	cli
    28b2:	de bf       	out	0x3e, r29	; 62
    28b4:	0f be       	out	0x3f, r0	; 63
    28b6:	cd bf       	out	0x3d, r28	; 61
unsigned char count, i, temp;
unsigned char dataString[] = "0x        ";

if (dataType == CHAR) count = 2;
if (dataType == INT) count = 4;
    28b8:	81 30       	cpi	r24, 0x01	; 1
    28ba:	11 f4       	brne	.+4      	; 0x28c0 <transmitHex+0x1c>
    28bc:	94 e0       	ldi	r25, 0x04	; 4
    28be:	05 c0       	rjmp	.+10     	; 0x28ca <transmitHex+0x26>
if (dataType == LONG) count = 8;
    28c0:	82 30       	cpi	r24, 0x02	; 2
    28c2:	11 f4       	brne	.+4      	; 0x28c8 <transmitHex+0x24>
    28c4:	98 e0       	ldi	r25, 0x08	; 8
    28c6:	01 c0       	rjmp	.+2      	; 0x28ca <transmitHex+0x26>
    28c8:	92 e0       	ldi	r25, 0x02	; 2
//Second argument is the data to be displayed
//***************************************************
void transmitHex( unsigned char dataType, unsigned long data )
{
unsigned char count, i, temp;
unsigned char dataString[] = "0x        ";
    28ca:	de 01       	movw	r26, r28
    28cc:	11 96       	adiw	r26, 0x01	; 1
    28ce:	e4 e7       	ldi	r30, 0x74	; 116
    28d0:	f0 e0       	ldi	r31, 0x00	; 0
    28d2:	8b e0       	ldi	r24, 0x0B	; 11
    28d4:	01 90       	ld	r0, Z+
    28d6:	0d 92       	st	X+, r0
    28d8:	81 50       	subi	r24, 0x01	; 1
    28da:	e1 f7       	brne	.-8      	; 0x28d4 <transmitHex+0x30>
    28dc:	9e 01       	movw	r18, r28
    28de:	2e 5f       	subi	r18, 0xFE	; 254
    28e0:	3f 4f       	sbci	r19, 0xFF	; 255
if (dataType == INT) count = 4;
if (dataType == LONG) count = 8;

for(i=count; i>0; i--)
{
  temp = data % 16;
    28e2:	84 2f       	mov	r24, r20
    28e4:	8f 70       	andi	r24, 0x0F	; 15
    28e6:	e9 2f       	mov	r30, r25
    28e8:	f0 e0       	ldi	r31, 0x00	; 0
  if((temp>=0) && (temp<10)) dataString [i+1] = temp + 0x30;
    28ea:	8a 30       	cpi	r24, 0x0A	; 10
    28ec:	20 f4       	brcc	.+8      	; 0x28f6 <transmitHex+0x52>
    28ee:	e2 0f       	add	r30, r18
    28f0:	f3 1f       	adc	r31, r19
    28f2:	80 5d       	subi	r24, 0xD0	; 208
    28f4:	03 c0       	rjmp	.+6      	; 0x28fc <transmitHex+0x58>
  else dataString [i+1] = (temp - 10) + 0x41;
    28f6:	e2 0f       	add	r30, r18
    28f8:	f3 1f       	adc	r31, r19
    28fa:	89 5c       	subi	r24, 0xC9	; 201
    28fc:	80 83       	st	Z, r24

if (dataType == CHAR) count = 2;
if (dataType == INT) count = 4;
if (dataType == LONG) count = 8;

for(i=count; i>0; i--)
    28fe:	91 50       	subi	r25, 0x01	; 1
    2900:	41 f0       	breq	.+16     	; 0x2912 <transmitHex+0x6e>
{
  temp = data % 16;
  if((temp>=0) && (temp<10)) dataString [i+1] = temp + 0x30;
  else dataString [i+1] = (temp - 10) + 0x41;

  data = data/16;
    2902:	84 e0       	ldi	r24, 0x04	; 4
    2904:	76 95       	lsr	r23
    2906:	67 95       	ror	r22
    2908:	57 95       	ror	r21
    290a:	47 95       	ror	r20
    290c:	8a 95       	dec	r24
    290e:	d1 f7       	brne	.-12     	; 0x2904 <transmitHex+0x60>
    2910:	e8 cf       	rjmp	.-48     	; 0x28e2 <transmitHex+0x3e>
}

transmitString (dataString);
    2912:	ce 01       	movw	r24, r28
    2914:	01 96       	adiw	r24, 0x01	; 1
    2916:	0e 94 48 14 	call	0x2890	; 0x2890 <transmitString>
}
    291a:	2b 96       	adiw	r28, 0x0b	; 11
    291c:	0f b6       	in	r0, 0x3f	; 63
    291e:	f8 94       	cli
    2920:	de bf       	out	0x3e, r29	; 62
    2922:	0f be       	out	0x3f, r0	; 63
    2924:	cd bf       	out	0x3d, r28	; 61
    2926:	cf 91       	pop	r28
    2928:	df 91       	pop	r29
    292a:	08 95       	ret

0000292c <RTC_updateRegisters>:
//******************************************************************
//Function to update buffer rtc_register[] for next writing to RTC
//****************************************************************** 
void RTC_updateRegisters(void)
{
  SECONDS = ((time[6] & 0x07) << 4) | (time[7] & 0x0f);
    292c:	80 91 c2 02 	lds	r24, 0x02C2
    2930:	90 e0       	ldi	r25, 0x00	; 0
    2932:	87 70       	andi	r24, 0x07	; 7
    2934:	90 70       	andi	r25, 0x00	; 0
    2936:	64 e0       	ldi	r22, 0x04	; 4
    2938:	88 0f       	add	r24, r24
    293a:	99 1f       	adc	r25, r25
    293c:	6a 95       	dec	r22
    293e:	e1 f7       	brne	.-8      	; 0x2938 <RTC_updateRegisters+0xc>
    2940:	20 91 c3 02 	lds	r18, 0x02C3
    2944:	2f 70       	andi	r18, 0x0F	; 15
    2946:	28 2b       	or	r18, r24
    2948:	20 93 80 00 	sts	0x0080, r18
  MINUTES = ((time[3] & 0x07) << 4) | (time[4] & 0x0f);
    294c:	80 91 bf 02 	lds	r24, 0x02BF
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	87 70       	andi	r24, 0x07	; 7
    2954:	90 70       	andi	r25, 0x00	; 0
    2956:	54 e0       	ldi	r21, 0x04	; 4
    2958:	88 0f       	add	r24, r24
    295a:	99 1f       	adc	r25, r25
    295c:	5a 95       	dec	r21
    295e:	e1 f7       	brne	.-8      	; 0x2958 <RTC_updateRegisters+0x2c>
    2960:	20 91 c0 02 	lds	r18, 0x02C0
    2964:	2f 70       	andi	r18, 0x0F	; 15
    2966:	28 2b       	or	r18, r24
    2968:	20 93 81 00 	sts	0x0081, r18
  HOURS = ((time[0] & 0x03) << 4) | (time[1] & 0x0f);  
    296c:	80 91 bc 02 	lds	r24, 0x02BC
    2970:	90 e0       	ldi	r25, 0x00	; 0
    2972:	83 70       	andi	r24, 0x03	; 3
    2974:	90 70       	andi	r25, 0x00	; 0
    2976:	44 e0       	ldi	r20, 0x04	; 4
    2978:	88 0f       	add	r24, r24
    297a:	99 1f       	adc	r25, r25
    297c:	4a 95       	dec	r20
    297e:	e1 f7       	brne	.-8      	; 0x2978 <RTC_updateRegisters+0x4c>
    2980:	20 91 bd 02 	lds	r18, 0x02BD
    2984:	2f 70       	andi	r18, 0x0F	; 15
    2986:	28 2b       	or	r18, r24
    2988:	20 93 82 00 	sts	0x0082, r18
  DAY = date[10];
    298c:	80 91 d1 02 	lds	r24, 0x02D1
    2990:	80 93 83 00 	sts	0x0083, r24
  DATE = ((date[0] & 0x03) << 4) | (date[1] & 0x0f);
    2994:	80 91 c7 02 	lds	r24, 0x02C7
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	83 70       	andi	r24, 0x03	; 3
    299c:	90 70       	andi	r25, 0x00	; 0
    299e:	34 e0       	ldi	r19, 0x04	; 4
    29a0:	88 0f       	add	r24, r24
    29a2:	99 1f       	adc	r25, r25
    29a4:	3a 95       	dec	r19
    29a6:	e1 f7       	brne	.-8      	; 0x29a0 <RTC_updateRegisters+0x74>
    29a8:	20 91 c8 02 	lds	r18, 0x02C8
    29ac:	2f 70       	andi	r18, 0x0F	; 15
    29ae:	28 2b       	or	r18, r24
    29b0:	20 93 84 00 	sts	0x0084, r18
  MONTH = ((date[3] & 0x01) << 4) | (date[4] & 0x0f);
    29b4:	80 91 ca 02 	lds	r24, 0x02CA
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	81 70       	andi	r24, 0x01	; 1
    29bc:	90 70       	andi	r25, 0x00	; 0
    29be:	24 e0       	ldi	r18, 0x04	; 4
    29c0:	88 0f       	add	r24, r24
    29c2:	99 1f       	adc	r25, r25
    29c4:	2a 95       	dec	r18
    29c6:	e1 f7       	brne	.-8      	; 0x29c0 <RTC_updateRegisters+0x94>
    29c8:	20 91 cb 02 	lds	r18, 0x02CB
    29cc:	2f 70       	andi	r18, 0x0F	; 15
    29ce:	28 2b       	or	r18, r24
    29d0:	20 93 85 00 	sts	0x0085, r18
  YEAR = ((date[8] & 0x0f) << 4) | (date[9] & 0x0f);
    29d4:	90 91 cf 02 	lds	r25, 0x02CF
    29d8:	92 95       	swap	r25
    29da:	90 7f       	andi	r25, 0xF0	; 240
    29dc:	80 91 d0 02 	lds	r24, 0x02D0
    29e0:	8f 70       	andi	r24, 0x0F	; 15
    29e2:	98 2b       	or	r25, r24
    29e4:	90 93 86 00 	sts	0x0086, r25
}  
    29e8:	08 95       	ret

000029ea <RTC_displayDay>:
//******************************************************************
//Function to get the string for day 
//****************************************************************** 
void RTC_displayDay(void)
{
  transmitString_F(PSTR("    Day: "));
    29ea:	87 e6       	ldi	r24, 0x67	; 103
    29ec:	96 e0       	ldi	r25, 0x06	; 6
    29ee:	0e 94 3e 14 	call	0x287c	; 0x287c <transmitString_F>
  
  switch(DAY)
    29f2:	80 91 83 00 	lds	r24, 0x0083
    29f6:	83 30       	cpi	r24, 0x03	; 3
    29f8:	b9 f0       	breq	.+46     	; 0x2a28 <RTC_displayDay+0x3e>
    29fa:	84 30       	cpi	r24, 0x04	; 4
    29fc:	28 f4       	brcc	.+10     	; 0x2a08 <RTC_displayDay+0x1e>
    29fe:	81 30       	cpi	r24, 0x01	; 1
    2a00:	69 f0       	breq	.+26     	; 0x2a1c <RTC_displayDay+0x32>
    2a02:	82 30       	cpi	r24, 0x02	; 2
    2a04:	70 f4       	brcc	.+28     	; 0x2a22 <RTC_displayDay+0x38>
    2a06:	07 c0       	rjmp	.+14     	; 0x2a16 <RTC_displayDay+0x2c>
    2a08:	85 30       	cpi	r24, 0x05	; 5
    2a0a:	a1 f0       	breq	.+40     	; 0x2a34 <RTC_displayDay+0x4a>
    2a0c:	85 30       	cpi	r24, 0x05	; 5
    2a0e:	78 f0       	brcs	.+30     	; 0x2a2e <RTC_displayDay+0x44>
    2a10:	86 30       	cpi	r24, 0x06	; 6
    2a12:	b1 f4       	brne	.+44     	; 0x2a40 <RTC_displayDay+0x56>
    2a14:	12 c0       	rjmp	.+36     	; 0x2a3a <RTC_displayDay+0x50>
  {
   case 0:transmitString_F(PSTR("Sunday"));
    2a16:	80 e6       	ldi	r24, 0x60	; 96
    2a18:	96 e0       	ldi	r25, 0x06	; 6
    2a1a:	14 c0       	rjmp	.+40     	; 0x2a44 <RTC_displayDay+0x5a>
          break; 
   case 1:transmitString_F(PSTR("Monday"));
    2a1c:	89 e5       	ldi	r24, 0x59	; 89
    2a1e:	96 e0       	ldi	r25, 0x06	; 6
    2a20:	11 c0       	rjmp	.+34     	; 0x2a44 <RTC_displayDay+0x5a>
          break; 
   case 2:transmitString_F(PSTR("Tuesday"));
    2a22:	81 e5       	ldi	r24, 0x51	; 81
    2a24:	96 e0       	ldi	r25, 0x06	; 6
    2a26:	0e c0       	rjmp	.+28     	; 0x2a44 <RTC_displayDay+0x5a>
          break; 
   case 3:transmitString_F(PSTR("Wednesday"));
    2a28:	87 e4       	ldi	r24, 0x47	; 71
    2a2a:	96 e0       	ldi	r25, 0x06	; 6
    2a2c:	0b c0       	rjmp	.+22     	; 0x2a44 <RTC_displayDay+0x5a>
          break; 
   case 4:transmitString_F(PSTR("Thursday"));
    2a2e:	8e e3       	ldi	r24, 0x3E	; 62
    2a30:	96 e0       	ldi	r25, 0x06	; 6
    2a32:	08 c0       	rjmp	.+16     	; 0x2a44 <RTC_displayDay+0x5a>
          break; 		  
   case 5:transmitString_F(PSTR("Friday"));
    2a34:	87 e3       	ldi	r24, 0x37	; 55
    2a36:	96 e0       	ldi	r25, 0x06	; 6
    2a38:	05 c0       	rjmp	.+10     	; 0x2a44 <RTC_displayDay+0x5a>
          break; 		  
   case 6:transmitString_F(PSTR("Saturday"));
    2a3a:	8e e2       	ldi	r24, 0x2E	; 46
    2a3c:	96 e0       	ldi	r25, 0x06	; 6
    2a3e:	02 c0       	rjmp	.+4      	; 0x2a44 <RTC_displayDay+0x5a>
          break; 
   default:	transmitString_F(PSTR("Unknown"));  
    2a40:	86 e2       	ldi	r24, 0x26	; 38
    2a42:	96 e0       	ldi	r25, 0x06	; 6
    2a44:	0e 94 3e 14 	call	0x287c	; 0x287c <transmitString_F>
    2a48:	08 95       	ret

00002a4a <RTC_writeDate>:
//******************************************************************   
unsigned char RTC_writeDate(void)
{
  unsigned char errorStatus, i;
  
   errorStatus = i2c_start();
    2a4a:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <i2c_start>
   if(errorStatus == 1)
    2a4e:	81 30       	cpi	r24, 0x01	; 1
    2a50:	11 f1       	breq	.+68     	; 0x2a96 <RTC_writeDate+0x4c>
     //transmitString_F(PSTR("RTC start1 failed.."));
   	 i2c_stop();
	 return(1);
   } 
   
   errorStatus = i2c_sendAddress(DS1307_W);
    2a52:	80 ed       	ldi	r24, 0xD0	; 208
    2a54:	0e 94 76 18 	call	0x30ec	; 0x30ec <i2c_sendAddress>
   
   if(errorStatus == 1)
    2a58:	81 30       	cpi	r24, 0x01	; 1
    2a5a:	e9 f0       	breq	.+58     	; 0x2a96 <RTC_writeDate+0x4c>
     //transmitString_F(PSTR("RTC sendAddress1 failed.."));
	 i2c_stop();
	 return(1);
   } 
   
   errorStatus = i2c_sendData(0x03);
    2a5c:	83 e0       	ldi	r24, 0x03	; 3
    2a5e:	0e 94 8d 18 	call	0x311a	; 0x311a <i2c_sendData>
   if(errorStatus == 1)
    2a62:	81 30       	cpi	r24, 0x01	; 1
    2a64:	c1 f0       	breq	.+48     	; 0x2a96 <RTC_writeDate+0x4c>
	 return(1);
   } 

    for(i=3;i<7;i++)
    {
	  errorStatus = i2c_sendData(rtc_register[i]);  
    2a66:	80 91 83 00 	lds	r24, 0x0083
    2a6a:	0e 94 8d 18 	call	0x311a	; 0x311a <i2c_sendData>
   	  if(errorStatus == 1)
    2a6e:	81 30       	cpi	r24, 0x01	; 1
    2a70:	91 f0       	breq	.+36     	; 0x2a96 <RTC_writeDate+0x4c>
	 return(1);
   } 

    for(i=3;i<7;i++)
    {
	  errorStatus = i2c_sendData(rtc_register[i]);  
    2a72:	80 91 84 00 	lds	r24, 0x0084
    2a76:	0e 94 8d 18 	call	0x311a	; 0x311a <i2c_sendData>
   	  if(errorStatus == 1)
    2a7a:	81 30       	cpi	r24, 0x01	; 1
    2a7c:	61 f0       	breq	.+24     	; 0x2a96 <RTC_writeDate+0x4c>
	 return(1);
   } 

    for(i=3;i<7;i++)
    {
	  errorStatus = i2c_sendData(rtc_register[i]);  
    2a7e:	80 91 85 00 	lds	r24, 0x0085
    2a82:	0e 94 8d 18 	call	0x311a	; 0x311a <i2c_sendData>
   	  if(errorStatus == 1)
    2a86:	81 30       	cpi	r24, 0x01	; 1
    2a88:	31 f0       	breq	.+12     	; 0x2a96 <RTC_writeDate+0x4c>
	 return(1);
   } 

    for(i=3;i<7;i++)
    {
	  errorStatus = i2c_sendData(rtc_register[i]);  
    2a8a:	80 91 86 00 	lds	r24, 0x0086
    2a8e:	0e 94 8d 18 	call	0x311a	; 0x311a <i2c_sendData>
   	  if(errorStatus == 1)
    2a92:	81 30       	cpi	r24, 0x01	; 1
    2a94:	21 f4       	brne	.+8      	; 0x2a9e <RTC_writeDate+0x54>
   	  {
       		//transmitString_F(PSTR("RTC write date failed.."));
			i2c_stop();
    2a96:	0e 94 b5 18 	call	0x316a	; 0x316a <i2c_stop>
    2a9a:	81 e0       	ldi	r24, 0x01	; 1
    2a9c:	08 95       	ret
	   		return(1);
   	  }
    }
	
	i2c_stop();
    2a9e:	0e 94 b5 18 	call	0x316a	; 0x316a <i2c_stop>
    2aa2:	80 e0       	ldi	r24, 0x00	; 0
	return(0);
}
    2aa4:	08 95       	ret

00002aa6 <RTC_updateDate>:
  
//******************************************************************
//Function to update RTC date by entering it at hyper terminal
//******************************************************************   
unsigned char RTC_updateDate(void)
{
    2aa6:	0f 93       	push	r16
    2aa8:	1f 93       	push	r17
  unsigned char data;
  TX_NEWLINE;
    2aaa:	8d e0       	ldi	r24, 0x0D	; 13
    2aac:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    2ab0:	8a e0       	ldi	r24, 0x0A	; 10
    2ab2:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
  transmitString_F(PSTR("Enter Date (dd/mm/yy):")); 
    2ab6:	8c ea       	ldi	r24, 0xAC	; 172
    2ab8:	95 e0       	ldi	r25, 0x05	; 5
    2aba:	0e 94 3e 14 	call	0x287c	; 0x287c <transmitString_F>
  
    data = receiveByte(); 	   				  		//receive date
    2abe:	0e 94 35 14 	call	0x286a	; 0x286a <receiveByte>
    2ac2:	18 2f       	mov	r17, r24
	transmitByte(data); 	   	  	  				
    2ac4:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
	if(data < 0x30 || data > 0x33)
    2ac8:	81 2f       	mov	r24, r17
    2aca:	80 53       	subi	r24, 0x30	; 48
    2acc:	84 30       	cpi	r24, 0x04	; 4
    2ace:	08 f0       	brcs	.+2      	; 0x2ad2 <RTC_updateDate+0x2c>
    2ad0:	a5 c0       	rjmp	.+330    	; 0x2c1c <RTC_updateDate+0x176>
	   goto DATE_ERROR;
	   
	date[0]= data;
    2ad2:	10 93 c7 02 	sts	0x02C7, r17
	 
	data = receiveByte();
    2ad6:	0e 94 35 14 	call	0x286a	; 0x286a <receiveByte>
    2ada:	18 2f       	mov	r17, r24
	transmitByte(data);
    2adc:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
	if(data < 0x30 || data > 0x39)
    2ae0:	81 2f       	mov	r24, r17
    2ae2:	80 53       	subi	r24, 0x30	; 48
    2ae4:	8a 30       	cpi	r24, 0x0A	; 10
    2ae6:	08 f0       	brcs	.+2      	; 0x2aea <RTC_updateDate+0x44>
    2ae8:	99 c0       	rjmp	.+306    	; 0x2c1c <RTC_updateDate+0x176>
	   goto DATE_ERROR;
	   
	date[1]= data;
    2aea:	10 93 c8 02 	sts	0x02C8, r17
	
	if(((date[1] & 0x0f) + ((date[0] & 0x03)*10)) > 31)
    2aee:	1f 70       	andi	r17, 0x0F	; 15
    2af0:	80 91 c7 02 	lds	r24, 0x02C7
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	83 70       	andi	r24, 0x03	; 3
    2af8:	90 70       	andi	r25, 0x00	; 0
    2afa:	9c 01       	movw	r18, r24
    2afc:	a3 e0       	ldi	r26, 0x03	; 3
    2afe:	22 0f       	add	r18, r18
    2b00:	33 1f       	adc	r19, r19
    2b02:	aa 95       	dec	r26
    2b04:	e1 f7       	brne	.-8      	; 0x2afe <RTC_updateDate+0x58>
    2b06:	88 0f       	add	r24, r24
    2b08:	99 1f       	adc	r25, r25
    2b0a:	28 0f       	add	r18, r24
    2b0c:	39 1f       	adc	r19, r25
    2b0e:	21 0f       	add	r18, r17
    2b10:	31 1d       	adc	r19, r1
    2b12:	20 32       	cpi	r18, 0x20	; 32
    2b14:	31 05       	cpc	r19, r1
    2b16:	0c f0       	brlt	.+2      	; 0x2b1a <RTC_updateDate+0x74>
    2b18:	81 c0       	rjmp	.+258    	; 0x2c1c <RTC_updateDate+0x176>
	   goto DATE_ERROR;
    transmitByte('/');
    2b1a:	8f e2       	ldi	r24, 0x2F	; 47
    2b1c:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
	
	date[2] = '/';
    2b20:	0f e2       	ldi	r16, 0x2F	; 47
    2b22:	00 93 c9 02 	sts	0x02C9, r16
	   
	
	data = receiveByte();			   			  //receive month
    2b26:	0e 94 35 14 	call	0x286a	; 0x286a <receiveByte>
    2b2a:	18 2f       	mov	r17, r24
	transmitByte(data);
    2b2c:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
	if(data < 0x30 || data > 0x31)
    2b30:	81 2f       	mov	r24, r17
    2b32:	80 53       	subi	r24, 0x30	; 48
    2b34:	82 30       	cpi	r24, 0x02	; 2
    2b36:	08 f0       	brcs	.+2      	; 0x2b3a <RTC_updateDate+0x94>
    2b38:	71 c0       	rjmp	.+226    	; 0x2c1c <RTC_updateDate+0x176>
	  goto DATE_ERROR;
	  
	date[3]= data; 
    2b3a:	10 93 ca 02 	sts	0x02CA, r17
	
	data = receiveByte();
    2b3e:	0e 94 35 14 	call	0x286a	; 0x286a <receiveByte>
    2b42:	18 2f       	mov	r17, r24
	transmitByte(data);
    2b44:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
	if(data < 0x30 || data > 0x39)
    2b48:	81 2f       	mov	r24, r17
    2b4a:	80 53       	subi	r24, 0x30	; 48
    2b4c:	8a 30       	cpi	r24, 0x0A	; 10
    2b4e:	08 f0       	brcs	.+2      	; 0x2b52 <RTC_updateDate+0xac>
    2b50:	65 c0       	rjmp	.+202    	; 0x2c1c <RTC_updateDate+0x176>
	  goto DATE_ERROR;
	  
	date[4] = data; 
    2b52:	10 93 cb 02 	sts	0x02CB, r17
	
	if(((date[4] & 0x0f) + ((date[3] & 0x03)*10)) > 12)
    2b56:	1f 70       	andi	r17, 0x0F	; 15
    2b58:	80 91 ca 02 	lds	r24, 0x02CA
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	83 70       	andi	r24, 0x03	; 3
    2b60:	90 70       	andi	r25, 0x00	; 0
    2b62:	9c 01       	movw	r18, r24
    2b64:	e3 e0       	ldi	r30, 0x03	; 3
    2b66:	22 0f       	add	r18, r18
    2b68:	33 1f       	adc	r19, r19
    2b6a:	ea 95       	dec	r30
    2b6c:	e1 f7       	brne	.-8      	; 0x2b66 <RTC_updateDate+0xc0>
    2b6e:	88 0f       	add	r24, r24
    2b70:	99 1f       	adc	r25, r25
    2b72:	28 0f       	add	r18, r24
    2b74:	39 1f       	adc	r19, r25
    2b76:	21 0f       	add	r18, r17
    2b78:	31 1d       	adc	r19, r1
    2b7a:	2d 30       	cpi	r18, 0x0D	; 13
    2b7c:	31 05       	cpc	r19, r1
    2b7e:	0c f0       	brlt	.+2      	; 0x2b82 <RTC_updateDate+0xdc>
    2b80:	4d c0       	rjmp	.+154    	; 0x2c1c <RTC_updateDate+0x176>
	   goto DATE_ERROR;
	transmitByte('/');
    2b82:	8f e2       	ldi	r24, 0x2F	; 47
    2b84:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
	   
	
	date[5] = '/';
    2b88:	00 93 cc 02 	sts	0x02CC, r16
	
	date[6] = '2'; 	   	   	  	  //year is 20xx
    2b8c:	82 e3       	ldi	r24, 0x32	; 50
    2b8e:	80 93 cd 02 	sts	0x02CD, r24
	date[7] = '0';
    2b92:	80 e3       	ldi	r24, 0x30	; 48
    2b94:	80 93 ce 02 	sts	0x02CE, r24
	
	data = receiveByte();			   			 
    2b98:	0e 94 35 14 	call	0x286a	; 0x286a <receiveByte>
    2b9c:	18 2f       	mov	r17, r24
	transmitByte(data);
    2b9e:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
	if(data < 0x30 || data > 0x39)
    2ba2:	81 2f       	mov	r24, r17
    2ba4:	80 53       	subi	r24, 0x30	; 48
    2ba6:	8a 30       	cpi	r24, 0x0A	; 10
    2ba8:	c8 f5       	brcc	.+114    	; 0x2c1c <RTC_updateDate+0x176>
	   goto DATE_ERROR;
	   
	date[8]= data; 
    2baa:	10 93 cf 02 	sts	0x02CF, r17
	
	data = receiveByte();
    2bae:	0e 94 35 14 	call	0x286a	; 0x286a <receiveByte>
    2bb2:	18 2f       	mov	r17, r24
	transmitByte(data);
    2bb4:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
	if(data < 0x30 || data > 0x39)
    2bb8:	81 2f       	mov	r24, r17
    2bba:	80 53       	subi	r24, 0x30	; 48
    2bbc:	8a 30       	cpi	r24, 0x0A	; 10
    2bbe:	70 f5       	brcc	.+92     	; 0x2c1c <RTC_updateDate+0x176>
	   goto DATE_ERROR;
	   
	date[9]= data; 
    2bc0:	10 93 d0 02 	sts	0x02D0, r17
	
	TX_NEWLINE;
    2bc4:	8d e0       	ldi	r24, 0x0D	; 13
    2bc6:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    2bca:	8a e0       	ldi	r24, 0x0A	; 10
    2bcc:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    transmitString_F(PSTR("Enter Day (Sunday:0, Monday:1...) (0-6):")); 
    2bd0:	83 e8       	ldi	r24, 0x83	; 131
    2bd2:	95 e0       	ldi	r25, 0x05	; 5
    2bd4:	0e 94 3e 14 	call	0x287c	; 0x287c <transmitString_F>
	
	data = receiveByte();				   //receive Day of the week
    2bd8:	0e 94 35 14 	call	0x286a	; 0x286a <receiveByte>
    2bdc:	18 2f       	mov	r17, r24
	transmitByte(data);
    2bde:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
	if(data < 0x30 || data > 0x36)
    2be2:	81 2f       	mov	r24, r17
    2be4:	80 53       	subi	r24, 0x30	; 48
    2be6:	87 30       	cpi	r24, 0x07	; 7
    2be8:	c8 f4       	brcc	.+50     	; 0x2c1c <RTC_updateDate+0x176>
	   goto DATE_ERROR;
	   
	date[10] = data & 0x0f;
    2bea:	1f 70       	andi	r17, 0x0F	; 15
    2bec:	10 93 d1 02 	sts	0x02D1, r17
		 	  
  RTC_updateRegisters(); 
    2bf0:	0e 94 96 14 	call	0x292c	; 0x292c <RTC_updateRegisters>
  data = RTC_writeDate();
    2bf4:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <RTC_writeDate>
    2bf8:	18 2f       	mov	r17, r24

  TX_NEWLINE;
    2bfa:	8d e0       	ldi	r24, 0x0D	; 13
    2bfc:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    2c00:	8a e0       	ldi	r24, 0x0A	; 10
    2c02:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
  if(data == 0)
    2c06:	11 23       	and	r17, r17
    2c08:	31 f4       	brne	.+12     	; 0x2c16 <RTC_updateDate+0x170>
  {
     
  	 transmitString_F(PSTR("Date Updated sucessfully!")); 
    2c0a:	89 e6       	ldi	r24, 0x69	; 105
    2c0c:	95 e0       	ldi	r25, 0x05	; 5
    2c0e:	0e 94 3e 14 	call	0x287c	; 0x287c <transmitString_F>
    2c12:	80 e0       	ldi	r24, 0x00	; 0
    2c14:	0e c0       	rjmp	.+28     	; 0x2c32 <RTC_updateDate+0x18c>
	 return 0;
  }	  
  else
  {
     transmitString_F(PSTR("Date Update Failed.."));
    2c16:	84 e5       	ldi	r24, 0x54	; 84
    2c18:	95 e0       	ldi	r25, 0x05	; 5
    2c1a:	08 c0       	rjmp	.+16     	; 0x2c2c <RTC_updateDate+0x186>
     return 1;
  }

  DATE_ERROR:

  TX_NEWLINE;
    2c1c:	8d e0       	ldi	r24, 0x0D	; 13
    2c1e:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    2c22:	8a e0       	ldi	r24, 0x0A	; 10
    2c24:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
  transmitString_F(PSTR("Invalid Entry..")); 
    2c28:	84 e4       	ldi	r24, 0x44	; 68
    2c2a:	95 e0       	ldi	r25, 0x05	; 5
    2c2c:	0e 94 3e 14 	call	0x287c	; 0x287c <transmitString_F>
    2c30:	81 e0       	ldi	r24, 0x01	; 1
  return 1;
}  
    2c32:	1f 91       	pop	r17
    2c34:	0f 91       	pop	r16
    2c36:	08 95       	ret

00002c38 <RTC_writeTime>:
//******************************************************************   
unsigned char RTC_writeTime(void)
{
  unsigned char errorStatus, i;
  
   errorStatus = i2c_start();
    2c38:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <i2c_start>
   if(errorStatus == 1)
    2c3c:	81 30       	cpi	r24, 0x01	; 1
    2c3e:	e1 f0       	breq	.+56     	; 0x2c78 <RTC_writeTime+0x40>
     //transmitString_F(PSTR("RTC start1 failed.."));
   	 i2c_stop();
	 return(1);
   } 
   
   errorStatus = i2c_sendAddress(DS1307_W);
    2c40:	80 ed       	ldi	r24, 0xD0	; 208
    2c42:	0e 94 76 18 	call	0x30ec	; 0x30ec <i2c_sendAddress>
   
   if(errorStatus == 1)
    2c46:	81 30       	cpi	r24, 0x01	; 1
    2c48:	b9 f0       	breq	.+46     	; 0x2c78 <RTC_writeTime+0x40>
     //transmitString_F(PSTR("RTC sendAddress1 failed.."));
	 i2c_stop();
	 return(1);
   } 
   
   errorStatus = i2c_sendData(0x00);
    2c4a:	80 e0       	ldi	r24, 0x00	; 0
    2c4c:	0e 94 8d 18 	call	0x311a	; 0x311a <i2c_sendData>
   if(errorStatus == 1)
    2c50:	81 30       	cpi	r24, 0x01	; 1
    2c52:	91 f0       	breq	.+36     	; 0x2c78 <RTC_writeTime+0x40>
	 return(1);
   } 

    for(i=0;i<3;i++)
    {
	  errorStatus = i2c_sendData(rtc_register[i]);  
    2c54:	80 91 80 00 	lds	r24, 0x0080
    2c58:	0e 94 8d 18 	call	0x311a	; 0x311a <i2c_sendData>
   	  if(errorStatus == 1)
    2c5c:	81 30       	cpi	r24, 0x01	; 1
    2c5e:	61 f0       	breq	.+24     	; 0x2c78 <RTC_writeTime+0x40>
	 return(1);
   } 

    for(i=0;i<3;i++)
    {
	  errorStatus = i2c_sendData(rtc_register[i]);  
    2c60:	80 91 81 00 	lds	r24, 0x0081
    2c64:	0e 94 8d 18 	call	0x311a	; 0x311a <i2c_sendData>
   	  if(errorStatus == 1)
    2c68:	81 30       	cpi	r24, 0x01	; 1
    2c6a:	31 f0       	breq	.+12     	; 0x2c78 <RTC_writeTime+0x40>
	 return(1);
   } 

    for(i=0;i<3;i++)
    {
	  errorStatus = i2c_sendData(rtc_register[i]);  
    2c6c:	80 91 82 00 	lds	r24, 0x0082
    2c70:	0e 94 8d 18 	call	0x311a	; 0x311a <i2c_sendData>
   	  if(errorStatus == 1)
    2c74:	81 30       	cpi	r24, 0x01	; 1
    2c76:	21 f4       	brne	.+8      	; 0x2c80 <RTC_writeTime+0x48>
   	  {
       		//transmitString_F(PSTR("RTC write time failed.."));
			i2c_stop();
    2c78:	0e 94 b5 18 	call	0x316a	; 0x316a <i2c_stop>
    2c7c:	81 e0       	ldi	r24, 0x01	; 1
    2c7e:	08 95       	ret
	   		return(1);
   	  }
    }
	
	i2c_stop();
    2c80:	0e 94 b5 18 	call	0x316a	; 0x316a <i2c_stop>
    2c84:	80 e0       	ldi	r24, 0x00	; 0
	return(0);
}
    2c86:	08 95       	ret

00002c88 <RTC_updateTime>:
  
//******************************************************************
//Function to update RTC time by entering it at hyper terminal
//******************************************************************   
unsigned char RTC_updateTime(void)
{
    2c88:	1f 93       	push	r17
  unsigned char data;
  TX_NEWLINE;
    2c8a:	8d e0       	ldi	r24, 0x0D	; 13
    2c8c:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    2c90:	8a e0       	ldi	r24, 0x0A	; 10
    2c92:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
  transmitString_F(PSTR("Enter Time in 24h format(hh:mm:ss):")); 
    2c96:	82 e0       	ldi	r24, 0x02	; 2
    2c98:	96 e0       	ldi	r25, 0x06	; 6
    2c9a:	0e 94 3e 14 	call	0x287c	; 0x287c <transmitString_F>
  
    data = receiveByte(); 	   	  	  				//receive hours
    2c9e:	0e 94 35 14 	call	0x286a	; 0x286a <receiveByte>
    2ca2:	18 2f       	mov	r17, r24
	transmitByte(data);
    2ca4:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
	if(data < 0x30 || data > 0x32)
    2ca8:	81 2f       	mov	r24, r17
    2caa:	80 53       	subi	r24, 0x30	; 48
    2cac:	83 30       	cpi	r24, 0x03	; 3
    2cae:	08 f0       	brcs	.+2      	; 0x2cb2 <RTC_updateTime+0x2a>
    2cb0:	6e c0       	rjmp	.+220    	; 0x2d8e <RTC_updateTime+0x106>
	   goto TIME_ERROR;
	   
	time[0]= data;
    2cb2:	10 93 bc 02 	sts	0x02BC, r17
	 
	data = receiveByte();
    2cb6:	0e 94 35 14 	call	0x286a	; 0x286a <receiveByte>
    2cba:	18 2f       	mov	r17, r24
	transmitByte(data);
    2cbc:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
	if(data < 0x30 || data > 0x39)
    2cc0:	81 2f       	mov	r24, r17
    2cc2:	80 53       	subi	r24, 0x30	; 48
    2cc4:	8a 30       	cpi	r24, 0x0A	; 10
    2cc6:	08 f0       	brcs	.+2      	; 0x2cca <RTC_updateTime+0x42>
    2cc8:	62 c0       	rjmp	.+196    	; 0x2d8e <RTC_updateTime+0x106>
	   goto TIME_ERROR;
	 
	time[1]= data;
    2cca:	10 93 bd 02 	sts	0x02BD, r17
	
	transmitByte(':');
    2cce:	8a e3       	ldi	r24, 0x3A	; 58
    2cd0:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
	
	if(((time[1] & 0x0f) + ((time[0] & 0x03)*10)) > 23)
    2cd4:	80 91 bc 02 	lds	r24, 0x02BC
    2cd8:	90 e0       	ldi	r25, 0x00	; 0
    2cda:	83 70       	andi	r24, 0x03	; 3
    2cdc:	90 70       	andi	r25, 0x00	; 0
    2cde:	9c 01       	movw	r18, r24
    2ce0:	13 e0       	ldi	r17, 0x03	; 3
    2ce2:	22 0f       	add	r18, r18
    2ce4:	33 1f       	adc	r19, r19
    2ce6:	1a 95       	dec	r17
    2ce8:	e1 f7       	brne	.-8      	; 0x2ce2 <RTC_updateTime+0x5a>
    2cea:	88 0f       	add	r24, r24
    2cec:	99 1f       	adc	r25, r25
    2cee:	28 0f       	add	r18, r24
    2cf0:	39 1f       	adc	r19, r25
    2cf2:	80 91 bd 02 	lds	r24, 0x02BD
    2cf6:	8f 70       	andi	r24, 0x0F	; 15
    2cf8:	28 0f       	add	r18, r24
    2cfa:	31 1d       	adc	r19, r1
    2cfc:	28 31       	cpi	r18, 0x18	; 24
    2cfe:	31 05       	cpc	r19, r1
    2d00:	0c f0       	brlt	.+2      	; 0x2d04 <RTC_updateTime+0x7c>
    2d02:	45 c0       	rjmp	.+138    	; 0x2d8e <RTC_updateTime+0x106>
	   goto TIME_ERROR;
	 
	 data = receiveByte();			   			  //receive minutes
    2d04:	0e 94 35 14 	call	0x286a	; 0x286a <receiveByte>
    2d08:	18 2f       	mov	r17, r24
	 transmitByte(data);
    2d0a:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
	if(data < 0x30 || data > 0x35)
    2d0e:	81 2f       	mov	r24, r17
    2d10:	80 53       	subi	r24, 0x30	; 48
    2d12:	86 30       	cpi	r24, 0x06	; 6
    2d14:	e0 f5       	brcc	.+120    	; 0x2d8e <RTC_updateTime+0x106>
	   goto TIME_ERROR;
	   
	time[3]= data; 
    2d16:	10 93 bf 02 	sts	0x02BF, r17
	
	data = receiveByte();
    2d1a:	0e 94 35 14 	call	0x286a	; 0x286a <receiveByte>
    2d1e:	18 2f       	mov	r17, r24
	transmitByte(data);
    2d20:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
	if(data < 0x30 || data > 0x39)
    2d24:	81 2f       	mov	r24, r17
    2d26:	80 53       	subi	r24, 0x30	; 48
    2d28:	8a 30       	cpi	r24, 0x0A	; 10
    2d2a:	88 f5       	brcc	.+98     	; 0x2d8e <RTC_updateTime+0x106>
	   goto TIME_ERROR;
	   
	time[4]= data; 
    2d2c:	10 93 c0 02 	sts	0x02C0, r17
	
	transmitByte(':');
    2d30:	8a e3       	ldi	r24, 0x3A	; 58
    2d32:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
	
	 data = receiveByte();			   			  //receive seconds
    2d36:	0e 94 35 14 	call	0x286a	; 0x286a <receiveByte>
    2d3a:	18 2f       	mov	r17, r24
	 transmitByte(data);
    2d3c:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
	if(data < 0x30 || data > 0x35)
    2d40:	81 2f       	mov	r24, r17
    2d42:	80 53       	subi	r24, 0x30	; 48
    2d44:	86 30       	cpi	r24, 0x06	; 6
    2d46:	18 f5       	brcc	.+70     	; 0x2d8e <RTC_updateTime+0x106>
	   goto TIME_ERROR;
	   
	time[6]= data; 
    2d48:	10 93 c2 02 	sts	0x02C2, r17
	
	data = receiveByte();
    2d4c:	0e 94 35 14 	call	0x286a	; 0x286a <receiveByte>
    2d50:	18 2f       	mov	r17, r24
	transmitByte(data);
    2d52:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
	if(data < 0x30 || data > 0x39)
    2d56:	81 2f       	mov	r24, r17
    2d58:	80 53       	subi	r24, 0x30	; 48
    2d5a:	8a 30       	cpi	r24, 0x0A	; 10
    2d5c:	c0 f4       	brcc	.+48     	; 0x2d8e <RTC_updateTime+0x106>
	   goto TIME_ERROR;
	   
	time[7]= data; 
    2d5e:	10 93 c3 02 	sts	0x02C3, r17
	
	 	  
  RTC_updateRegisters(); 
    2d62:	0e 94 96 14 	call	0x292c	; 0x292c <RTC_updateRegisters>
  data = RTC_writeTime();
    2d66:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <RTC_writeTime>
    2d6a:	18 2f       	mov	r17, r24

  TX_NEWLINE;
    2d6c:	8d e0       	ldi	r24, 0x0D	; 13
    2d6e:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    2d72:	8a e0       	ldi	r24, 0x0A	; 10
    2d74:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
  if(data == 0)
    2d78:	11 23       	and	r17, r17
    2d7a:	31 f4       	brne	.+12     	; 0x2d88 <RTC_updateTime+0x100>
  {     
  	 transmitString_F(PSTR("Time Updated sucessfully!")); 
    2d7c:	88 ee       	ldi	r24, 0xE8	; 232
    2d7e:	95 e0       	ldi	r25, 0x05	; 5
    2d80:	0e 94 3e 14 	call	0x287c	; 0x287c <transmitString_F>
    2d84:	80 e0       	ldi	r24, 0x00	; 0
    2d86:	0e c0       	rjmp	.+28     	; 0x2da4 <RTC_updateTime+0x11c>
	 return 0;
  }	
  else 
  { 
     transmitString_F(PSTR("Time Update Failed.."));
    2d88:	83 ed       	ldi	r24, 0xD3	; 211
    2d8a:	95 e0       	ldi	r25, 0x05	; 5
    2d8c:	08 c0       	rjmp	.+16     	; 0x2d9e <RTC_updateTime+0x116>
	 return 1;
  }
TIME_ERROR:

  TX_NEWLINE;
    2d8e:	8d e0       	ldi	r24, 0x0D	; 13
    2d90:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    2d94:	8a e0       	ldi	r24, 0x0A	; 10
    2d96:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
  transmitString_F(PSTR("Invalid Entry..")); 
    2d9a:	83 ec       	ldi	r24, 0xC3	; 195
    2d9c:	95 e0       	ldi	r25, 0x05	; 5
    2d9e:	0e 94 3e 14 	call	0x287c	; 0x287c <transmitString_F>
    2da2:	81 e0       	ldi	r24, 0x01	; 1
  return 1;
}  
    2da4:	1f 91       	pop	r17
    2da6:	08 95       	ret

00002da8 <RTC_setStartAddress>:
//***************************************************************************
unsigned char RTC_setStartAddress(void)
{
   unsigned char errorStatus;
   
   errorStatus = i2c_start();
    2da8:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <i2c_start>
   if(errorStatus == 1)
    2dac:	81 30       	cpi	r24, 0x01	; 1
    2dae:	51 f0       	breq	.+20     	; 0x2dc4 <RTC_setStartAddress+0x1c>
     //transmitString_F(PSTR("RTC start1 failed.."));
   	 i2c_stop();
	 return 1;
   } 
   
   errorStatus = i2c_sendAddress(DS1307_W);
    2db0:	80 ed       	ldi	r24, 0xD0	; 208
    2db2:	0e 94 76 18 	call	0x30ec	; 0x30ec <i2c_sendAddress>
   
   if(errorStatus == 1)
    2db6:	81 30       	cpi	r24, 0x01	; 1
    2db8:	29 f0       	breq	.+10     	; 0x2dc4 <RTC_setStartAddress+0x1c>
     //transmitString_F(PSTR("RTC sendAddress1 failed.."));
	 i2c_stop();
	 return 1;
   } 
   
   errorStatus = i2c_sendData(0x00);
    2dba:	80 e0       	ldi	r24, 0x00	; 0
    2dbc:	0e 94 8d 18 	call	0x311a	; 0x311a <i2c_sendData>
   if(errorStatus == 1)
    2dc0:	81 30       	cpi	r24, 0x01	; 1
    2dc2:	21 f4       	brne	.+8      	; 0x2dcc <RTC_setStartAddress+0x24>
   {
     //transmitString_F(PSTR("RTC write-2 failed.."));
	 i2c_stop();
    2dc4:	0e 94 b5 18 	call	0x316a	; 0x316a <i2c_stop>
    2dc8:	81 e0       	ldi	r24, 0x01	; 1
    2dca:	08 95       	ret
	 return 1;
   } 

   i2c_stop();
    2dcc:	0e 94 b5 18 	call	0x316a	; 0x316a <i2c_stop>
    2dd0:	80 e0       	ldi	r24, 0x00	; 0
   return 0;
}
    2dd2:	08 95       	ret

00002dd4 <RTC_read>:

//***********************************************************************
//Function to read RTC registers and store them in buffer rtc_register[]
//***********************************************************************    
unsigned char RTC_read(void)
{
    2dd4:	1f 93       	push	r17
    2dd6:	cf 93       	push	r28
    2dd8:	df 93       	push	r29

  unsigned char errorStatus, i, data;
  
  errorStatus = i2c_start();
    2dda:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <i2c_start>
   if(errorStatus == 1)
    2dde:	81 30       	cpi	r24, 0x01	; 1
    2de0:	f9 f0       	breq	.+62     	; 0x2e20 <RTC_read+0x4c>
     //transmitString_F(PSTR("RTC start1 failed.."));
   	 i2c_stop();
	 return 1;
   } 
   
   errorStatus = i2c_sendAddress(DS1307_W);
    2de2:	80 ed       	ldi	r24, 0xD0	; 208
    2de4:	0e 94 76 18 	call	0x30ec	; 0x30ec <i2c_sendAddress>
   
   if(errorStatus == 1)
    2de8:	81 30       	cpi	r24, 0x01	; 1
    2dea:	d1 f0       	breq	.+52     	; 0x2e20 <RTC_read+0x4c>
     //transmitString_F(PSTR("RTC sendAddress1 failed.."));
	 i2c_stop();
	 return 1;
   } 
   
   errorStatus = i2c_sendData(0x00);
    2dec:	80 e0       	ldi	r24, 0x00	; 0
    2dee:	0e 94 8d 18 	call	0x311a	; 0x311a <i2c_sendData>
   if(errorStatus == 1)
    2df2:	81 30       	cpi	r24, 0x01	; 1
    2df4:	a9 f0       	breq	.+42     	; 0x2e20 <RTC_read+0x4c>
     //transmitString_F(PSTR("RTC write-1 failed.."));
	 i2c_stop();
	 return 1;
   } 

    errorStatus = i2c_repeatStart();
    2df6:	0e 94 69 18 	call	0x30d2	; 0x30d2 <i2c_repeatStart>
   if(errorStatus == 1)
    2dfa:	81 30       	cpi	r24, 0x01	; 1
    2dfc:	89 f0       	breq	.+34     	; 0x2e20 <RTC_read+0x4c>
     //transmitString_F(PSTR("RTC repeat start failed.."));
   	 i2c_stop();
	 return 1;
   } 
   
    errorStatus = i2c_sendAddress(DS1307_R);
    2dfe:	81 ed       	ldi	r24, 0xD1	; 209
    2e00:	0e 94 76 18 	call	0x30ec	; 0x30ec <i2c_sendAddress>
   
   if(errorStatus == 1)
    2e04:	81 30       	cpi	r24, 0x01	; 1
    2e06:	61 f0       	breq	.+24     	; 0x2e20 <RTC_read+0x4c>
   {
     //transmitString_F(PSTR("RTC sendAddress2 failed.."));
	 i2c_stop();
	 return 1;
    2e08:	c0 e8       	ldi	r28, 0x80	; 128
    2e0a:	d0 e0       	ldi	r29, 0x00	; 0
    2e0c:	10 e0       	ldi	r17, 0x00	; 0
   } 
 
    for(i=0;i<7;i++)
   {
      if(i == 6)  	 //no Acknowledge after receiving the last byte
    2e0e:	16 30       	cpi	r17, 0x06	; 6
    2e10:	19 f4       	brne	.+6      	; 0x2e18 <RTC_read+0x44>
	   	  data = i2c_receiveData_NACK();
    2e12:	0e 94 a8 18 	call	0x3150	; 0x3150 <i2c_receiveData_NACK>
    2e16:	02 c0       	rjmp	.+4      	; 0x2e1c <RTC_read+0x48>
	  else
	  	  data = i2c_receiveData_ACK();
    2e18:	0e 94 9b 18 	call	0x3136	; 0x3136 <i2c_receiveData_ACK>
		  
   	  if(data == ERROR_CODE)
    2e1c:	8e 37       	cpi	r24, 0x7E	; 126
    2e1e:	21 f4       	brne	.+8      	; 0x2e28 <RTC_read+0x54>
   	  {
       		//transmitString_F(PSTR("RTC receive failed.."));
			i2c_stop();
    2e20:	0e 94 b5 18 	call	0x316a	; 0x316a <i2c_stop>
    2e24:	81 e0       	ldi	r24, 0x01	; 1
    2e26:	07 c0       	rjmp	.+14     	; 0x2e36 <RTC_read+0x62>
	   		return 1;
   	  }
	  
	  rtc_register[i] = data;
    2e28:	89 93       	st	Y+, r24
     //transmitString_F(PSTR("RTC sendAddress2 failed.."));
	 i2c_stop();
	 return 1;
   } 
 
    for(i=0;i<7;i++)
    2e2a:	1f 5f       	subi	r17, 0xFF	; 255
    2e2c:	17 30       	cpi	r17, 0x07	; 7
    2e2e:	79 f7       	brne	.-34     	; 0x2e0e <RTC_read+0x3a>
   	  }
	  
	  rtc_register[i] = data;
	}
	
	i2c_stop();
    2e30:	0e 94 b5 18 	call	0x316a	; 0x316a <i2c_stop>
    2e34:	80 e0       	ldi	r24, 0x00	; 0
	return 0;
}	  
    2e36:	df 91       	pop	r29
    2e38:	cf 91       	pop	r28
    2e3a:	1f 91       	pop	r17
    2e3c:	08 95       	ret

00002e3e <getDateTime_FAT>:
{
  
   unsigned char mth, dt, hr, min, sec, error; 
   unsigned int yr;

   error = RTC_read();
    2e3e:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <RTC_read>
   if(error) return 1;
    2e42:	88 23       	and	r24, r24
    2e44:	11 f0       	breq	.+4      	; 0x2e4a <getDateTime_FAT+0xc>
    2e46:	81 e0       	ldi	r24, 0x01	; 1
    2e48:	08 95       	ret

   yr = (YEAR & 0xf0) >> 4;
    2e4a:	40 91 86 00 	lds	r20, 0x0086
   yr = (yr * 10)+(YEAR & 0x0f);
    2e4e:	84 2f       	mov	r24, r20
    2e50:	82 95       	swap	r24
    2e52:	8f 70       	andi	r24, 0x0F	; 15
    2e54:	90 e0       	ldi	r25, 0x00	; 0
    2e56:	fc 01       	movw	r30, r24
    2e58:	b3 e0       	ldi	r27, 0x03	; 3
    2e5a:	ee 0f       	add	r30, r30
    2e5c:	ff 1f       	adc	r31, r31
    2e5e:	ba 95       	dec	r27
    2e60:	e1 f7       	brne	.-8      	; 0x2e5a <getDateTime_FAT+0x1c>
    2e62:	88 0f       	add	r24, r24
    2e64:	99 1f       	adc	r25, r25
    2e66:	e8 0f       	add	r30, r24
    2e68:	f9 1f       	adc	r31, r25
   yr = yr+2000;
    2e6a:	50 e0       	ldi	r21, 0x00	; 0
    2e6c:	4f 70       	andi	r20, 0x0F	; 15
    2e6e:	50 70       	andi	r21, 0x00	; 0
    2e70:	4c 5e       	subi	r20, 0xEC	; 236
    2e72:	5f 4f       	sbci	r21, 0xFF	; 255
   yr = yr - 1980;

   dateFAT = yr;

   mth = (MONTH & 0xf0) >> 4;
    2e74:	60 91 85 00 	lds	r22, 0x0085
   mth = (mth * 10)+(MONTH & 0x0f);
    2e78:	86 2f       	mov	r24, r22
    2e7a:	82 95       	swap	r24
    2e7c:	8f 70       	andi	r24, 0x0F	; 15
    2e7e:	aa e0       	ldi	r26, 0x0A	; 10
    2e80:	8a 9f       	mul	r24, r26
    2e82:	80 2d       	mov	r24, r0
    2e84:	11 24       	eor	r1, r1

   dateFAT = (dateFAT << 4) | mth;

   dt = (DATE & 0xf0) >> 4;
    2e86:	70 91 84 00 	lds	r23, 0x0084
   dt = (dt * 10)+(DATE & 0x0f);
    2e8a:	27 2f       	mov	r18, r23
    2e8c:	22 95       	swap	r18
    2e8e:	2f 70       	andi	r18, 0x0F	; 15
    2e90:	2a 9f       	mul	r18, r26
    2e92:	20 2d       	mov	r18, r0
    2e94:	11 24       	eor	r1, r1

   dateFAT = (dateFAT << 5) | dt;
    2e96:	6f 70       	andi	r22, 0x0F	; 15
    2e98:	86 0f       	add	r24, r22
    2e9a:	90 e0       	ldi	r25, 0x00	; 0
    2e9c:	4e 0f       	add	r20, r30
    2e9e:	5f 1f       	adc	r21, r31
    2ea0:	e4 e0       	ldi	r30, 0x04	; 4
    2ea2:	44 0f       	add	r20, r20
    2ea4:	55 1f       	adc	r21, r21
    2ea6:	ea 95       	dec	r30
    2ea8:	e1 f7       	brne	.-8      	; 0x2ea2 <getDateTime_FAT+0x64>
    2eaa:	84 2b       	or	r24, r20
    2eac:	95 2b       	or	r25, r21
    2eae:	65 e0       	ldi	r22, 0x05	; 5
    2eb0:	88 0f       	add	r24, r24
    2eb2:	99 1f       	adc	r25, r25
    2eb4:	6a 95       	dec	r22
    2eb6:	e1 f7       	brne	.-8      	; 0x2eb0 <getDateTime_FAT+0x72>
    2eb8:	7f 70       	andi	r23, 0x0F	; 15
    2eba:	27 0f       	add	r18, r23
    2ebc:	30 e0       	ldi	r19, 0x00	; 0
    2ebe:	82 2b       	or	r24, r18
    2ec0:	93 2b       	or	r25, r19
    2ec2:	90 93 8c 00 	sts	0x008C, r25
    2ec6:	80 93 8b 00 	sts	0x008B, r24


   hr = (HOURS & 0xf0) >> 4;
    2eca:	70 91 82 00 	lds	r23, 0x0082
   hr = (hr * 10)+(HOURS & 0x0f);
    2ece:	87 2f       	mov	r24, r23
    2ed0:	82 95       	swap	r24
    2ed2:	8f 70       	andi	r24, 0x0F	; 15
    2ed4:	8a 9f       	mul	r24, r26
    2ed6:	80 2d       	mov	r24, r0
    2ed8:	11 24       	eor	r1, r1

   timeFAT = hr;

   min = (MINUTES & 0xf0) >> 4;
    2eda:	e0 91 81 00 	lds	r30, 0x0081
   min = (min * 10)+(MINUTES & 0x0f);
    2ede:	4e 2f       	mov	r20, r30
    2ee0:	42 95       	swap	r20
    2ee2:	4f 70       	andi	r20, 0x0F	; 15
    2ee4:	4a 9f       	mul	r20, r26
    2ee6:	40 2d       	mov	r20, r0
    2ee8:	11 24       	eor	r1, r1

   timeFAT = (timeFAT << 6) | min;

   sec = (SECONDS & 0xf0) >> 4;
    2eea:	60 91 80 00 	lds	r22, 0x0080
   sec = (sec * 10)+(SECONDS & 0x0f);
    2eee:	26 2f       	mov	r18, r22
    2ef0:	22 95       	swap	r18
    2ef2:	2f 70       	andi	r18, 0x0F	; 15
    2ef4:	2a 9f       	mul	r18, r26
    2ef6:	20 2d       	mov	r18, r0
    2ef8:	11 24       	eor	r1, r1
    2efa:	6f 70       	andi	r22, 0x0F	; 15
    2efc:	26 0f       	add	r18, r22
   sec = sec / 2;    //FAT32 fromat accepts dates with 2sec resolution (e.g. value 5 => 10sec)

   timeFAT = (timeFAT << 5) | sec;
    2efe:	7f 70       	andi	r23, 0x0F	; 15
    2f00:	87 0f       	add	r24, r23
    2f02:	90 e0       	ldi	r25, 0x00	; 0
    2f04:	56 e0       	ldi	r21, 0x06	; 6
    2f06:	88 0f       	add	r24, r24
    2f08:	99 1f       	adc	r25, r25
    2f0a:	5a 95       	dec	r21
    2f0c:	e1 f7       	brne	.-8      	; 0x2f06 <getDateTime_FAT+0xc8>
    2f0e:	ef 70       	andi	r30, 0x0F	; 15
    2f10:	4e 0f       	add	r20, r30
    2f12:	50 e0       	ldi	r21, 0x00	; 0
    2f14:	84 2b       	or	r24, r20
    2f16:	95 2b       	or	r25, r21
    2f18:	35 e0       	ldi	r19, 0x05	; 5
    2f1a:	88 0f       	add	r24, r24
    2f1c:	99 1f       	adc	r25, r25
    2f1e:	3a 95       	dec	r19
    2f20:	e1 f7       	brne	.-8      	; 0x2f1a <getDateTime_FAT+0xdc>
    2f22:	26 95       	lsr	r18
    2f24:	30 e0       	ldi	r19, 0x00	; 0
    2f26:	82 2b       	or	r24, r18
    2f28:	93 2b       	or	r25, r19
    2f2a:	90 93 a0 00 	sts	0x00A0, r25
    2f2e:	80 93 9f 00 	sts	0x009F, r24
    2f32:	80 e0       	ldi	r24, 0x00	; 0

   
   return 0;
}
    2f34:	08 95       	ret

00002f36 <RTC_getDate>:
//Function to form date string for sending it to LCD & UART
//****************************************************************** 
unsigned char RTC_getDate(void)
{
  unsigned char error;
  error = RTC_read();
    2f36:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <RTC_read>
  if(error) return 1;
    2f3a:	88 23       	and	r24, r24
    2f3c:	11 f0       	breq	.+4      	; 0x2f42 <RTC_getDate+0xc>
    2f3e:	81 e0       	ldi	r24, 0x01	; 1
    2f40:	08 95       	ret

  date[11] = 0x00;
    2f42:	10 92 d2 02 	sts	0x02D2, r1
  date[10] = 0x00;
    2f46:	10 92 d1 02 	sts	0x02D1, r1
  date[9] = (YEAR & 0x0f) | 0x30;
    2f4a:	90 91 86 00 	lds	r25, 0x0086
    2f4e:	89 2f       	mov	r24, r25
    2f50:	8f 70       	andi	r24, 0x0F	; 15
    2f52:	80 63       	ori	r24, 0x30	; 48
    2f54:	80 93 d0 02 	sts	0x02D0, r24
  date[8] = ((YEAR & 0xf0) >> 4) | 0x30;
    2f58:	92 95       	swap	r25
    2f5a:	9f 70       	andi	r25, 0x0F	; 15
    2f5c:	90 63       	ori	r25, 0x30	; 48
    2f5e:	90 93 cf 02 	sts	0x02CF, r25
  date[7] = '0';
    2f62:	80 e3       	ldi	r24, 0x30	; 48
    2f64:	80 93 ce 02 	sts	0x02CE, r24
  date[6] = '2';
    2f68:	82 e3       	ldi	r24, 0x32	; 50
    2f6a:	80 93 cd 02 	sts	0x02CD, r24
  date[5] = '/';
    2f6e:	3f e2       	ldi	r19, 0x2F	; 47
    2f70:	30 93 cc 02 	sts	0x02CC, r19
  date[4] = (MONTH & 0x0f) | 0x30;
    2f74:	80 91 85 00 	lds	r24, 0x0085
    2f78:	28 2f       	mov	r18, r24
    2f7a:	2f 70       	andi	r18, 0x0F	; 15
    2f7c:	20 63       	ori	r18, 0x30	; 48
    2f7e:	20 93 cb 02 	sts	0x02CB, r18
  date[3] = ((MONTH & 0x10) >> 4) | 0x30;
    2f82:	90 e0       	ldi	r25, 0x00	; 0
    2f84:	80 71       	andi	r24, 0x10	; 16
    2f86:	90 70       	andi	r25, 0x00	; 0
    2f88:	44 e0       	ldi	r20, 0x04	; 4
    2f8a:	95 95       	asr	r25
    2f8c:	87 95       	ror	r24
    2f8e:	4a 95       	dec	r20
    2f90:	e1 f7       	brne	.-8      	; 0x2f8a <RTC_getDate+0x54>
    2f92:	80 63       	ori	r24, 0x30	; 48
    2f94:	80 93 ca 02 	sts	0x02CA, r24
  date[2] = '/';
    2f98:	30 93 c9 02 	sts	0x02C9, r19
  date[1] = (DATE & 0x0f) | 0x30;
    2f9c:	80 91 84 00 	lds	r24, 0x0084
    2fa0:	28 2f       	mov	r18, r24
    2fa2:	2f 70       	andi	r18, 0x0F	; 15
    2fa4:	20 63       	ori	r18, 0x30	; 48
    2fa6:	20 93 c8 02 	sts	0x02C8, r18
  date[0] = ((DATE & 0x30) >> 4) | 0x30;
    2faa:	90 e0       	ldi	r25, 0x00	; 0
    2fac:	80 73       	andi	r24, 0x30	; 48
    2fae:	90 70       	andi	r25, 0x00	; 0
    2fb0:	24 e0       	ldi	r18, 0x04	; 4
    2fb2:	95 95       	asr	r25
    2fb4:	87 95       	ror	r24
    2fb6:	2a 95       	dec	r18
    2fb8:	e1 f7       	brne	.-8      	; 0x2fb2 <RTC_getDate+0x7c>
    2fba:	80 63       	ori	r24, 0x30	; 48
    2fbc:	80 93 c7 02 	sts	0x02C7, r24
    2fc0:	80 e0       	ldi	r24, 0x00	; 0
  return 0;
}  
    2fc2:	08 95       	ret

00002fc4 <RTC_displayDate>:
//Function to display date on LCD and send it to PC (UART)
//****************************************************************** 
unsigned char RTC_displayDate(void)
{
  unsigned char error;
  error = RTC_getDate();
    2fc4:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <RTC_getDate>
  if(error) return 1;
    2fc8:	88 23       	and	r24, r24
    2fca:	11 f0       	breq	.+4      	; 0x2fd0 <RTC_displayDate+0xc>
    2fcc:	81 e0       	ldi	r24, 0x01	; 1
    2fce:	08 95       	ret
  
  TX_NEWLINE;
    2fd0:	8d e0       	ldi	r24, 0x0D	; 13
    2fd2:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    2fd6:	8a e0       	ldi	r24, 0x0A	; 10
    2fd8:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
  transmitString_F(PSTR("Date:")); 
    2fdc:	81 e7       	ldi	r24, 0x71	; 113
    2fde:	96 e0       	ldi	r25, 0x06	; 6
    2fe0:	0e 94 3e 14 	call	0x287c	; 0x287c <transmitString_F>
  transmitString(date);  
    2fe4:	87 ec       	ldi	r24, 0xC7	; 199
    2fe6:	92 e0       	ldi	r25, 0x02	; 2
    2fe8:	0e 94 48 14 	call	0x2890	; 0x2890 <transmitString>
  RTC_displayDay();  
    2fec:	0e 94 f5 14 	call	0x29ea	; 0x29ea <RTC_displayDay>
    2ff0:	80 e0       	ldi	r24, 0x00	; 0
  
  return 0; 
}
    2ff2:	08 95       	ret

00002ff4 <RTC_getTime>:
//Function to form time string for sending it to LCD & UART
//****************************************************************** 
unsigned char RTC_getTime(void)
{
   unsigned char error;
   error = RTC_read();
    2ff4:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <RTC_read>
   if(error) return 1;
    2ff8:	88 23       	and	r24, r24
    2ffa:	11 f0       	breq	.+4      	; 0x3000 <RTC_getTime+0xc>
    2ffc:	81 e0       	ldi	r24, 0x01	; 1
    2ffe:	08 95       	ret

   RTC_read();
    3000:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <RTC_read>
   time[8] = 0x00;	  //NIL
    3004:	10 92 c4 02 	sts	0x02C4, r1
   time[7] = (SECONDS & 0x0f) | 0x30;		 //seconds(1's)
    3008:	80 91 80 00 	lds	r24, 0x0080
    300c:	28 2f       	mov	r18, r24
    300e:	2f 70       	andi	r18, 0x0F	; 15
    3010:	20 63       	ori	r18, 0x30	; 48
    3012:	20 93 c3 02 	sts	0x02C3, r18
   time[6] = ((SECONDS & 0x70) >> 4) | 0x30; //seconds(10's)
    3016:	90 e0       	ldi	r25, 0x00	; 0
    3018:	80 77       	andi	r24, 0x70	; 112
    301a:	90 70       	andi	r25, 0x00	; 0
    301c:	74 e0       	ldi	r23, 0x04	; 4
    301e:	95 95       	asr	r25
    3020:	87 95       	ror	r24
    3022:	7a 95       	dec	r23
    3024:	e1 f7       	brne	.-8      	; 0x301e <RTC_getTime+0x2a>
    3026:	80 63       	ori	r24, 0x30	; 48
    3028:	80 93 c2 02 	sts	0x02C2, r24
   time[5] = ':';
    302c:	3a e3       	ldi	r19, 0x3A	; 58
    302e:	30 93 c1 02 	sts	0x02C1, r19
   
   time[4] = (MINUTES & 0x0f) | 0x30;
    3032:	80 91 81 00 	lds	r24, 0x0081
    3036:	28 2f       	mov	r18, r24
    3038:	2f 70       	andi	r18, 0x0F	; 15
    303a:	20 63       	ori	r18, 0x30	; 48
    303c:	20 93 c0 02 	sts	0x02C0, r18
   time[3] = ((MINUTES & 0x70) >> 4) | 0x30;
    3040:	90 e0       	ldi	r25, 0x00	; 0
    3042:	80 77       	andi	r24, 0x70	; 112
    3044:	90 70       	andi	r25, 0x00	; 0
    3046:	64 e0       	ldi	r22, 0x04	; 4
    3048:	95 95       	asr	r25
    304a:	87 95       	ror	r24
    304c:	6a 95       	dec	r22
    304e:	e1 f7       	brne	.-8      	; 0x3048 <RTC_getTime+0x54>
    3050:	80 63       	ori	r24, 0x30	; 48
    3052:	80 93 bf 02 	sts	0x02BF, r24
   time[2] = ':'; 
    3056:	30 93 be 02 	sts	0x02BE, r19
   
   time[1] = (HOURS & 0x0f) | 0x30;	
    305a:	80 91 82 00 	lds	r24, 0x0082
    305e:	28 2f       	mov	r18, r24
    3060:	2f 70       	andi	r18, 0x0F	; 15
    3062:	20 63       	ori	r18, 0x30	; 48
    3064:	20 93 bd 02 	sts	0x02BD, r18
   time[0] = ((HOURS & 0x30) >> 4) | 0x30;
    3068:	90 e0       	ldi	r25, 0x00	; 0
    306a:	80 73       	andi	r24, 0x30	; 48
    306c:	90 70       	andi	r25, 0x00	; 0
    306e:	54 e0       	ldi	r21, 0x04	; 4
    3070:	95 95       	asr	r25
    3072:	87 95       	ror	r24
    3074:	5a 95       	dec	r21
    3076:	e1 f7       	brne	.-8      	; 0x3070 <RTC_getTime+0x7c>
    3078:	80 63       	ori	r24, 0x30	; 48
    307a:	80 93 bc 02 	sts	0x02BC, r24
    307e:	80 e0       	ldi	r24, 0x00	; 0

   return 0;
}
    3080:	08 95       	ret

00003082 <RTC_displayTime>:
//Function to display time on LCD and send it to PC (thru UART)
//****************************************************************** 
unsigned char RTC_displayTime(void)
{
  unsigned char error;
  error = RTC_getTime();
    3082:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <RTC_getTime>
  if(error) return 1;
    3086:	88 23       	and	r24, r24
    3088:	11 f0       	breq	.+4      	; 0x308e <RTC_displayTime+0xc>
    308a:	81 e0       	ldi	r24, 0x01	; 1
    308c:	08 95       	ret
  
  TX_NEWLINE;
    308e:	8d e0       	ldi	r24, 0x0D	; 13
    3090:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
    3094:	8a e0       	ldi	r24, 0x0A	; 10
    3096:	0e 94 3a 14 	call	0x2874	; 0x2874 <transmitByte>
  transmitString_F(PSTR("Time:"));
    309a:	87 e7       	ldi	r24, 0x77	; 119
    309c:	96 e0       	ldi	r25, 0x06	; 6
    309e:	0e 94 3e 14 	call	0x287c	; 0x287c <transmitString_F>
  transmitString(time);
    30a2:	8c eb       	ldi	r24, 0xBC	; 188
    30a4:	92 e0       	ldi	r25, 0x02	; 2
    30a6:	0e 94 48 14 	call	0x2890	; 0x2890 <transmitString>
    30aa:	80 e0       	ldi	r24, 0x00	; 0

  return 0;
}
    30ac:	08 95       	ret

000030ae <twi_init>:
//TWI initialize
// bit rate:18 (freq: 100Khz @16MHz)
//************************************************
void twi_init(void)
{
 TWCR= 0x00; //disable twi
    30ae:	16 be       	out	0x36, r1	; 54
 TWBR= 0x12; //set bit rate
    30b0:	82 e1       	ldi	r24, 0x12	; 18
    30b2:	80 b9       	out	0x00, r24	; 0
 TWSR= 0x00; //set prescale
    30b4:	11 b8       	out	0x01, r1	; 1
 //TWCR= 0x44; //enable twi
}
    30b6:	08 95       	ret

000030b8 <i2c_start>:
//Function to start i2c communication
//*************************************************
unsigned char i2c_start(void)
{
 
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); 	//Send START condition
    30b8:	84 ea       	ldi	r24, 0xA4	; 164
    30ba:	86 bf       	out	0x36, r24	; 54
	
    while (!(TWCR & (1<<TWINT)));   		//Wait for TWINT flag set. This indicates that the
    30bc:	06 b6       	in	r0, 0x36	; 54
    30be:	07 fe       	sbrs	r0, 7
    30c0:	fd cf       	rjmp	.-6      	; 0x30bc <i2c_start+0x4>
		  								//START condition has been transmitted
    if ((TWSR & 0xF8) == START)			//Check value of TWI Status Register
    30c2:	81 b1       	in	r24, 0x01	; 1
    30c4:	90 e0       	ldi	r25, 0x00	; 0
    30c6:	88 7f       	andi	r24, 0xF8	; 248
    30c8:	88 30       	cpi	r24, 0x08	; 8
    30ca:	09 f0       	breq	.+2      	; 0x30ce <i2c_start+0x16>
    30cc:	91 e0       	ldi	r25, 0x01	; 1
 	   return(0);
	else
	   return(1);
}
    30ce:	89 2f       	mov	r24, r25
    30d0:	08 95       	ret

000030d2 <i2c_repeatStart>:
//Function for repeat start condition
//*************************************************
unsigned char i2c_repeatStart(void)
{
 
    TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); 		//Send START condition
    30d2:	84 ea       	ldi	r24, 0xA4	; 164
    30d4:	86 bf       	out	0x36, r24	; 54
    while (!(TWCR & (1<<TWINT)));   		//Wait for TWINT flag set. This indicates that the
    30d6:	06 b6       	in	r0, 0x36	; 54
    30d8:	07 fe       	sbrs	r0, 7
    30da:	fd cf       	rjmp	.-6      	; 0x30d6 <i2c_repeatStart+0x4>
		  								//START condition has been transmitted
    if ((TWSR & 0xF8) == REPEAT_START)			//Check value of TWI Status Register
    30dc:	81 b1       	in	r24, 0x01	; 1
    30de:	90 e0       	ldi	r25, 0x00	; 0
    30e0:	88 7f       	andi	r24, 0xF8	; 248
    30e2:	80 31       	cpi	r24, 0x10	; 16
    30e4:	09 f0       	breq	.+2      	; 0x30e8 <i2c_repeatStart+0x16>
    30e6:	91 e0       	ldi	r25, 0x01	; 1
 	   return(0);
	else
	   return(1);
}
    30e8:	89 2f       	mov	r24, r25
    30ea:	08 95       	ret

000030ec <i2c_sendAddress>:
//*************************************************
unsigned char i2c_sendAddress(unsigned char address)
{
   unsigned char STATUS;
   
   if((address & 0x01) == 0) 
    30ec:	80 fd       	sbrc	r24, 0
    30ee:	02 c0       	rjmp	.+4      	; 0x30f4 <i2c_sendAddress+0x8>
    30f0:	28 e1       	ldi	r18, 0x18	; 24
    30f2:	01 c0       	rjmp	.+2      	; 0x30f6 <i2c_sendAddress+0xa>
    30f4:	20 e4       	ldi	r18, 0x40	; 64
     STATUS = MT_SLA_ACK;
   else
     STATUS = MR_SLA_ACK; 
   
   TWDR = address; 
    30f6:	83 b9       	out	0x03, r24	; 3
   TWCR = (1<<TWINT)|(1<<TWEN);	   //Load SLA_W into TWDR Register. Clear TWINT bit
    30f8:	84 e8       	ldi	r24, 0x84	; 132
    30fa:	86 bf       	out	0x36, r24	; 54
   		  			 				   //in TWCR to start transmission of address
   while (!(TWCR & (1<<TWINT)));	   //Wait for TWINT flag set. This indicates that the
    30fc:	06 b6       	in	r0, 0x36	; 54
    30fe:	07 fe       	sbrs	r0, 7
    3100:	fd cf       	rjmp	.-6      	; 0x30fc <i2c_sendAddress+0x10>
   		 		   					   //SLA+W has been transmitted, and
									   //ACK/NACK has been received.
   if ((TWSR & 0xF8) == STATUS)	   //Check value of TWI Status Register
    3102:	81 b1       	in	r24, 0x01	; 1
    3104:	40 e0       	ldi	r20, 0x00	; 0
    3106:	90 e0       	ldi	r25, 0x00	; 0
    3108:	88 7f       	andi	r24, 0xF8	; 248
    310a:	90 70       	andi	r25, 0x00	; 0
    310c:	30 e0       	ldi	r19, 0x00	; 0
    310e:	82 17       	cp	r24, r18
    3110:	93 07       	cpc	r25, r19
    3112:	09 f0       	breq	.+2      	; 0x3116 <i2c_sendAddress+0x2a>
    3114:	41 e0       	ldi	r20, 0x01	; 1
   	  return(0);
   else 
      return(1);
}
    3116:	84 2f       	mov	r24, r20
    3118:	08 95       	ret

0000311a <i2c_sendData>:
//**************************************************
//Function to transmit a data byte
//*************************************************
unsigned char i2c_sendData(unsigned char data)
{
   TWDR = data; 
    311a:	83 b9       	out	0x03, r24	; 3
   TWCR = (1<<TWINT) |(1<<TWEN);	   //Load SLA_W into TWDR Register. Clear TWINT bit
    311c:	84 e8       	ldi	r24, 0x84	; 132
    311e:	86 bf       	out	0x36, r24	; 54
   		  			 				   //in TWCR to start transmission of data
   while (!(TWCR & (1<<TWINT)));	   //Wait for TWINT flag set. This indicates that the
    3120:	06 b6       	in	r0, 0x36	; 54
    3122:	07 fe       	sbrs	r0, 7
    3124:	fd cf       	rjmp	.-6      	; 0x3120 <i2c_sendData+0x6>
   		 		   					   //data has been transmitted, and
									   //ACK/NACK has been received.
   if ((TWSR & 0xF8) != MT_DATA_ACK)   //Check value of TWI Status Register
    3126:	81 b1       	in	r24, 0x01	; 1
    3128:	90 e0       	ldi	r25, 0x00	; 0
    312a:	88 7f       	andi	r24, 0xF8	; 248
    312c:	88 32       	cpi	r24, 0x28	; 40
    312e:	09 f0       	breq	.+2      	; 0x3132 <i2c_sendData+0x18>
    3130:	91 e0       	ldi	r25, 0x01	; 1
   	  return(1);
   else
      return(0);
}
    3132:	89 2f       	mov	r24, r25
    3134:	08 95       	ret

00003136 <i2c_receiveData_ACK>:
//*****************************************************
unsigned char i2c_receiveData_ACK(void)
{
  unsigned char data;
  
  TWCR = (1<<TWEA)|(1<<TWINT)|(1<<TWEN);
    3136:	84 ec       	ldi	r24, 0xC4	; 196
    3138:	86 bf       	out	0x36, r24	; 54
  
  while (!(TWCR & (1<<TWINT)));	   	   //Wait for TWINT flag set. This indicates that the
    313a:	06 b6       	in	r0, 0x36	; 54
    313c:	07 fe       	sbrs	r0, 7
    313e:	fd cf       	rjmp	.-6      	; 0x313a <i2c_receiveData_ACK+0x4>
   		 		   					   //data has been received
  if ((TWSR & 0xF8) != MR_DATA_ACK)    //Check value of TWI Status Register
    3140:	81 b1       	in	r24, 0x01	; 1
    3142:	88 7f       	andi	r24, 0xF8	; 248
    3144:	80 35       	cpi	r24, 0x50	; 80
    3146:	11 f0       	breq	.+4      	; 0x314c <i2c_receiveData_ACK+0x16>
    3148:	8e e7       	ldi	r24, 0x7E	; 126
    314a:	08 95       	ret
   	  return(ERROR_CODE);
  
  data = TWDR;
    314c:	83 b1       	in	r24, 0x03	; 3
  return(data);
}
    314e:	08 95       	ret

00003150 <i2c_receiveData_NACK>:
//******************************************************************
unsigned char i2c_receiveData_NACK(void)
{
  unsigned char data;
  
  TWCR = (1<<TWINT)|(1<<TWEN);
    3150:	84 e8       	ldi	r24, 0x84	; 132
    3152:	86 bf       	out	0x36, r24	; 54
  
  while (!(TWCR & (1<<TWINT)));	   	   //Wait for TWINT flag set. This indicates that the
    3154:	06 b6       	in	r0, 0x36	; 54
    3156:	07 fe       	sbrs	r0, 7
    3158:	fd cf       	rjmp	.-6      	; 0x3154 <i2c_receiveData_NACK+0x4>
   		 		   					   //data has been received
  if ((TWSR & 0xF8) != MR_DATA_NACK)    //Check value of TWI Status Register
    315a:	81 b1       	in	r24, 0x01	; 1
    315c:	88 7f       	andi	r24, 0xF8	; 248
    315e:	88 35       	cpi	r24, 0x58	; 88
    3160:	11 f0       	breq	.+4      	; 0x3166 <i2c_receiveData_NACK+0x16>
    3162:	8e e7       	ldi	r24, 0x7E	; 126
    3164:	08 95       	ret
   	  return(ERROR_CODE);
  
  data = TWDR;
    3166:	83 b1       	in	r24, 0x03	; 3
  return(data);
}
    3168:	08 95       	ret

0000316a <i2c_stop>:
//**************************************************
//Function to end the i2c communication
//*************************************************   	
void i2c_stop(void)
{
  TWCR =  (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	  //Transmit STOP condition
    316a:	84 e9       	ldi	r24, 0x94	; 148
    316c:	86 bf       	out	0x36, r24	; 54
}  
    316e:	08 95       	ret

00003170 <__mulsi3>:
    3170:	62 9f       	mul	r22, r18
    3172:	d0 01       	movw	r26, r0
    3174:	73 9f       	mul	r23, r19
    3176:	f0 01       	movw	r30, r0
    3178:	82 9f       	mul	r24, r18
    317a:	e0 0d       	add	r30, r0
    317c:	f1 1d       	adc	r31, r1
    317e:	64 9f       	mul	r22, r20
    3180:	e0 0d       	add	r30, r0
    3182:	f1 1d       	adc	r31, r1
    3184:	92 9f       	mul	r25, r18
    3186:	f0 0d       	add	r31, r0
    3188:	83 9f       	mul	r24, r19
    318a:	f0 0d       	add	r31, r0
    318c:	74 9f       	mul	r23, r20
    318e:	f0 0d       	add	r31, r0
    3190:	65 9f       	mul	r22, r21
    3192:	f0 0d       	add	r31, r0
    3194:	99 27       	eor	r25, r25
    3196:	72 9f       	mul	r23, r18
    3198:	b0 0d       	add	r27, r0
    319a:	e1 1d       	adc	r30, r1
    319c:	f9 1f       	adc	r31, r25
    319e:	63 9f       	mul	r22, r19
    31a0:	b0 0d       	add	r27, r0
    31a2:	e1 1d       	adc	r30, r1
    31a4:	f9 1f       	adc	r31, r25
    31a6:	bd 01       	movw	r22, r26
    31a8:	cf 01       	movw	r24, r30
    31aa:	11 24       	eor	r1, r1
    31ac:	08 95       	ret

000031ae <__udivmodsi4>:
    31ae:	a1 e2       	ldi	r26, 0x21	; 33
    31b0:	1a 2e       	mov	r1, r26
    31b2:	aa 1b       	sub	r26, r26
    31b4:	bb 1b       	sub	r27, r27
    31b6:	fd 01       	movw	r30, r26
    31b8:	0d c0       	rjmp	.+26     	; 0x31d4 <__udivmodsi4_ep>

000031ba <__udivmodsi4_loop>:
    31ba:	aa 1f       	adc	r26, r26
    31bc:	bb 1f       	adc	r27, r27
    31be:	ee 1f       	adc	r30, r30
    31c0:	ff 1f       	adc	r31, r31
    31c2:	a2 17       	cp	r26, r18
    31c4:	b3 07       	cpc	r27, r19
    31c6:	e4 07       	cpc	r30, r20
    31c8:	f5 07       	cpc	r31, r21
    31ca:	20 f0       	brcs	.+8      	; 0x31d4 <__udivmodsi4_ep>
    31cc:	a2 1b       	sub	r26, r18
    31ce:	b3 0b       	sbc	r27, r19
    31d0:	e4 0b       	sbc	r30, r20
    31d2:	f5 0b       	sbc	r31, r21

000031d4 <__udivmodsi4_ep>:
    31d4:	66 1f       	adc	r22, r22
    31d6:	77 1f       	adc	r23, r23
    31d8:	88 1f       	adc	r24, r24
    31da:	99 1f       	adc	r25, r25
    31dc:	1a 94       	dec	r1
    31de:	69 f7       	brne	.-38     	; 0x31ba <__udivmodsi4_loop>
    31e0:	60 95       	com	r22
    31e2:	70 95       	com	r23
    31e4:	80 95       	com	r24
    31e6:	90 95       	com	r25
    31e8:	9b 01       	movw	r18, r22
    31ea:	ac 01       	movw	r20, r24
    31ec:	bd 01       	movw	r22, r26
    31ee:	cf 01       	movw	r24, r30
    31f0:	08 95       	ret

000031f2 <_exit>:
    31f2:	f8 94       	cli

000031f4 <__stop_program>:
    31f4:	ff cf       	rjmp	.-2      	; 0x31f4 <__stop_program>
