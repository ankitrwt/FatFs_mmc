Version 3.2 HI-TECH Software Intermediate Code
"78 ff.h
[s S1 `uc 1 `uc 1 `uc 1 `uc 1 `uc 1 `uc 1 `us 1 `us 1 `ul 1 `ul 1 `ul 1 `ul 1 `ul 1 `ul 1 `ul 1 `ul 1 `ul 1 `uc -> 512 `i ]
[n S1 . fs_type drv csize n_fats wflag fsi_flag id n_rootdir last_clust free_clust n_fatent fsize volbase fatbase dirbase database winsect win ]
"703 ff.c
[c E64 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 .. ]
[n E64 . FR_OK FR_DISK_ERR FR_INT_ERR FR_NOT_READY FR_NO_FILE FR_NO_PATH FR_INVALID_NAME FR_DENIED FR_EXIST FR_INVALID_OBJECT FR_WRITE_PROTECTED FR_INVALID_DRIVE FR_NOT_ENABLED FR_NO_FILESYSTEM FR_MKFS_ABORTED FR_TIMEOUT FR_LOCKED FR_NOT_ENOUGH_CORE FR_TOO_MANY_OPEN_FILES FR_INVALID_PARAMETER  ]
"711
[c E195 0 1 2 3 4 .. ]
[n E195 . RES_OK RES_ERROR RES_WRPRT RES_NOTRDY RES_PARERR  ]
"35 diskio.h
[v _disk_write `(E195 ~T0 @X0 0 ef4`uc`*Cuc`ul`ui ]
"34
[v _disk_read `(E195 ~T0 @X0 0 ef4`uc`*uc`ul`ui ]
"36
[v _disk_ioctl `(E195 ~T0 @X0 0 ef3`uc`uc`*v ]
"143 ff.h
[s S3 `*S1 1 `us 1 `us 1 `ul 1 `ul 1 `ul 1 `*uc 1 `*uc 1 ]
[n S3 . fs id index sclust clust sect dir fn ]
"33 diskio.h
[v _disk_status `(uc ~T0 @X0 0 ef1`uc ]
"32
[v _disk_initialize `(uc ~T0 @X0 0 ef1`uc ]
"114 ff.h
[s S2 `*S1 1 `us 1 `uc 1 `uc 1 `ul 1 `ul 1 `ul 1 `ul 1 `ul 1 `ul 1 `*uc 1 ]
[n S2 . fs id flag err fptr fsize sclust clust dsect dir_sect dir_ptr ]
[; ;integer.h: 16: typedef int INT;
[; ;integer.h: 17: typedef unsigned int UINT;
[; ;integer.h: 20: typedef char CHAR;
[; ;integer.h: 21: typedef unsigned char UCHAR;
[; ;integer.h: 22: typedef unsigned char BYTE;
[; ;integer.h: 25: typedef short SHORT;
[; ;integer.h: 26: typedef unsigned short USHORT;
[; ;integer.h: 27: typedef unsigned short WORD;
[; ;integer.h: 28: typedef unsigned short WCHAR;
[; ;integer.h: 31: typedef long LONG;
[; ;integer.h: 32: typedef unsigned long ULONG;
[; ;integer.h: 33: typedef unsigned long DWORD;
[; ;ff.h: 67: typedef char TCHAR;
[; ;ff.h: 78: typedef struct {
[; ;ff.h: 79: BYTE fs_type;
[; ;ff.h: 80: BYTE drv;
[; ;ff.h: 81: BYTE csize;
[; ;ff.h: 82: BYTE n_fats;
[; ;ff.h: 83: BYTE wflag;
[; ;ff.h: 84: BYTE fsi_flag;
[; ;ff.h: 85: WORD id;
[; ;ff.h: 86: WORD n_rootdir;
[; ;ff.h: 94: DWORD last_clust;
[; ;ff.h: 95: DWORD free_clust;
[; ;ff.h: 100: DWORD n_fatent;
[; ;ff.h: 101: DWORD fsize;
[; ;ff.h: 102: DWORD volbase;
[; ;ff.h: 103: DWORD fatbase;
[; ;ff.h: 104: DWORD dirbase;
[; ;ff.h: 105: DWORD database;
[; ;ff.h: 106: DWORD winsect;
[; ;ff.h: 107: BYTE win[512];
[; ;ff.h: 108: } FATFS;
[; ;ff.h: 114: typedef struct {
[; ;ff.h: 115: FATFS* fs;
[; ;ff.h: 116: WORD id;
[; ;ff.h: 117: BYTE flag;
[; ;ff.h: 118: BYTE err;
[; ;ff.h: 119: DWORD fptr;
[; ;ff.h: 120: DWORD fsize;
[; ;ff.h: 121: DWORD sclust;
[; ;ff.h: 122: DWORD clust;
[; ;ff.h: 123: DWORD dsect;
[; ;ff.h: 125: DWORD dir_sect;
[; ;ff.h: 126: BYTE* dir_ptr;
[; ;ff.h: 137: } FIL;
[; ;ff.h: 143: typedef struct {
[; ;ff.h: 144: FATFS* fs;
[; ;ff.h: 145: WORD id;
[; ;ff.h: 146: WORD index;
[; ;ff.h: 147: DWORD sclust;
[; ;ff.h: 148: DWORD clust;
[; ;ff.h: 149: DWORD sect;
[; ;ff.h: 150: BYTE* dir;
[; ;ff.h: 151: BYTE* fn;
[; ;ff.h: 162: } DIR;
[; ;ff.h: 168: typedef struct {
[; ;ff.h: 169: DWORD fsize;
[; ;ff.h: 170: WORD fdate;
[; ;ff.h: 171: WORD ftime;
[; ;ff.h: 172: BYTE fattrib;
[; ;ff.h: 173: TCHAR fname[13];
[; ;ff.h: 178: } FILINFO;
[; ;ff.h: 184: typedef enum {
[; ;ff.h: 185: FR_OK = 0,
[; ;ff.h: 186: FR_DISK_ERR,
[; ;ff.h: 187: FR_INT_ERR,
[; ;ff.h: 188: FR_NOT_READY,
[; ;ff.h: 189: FR_NO_FILE,
[; ;ff.h: 190: FR_NO_PATH,
[; ;ff.h: 191: FR_INVALID_NAME,
[; ;ff.h: 192: FR_DENIED,
[; ;ff.h: 193: FR_EXIST,
[; ;ff.h: 194: FR_INVALID_OBJECT,
[; ;ff.h: 195: FR_WRITE_PROTECTED,
[; ;ff.h: 196: FR_INVALID_DRIVE,
[; ;ff.h: 197: FR_NOT_ENABLED,
[; ;ff.h: 198: FR_NO_FILESYSTEM,
[; ;ff.h: 199: FR_MKFS_ABORTED,
[; ;ff.h: 200: FR_TIMEOUT,
[; ;ff.h: 201: FR_LOCKED,
[; ;ff.h: 202: FR_NOT_ENOUGH_CORE,
[; ;ff.h: 203: FR_TOO_MANY_OPEN_FILES,
[; ;ff.h: 204: FR_INVALID_PARAMETER
[; ;ff.h: 205: } FRESULT;
[; ;ff.h: 212: FRESULT f_open (FIL* fp, const TCHAR* path, BYTE mode);
[; ;ff.h: 213: FRESULT f_close (FIL* fp);
[; ;ff.h: 214: FRESULT f_read (FIL* fp, void* buff, UINT btr, UINT* br);
[; ;ff.h: 215: FRESULT f_write (FIL* fp, const void* buff, UINT btw, UINT* bw);
[; ;ff.h: 216: FRESULT f_forward (FIL* fp, UINT(*func)(const BYTE*,UINT), UINT btf, UINT* bf);
[; ;ff.h: 217: FRESULT f_lseek (FIL* fp, DWORD ofs);
[; ;ff.h: 218: FRESULT f_truncate (FIL* fp);
[; ;ff.h: 219: FRESULT f_sync (FIL* fp);
[; ;ff.h: 220: FRESULT f_opendir (DIR* dp, const TCHAR* path);
[; ;ff.h: 221: FRESULT f_closedir (DIR* dp);
[; ;ff.h: 222: FRESULT f_readdir (DIR* dp, FILINFO* fno);
[; ;ff.h: 223: FRESULT f_findfirst (DIR* dp, FILINFO* fno, const TCHAR* path, const TCHAR* pattern);
[; ;ff.h: 224: FRESULT f_findnext (DIR* dp, FILINFO* fno);
[; ;ff.h: 225: FRESULT f_mkdir (const TCHAR* path);
[; ;ff.h: 226: FRESULT f_unlink (const TCHAR* path);
[; ;ff.h: 227: FRESULT f_rename (const TCHAR* path_old, const TCHAR* path_new);
[; ;ff.h: 228: FRESULT f_stat (const TCHAR* path, FILINFO* fno);
[; ;ff.h: 229: FRESULT f_chmod (const TCHAR* path, BYTE attr, BYTE mask);
[; ;ff.h: 230: FRESULT f_utime (const TCHAR* path, const FILINFO* fno);
[; ;ff.h: 231: FRESULT f_chdir (const TCHAR* path);
[; ;ff.h: 232: FRESULT f_chdrive (const TCHAR* path);
[; ;ff.h: 233: FRESULT f_getcwd (TCHAR* buff, UINT len);
[; ;ff.h: 234: FRESULT f_getfree (const TCHAR* path, DWORD* nclst, FATFS** fatfs);
[; ;ff.h: 235: FRESULT f_getlabel (const TCHAR* path, TCHAR* label, DWORD* vsn);
[; ;ff.h: 236: FRESULT f_setlabel (const TCHAR* label);
[; ;ff.h: 237: FRESULT f_mount (FATFS* fs, const TCHAR* path, BYTE opt);
[; ;ff.h: 238: FRESULT f_mkfs (const TCHAR* path, BYTE sfd, UINT au);
[; ;ff.h: 239: FRESULT f_fdisk (BYTE pdrv, const DWORD szt[], void* work);
[; ;ff.h: 240: int f_putc (TCHAR c, FIL* fp);
[; ;ff.h: 241: int f_puts (const TCHAR* str, FIL* cp);
[; ;ff.h: 242: int f_printf (FIL* fp, const TCHAR* str, ...);
[; ;ff.h: 243: TCHAR* f_gets (TCHAR* buff, int len, FIL* fp);
[; ;ff.h: 264: DWORD get_fattime (void);
[; ;diskio.h: 16: typedef BYTE DSTATUS;
[; ;diskio.h: 19: typedef enum {
[; ;diskio.h: 20: RES_OK = 0,
[; ;diskio.h: 21: RES_ERROR,
[; ;diskio.h: 22: RES_WRPRT,
[; ;diskio.h: 23: RES_NOTRDY,
[; ;diskio.h: 24: RES_PARERR
[; ;diskio.h: 25: } DRESULT;
[; ;diskio.h: 32: DSTATUS disk_initialize (BYTE pdrv);
[; ;diskio.h: 33: DSTATUS disk_status (BYTE pdrv);
[; ;diskio.h: 34: DRESULT disk_read (BYTE pdrv, BYTE* buff, DWORD sector, UINT count);
[; ;diskio.h: 35: DRESULT disk_write (BYTE pdrv, const BYTE* buff, DWORD sector, UINT count);
[; ;diskio.h: 36: DRESULT disk_ioctl (BYTE pdrv, BYTE cmd, void* buff);
"448 ff.c
[v _FatFs `*S1 ~T0 @X0 -> -> 1 `i `ux s ]
[; ;ff.c: 448: static FATFS *FatFs[1];
"449
[v _Fsid `us ~T0 @X0 1 s ]
[; ;ff.c: 449: static WORD Fsid;
"507
[v _mem_cpy `(v ~T0 @X0 1 sf3`*v`*Cv`ui ]
{
[; ;ff.c: 506: static
[; ;ff.c: 507: void mem_cpy (void* dst, const void* src, UINT cnt) {
[e :U _mem_cpy ]
[v _dst `*v ~T0 @X0 1 r1 ]
[v _src `*Cv ~T0 @X0 1 r2 ]
[v _cnt `ui ~T0 @X0 1 r3 ]
[f ]
"508
[v _d `*uc ~T0 @X0 1 a ]
[; ;ff.c: 508: BYTE *d = (BYTE*)dst;
[e = _d -> _dst `*uc ]
"509
[v _s `*Cuc ~T0 @X0 1 a ]
[; ;ff.c: 509: const BYTE *s = (const BYTE*)src;
[e = _s -> _src `*Cuc ]
[; ;ff.c: 512: while (cnt >= sizeof (int)) {
"512
[e $U 6  ]
[e :U 7 ]
{
[; ;ff.c: 513: *(int*)d = *(int*)s;
"513
[e = *U -> _d `*i *U -> _s `*i ]
[; ;ff.c: 514: d += sizeof (int); s += sizeof (int);
"514
[e =+ _d * -> -> # `i `ui `ux -> -> # *U _d `ui `ux ]
[e =+ _s * -> -> # `i `ui `ux -> -> # *U _s `ui `ux ]
[; ;ff.c: 515: cnt -= sizeof (int);
"515
[e =- _cnt -> # `i `ui ]
"516
}
[e :U 6 ]
"512
[e $ >= _cnt -> # `i `ui 7  ]
[e :U 8 ]
[; ;ff.c: 516: }
[; ;ff.c: 518: while (cnt--)
"518
[e $U 9  ]
[e :U 10 ]
[; ;ff.c: 519: *d++ = *s++;
"519
[e = *U ++ _d * -> -> 1 `i `x -> -> # *U _d `i `x *U ++ _s * -> -> 1 `i `x -> -> # *U _s `i `x ]
[e :U 9 ]
"518
[e $ != -- _cnt -> -> 1 `i `ui -> -> 0 `i `ui 10  ]
[e :U 11 ]
[; ;ff.c: 520: }
"520
[e :UE 5 ]
}
"524
[v _mem_set `(v ~T0 @X0 1 sf3`*v`i`ui ]
{
[; ;ff.c: 523: static
[; ;ff.c: 524: void mem_set (void* dst, int val, UINT cnt) {
[e :U _mem_set ]
[v _dst `*v ~T0 @X0 1 r1 ]
[v _val `i ~T0 @X0 1 r2 ]
[v _cnt `ui ~T0 @X0 1 r3 ]
[f ]
"525
[v _d `*uc ~T0 @X0 1 a ]
[; ;ff.c: 525: BYTE *d = (BYTE*)dst;
[e = _d -> _dst `*uc ]
[; ;ff.c: 527: while (cnt--)
"527
[e $U 13  ]
[e :U 14 ]
[; ;ff.c: 528: *d++ = (BYTE)val;
"528
[e = *U ++ _d * -> -> 1 `i `x -> -> # *U _d `i `x -> _val `uc ]
[e :U 13 ]
"527
[e $ != -- _cnt -> -> 1 `i `ui -> -> 0 `i `ui 14  ]
[e :U 15 ]
[; ;ff.c: 529: }
"529
[e :UE 12 ]
}
"533
[v _mem_cmp `(i ~T0 @X0 1 sf3`*Cv`*Cv`ui ]
{
[; ;ff.c: 532: static
[; ;ff.c: 533: int mem_cmp (const void* dst, const void* src, UINT cnt) {
[e :U _mem_cmp ]
[v _dst `*Cv ~T0 @X0 1 r1 ]
[v _src `*Cv ~T0 @X0 1 r2 ]
[v _cnt `ui ~T0 @X0 1 r3 ]
[f ]
"534
[v _d `*Cuc ~T0 @X0 1 a ]
[; ;ff.c: 534: const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
[e = _d -> _dst `*Cuc ]
[v _s `*Cuc ~T0 @X0 1 a ]
[e = _s -> _src `*Cuc ]
"535
[v _r `i ~T0 @X0 1 a ]
[; ;ff.c: 535: int r = 0;
[e = _r -> 0 `i ]
[; ;ff.c: 537: while (cnt-- && (r = *d++ - *s++) == 0) ;
"537
[e $U 17  ]
[e :U 18 ]
[e :U 17 ]
[e $ && != -- _cnt -> -> 1 `i `ui -> -> 0 `i `ui == = _r - -> *U ++ _d * -> -> 1 `i `x -> -> # *U _d `i `x `i -> *U ++ _s * -> -> 1 `i `x -> -> # *U _s `i `x `i -> 0 `i 18  ]
[e :U 19 ]
[; ;ff.c: 538: return r;
"538
[e ) _r ]
[e $UE 16  ]
[; ;ff.c: 539: }
"539
[e :UE 16 ]
}
"543
[v _chk_chr `(i ~T0 @X0 1 sf2`*Cuc`i ]
{
[; ;ff.c: 542: static
[; ;ff.c: 543: int chk_chr (const char* str, int chr) {
[e :U _chk_chr ]
[v _str `*Cuc ~T0 @X0 1 r1 ]
[v _chr `i ~T0 @X0 1 r2 ]
[f ]
[; ;ff.c: 544: while (*str && *str != chr) str++;
"544
[e $U 21  ]
[e :U 22 ]
[e ++ _str * -> -> 1 `i `x -> -> # *U _str `i `x ]
[e :U 21 ]
[e $ && != -> *U _str `i -> -> -> 0 `i `Cuc `i != -> *U _str `i _chr 22  ]
[e :U 23 ]
[; ;ff.c: 545: return *str;
"545
[e ) -> *U _str `i ]
[e $UE 20  ]
[; ;ff.c: 546: }
"546
[e :UE 20 ]
}
"700
[v _sync_window `(E64 ~T0 @X0 1 sf1`*S1 ]
"703
{
[; ;ff.c: 699: static
[; ;ff.c: 700: FRESULT sync_window (
[; ;ff.c: 701: FATFS* fs
[; ;ff.c: 702: )
[; ;ff.c: 703: {
[e :U _sync_window ]
"701
[v _fs `*S1 ~T0 @X0 1 r1 ]
"703
[f ]
"704
[v _wsect `ul ~T0 @X0 1 a ]
"705
[v _nf `ui ~T0 @X0 1 a ]
"706
[v _res `E64 ~T0 @X0 1 a ]
[; ;ff.c: 704: DWORD wsect;
[; ;ff.c: 705: UINT nf;
[; ;ff.c: 706: FRESULT res = FR_OK;
[e = _res -> . `E64 0 `E64 ]
[; ;ff.c: 709: if (fs->wflag) {
"709
[e $ ! != -> . *U _fs 4 `i -> -> -> 0 `i `uc `i 25  ]
{
[; ;ff.c: 710: wsect = fs->winsect;
"710
[e = _wsect . *U _fs 16 ]
[; ;ff.c: 711: if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
"711
[e $ ! != -> ( _disk_write (4 , , , . *U _fs 1 -> &U . *U _fs 17 `*Cuc _wsect -> -> 1 `i `ui `i -> . `E195 0 `i 26  ]
{
[; ;ff.c: 712: res = FR_DISK_ERR;
"712
[e = _res -> . `E64 1 `E64 ]
"713
}
[; ;ff.c: 713: } else {
[e $U 27  ]
[e :U 26 ]
{
[; ;ff.c: 714: fs->wflag = 0;
"714
[e = . *U _fs 4 -> -> 0 `i `uc ]
[; ;ff.c: 715: if (wsect - fs->fatbase < fs->fsize) {
"715
[e $ ! < - _wsect . *U _fs 13 . *U _fs 11 28  ]
{
[; ;ff.c: 716: for (nf = fs->n_fats; nf >= 2; nf--) {
"716
{
[e = _nf -> . *U _fs 3 `ui ]
[e $ >= _nf -> -> 2 `i `ui 29  ]
[e $U 30  ]
[e :U 29 ]
{
[; ;ff.c: 717: wsect += fs->fsize;
"717
[e =+ _wsect . *U _fs 11 ]
[; ;ff.c: 718: disk_write(fs->drv, fs->win, wsect, 1);
"718
[e ( _disk_write (4 , , , . *U _fs 1 -> &U . *U _fs 17 `*Cuc _wsect -> -> 1 `i `ui ]
"719
}
"716
[e -- _nf -> -> 1 `i `ui ]
[e $ >= _nf -> -> 2 `i `ui 29  ]
[e :U 30 ]
"719
}
"720
}
[e :U 28 ]
"721
}
[e :U 27 ]
"722
}
[e :U 25 ]
[; ;ff.c: 719: }
[; ;ff.c: 720: }
[; ;ff.c: 721: }
[; ;ff.c: 722: }
[; ;ff.c: 723: return res;
"723
[e ) _res ]
[e $UE 24  ]
[; ;ff.c: 724: }
"724
[e :UE 24 ]
}
"729
[v _move_window `(E64 ~T0 @X0 1 sf2`*S1`ul ]
"733
{
[; ;ff.c: 728: static
[; ;ff.c: 729: FRESULT move_window (
[; ;ff.c: 730: FATFS* fs,
[; ;ff.c: 731: DWORD sector
[; ;ff.c: 732: )
[; ;ff.c: 733: {
[e :U _move_window ]
"730
[v _fs `*S1 ~T0 @X0 1 r1 ]
"731
[v _sector `ul ~T0 @X0 1 r2 ]
"733
[f ]
"734
[v _res `E64 ~T0 @X0 1 a ]
[; ;ff.c: 734: FRESULT res = FR_OK;
[e = _res -> . `E64 0 `E64 ]
[; ;ff.c: 737: if (sector != fs->winsect) {
"737
[e $ ! != _sector . *U _fs 16 33  ]
{
[; ;ff.c: 739: res = sync_window(fs);
"739
[e = _res ( _sync_window (1 _fs ]
[; ;ff.c: 741: if (res == FR_OK) {
"741
[e $ ! == -> _res `i -> . `E64 0 `i 34  ]
{
[; ;ff.c: 742: if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
"742
[e $ ! != -> ( _disk_read (4 , , , . *U _fs 1 &U . *U _fs 17 _sector -> -> 1 `i `ui `i -> . `E195 0 `i 35  ]
{
[; ;ff.c: 743: sector = 0xFFFFFFFF;
"743
[e = _sector -> -1 `ul ]
[; ;ff.c: 744: res = FR_DISK_ERR;
"744
[e = _res -> . `E64 1 `E64 ]
"745
}
[e :U 35 ]
[; ;ff.c: 745: }
[; ;ff.c: 746: fs->winsect = sector;
"746
[e = . *U _fs 16 _sector ]
"747
}
[e :U 34 ]
"748
}
[e :U 33 ]
[; ;ff.c: 747: }
[; ;ff.c: 748: }
[; ;ff.c: 749: return res;
"749
[e ) _res ]
[e $UE 32  ]
[; ;ff.c: 750: }
"750
[e :UE 32 ]
}
"760
[v _sync_fs `(E64 ~T0 @X0 1 sf1`*S1 ]
"763
{
[; ;ff.c: 759: static
[; ;ff.c: 760: FRESULT sync_fs (
[; ;ff.c: 761: FATFS* fs
[; ;ff.c: 762: )
[; ;ff.c: 763: {
[e :U _sync_fs ]
"761
[v _fs `*S1 ~T0 @X0 1 r1 ]
"763
[f ]
"764
[v _res `E64 ~T0 @X0 1 a ]
[; ;ff.c: 764: FRESULT res;
[; ;ff.c: 767: res = sync_window(fs);
"767
[e = _res ( _sync_window (1 _fs ]
[; ;ff.c: 768: if (res == FR_OK) {
"768
[e $ ! == -> _res `i -> . `E64 0 `i 37  ]
{
[; ;ff.c: 770: if (fs->fs_type == 3 && fs->fsi_flag == 1) {
"770
[e $ ! && == -> . *U _fs 0 `i -> 3 `i == -> . *U _fs 5 `i -> 1 `i 38  ]
{
[; ;ff.c: 772: mem_set(fs->win, 0, ((UINT)512));
"772
[e ( _mem_set (3 , , -> &U . *U _fs 17 `*v -> 0 `i -> -> 512 `i `ui ]
[; ;ff.c: 773: *(WORD*)(BYTE*)(fs->win + 510)=(WORD)(0xAA55);
"773
[e = *U -> + &U . *U _fs 17 * -> -> 510 `i `x -> -> # *U &U . *U _fs 17 `i `x `*us -> -> 43605 `ui `us ]
[; ;ff.c: 774: *(DWORD*)(BYTE*)(fs->win + 0)=(DWORD)(0x41615252);
"774
[e = *U -> + &U . *U _fs 17 * -> -> 0 `i `x -> -> # *U &U . *U _fs 17 `i `x `*ul -> -> 1096897106 `l `ul ]
[; ;ff.c: 775: *(DWORD*)(BYTE*)(fs->win + 484)=(DWORD)(0x61417272);
"775
[e = *U -> + &U . *U _fs 17 * -> -> 484 `i `x -> -> # *U &U . *U _fs 17 `i `x `*ul -> -> 1631679090 `l `ul ]
[; ;ff.c: 776: *(DWORD*)(BYTE*)(fs->win + 488)=(DWORD)(fs->free_clust);
"776
[e = *U -> + &U . *U _fs 17 * -> -> 488 `i `x -> -> # *U &U . *U _fs 17 `i `x `*ul . *U _fs 9 ]
[; ;ff.c: 777: *(DWORD*)(BYTE*)(fs->win + 492)=(DWORD)(fs->last_clust);
"777
[e = *U -> + &U . *U _fs 17 * -> -> 492 `i `x -> -> # *U &U . *U _fs 17 `i `x `*ul . *U _fs 8 ]
[; ;ff.c: 779: fs->winsect = fs->volbase + 1;
"779
[e = . *U _fs 16 + . *U _fs 12 -> -> -> 1 `i `l `ul ]
[; ;ff.c: 780: disk_write(fs->drv, fs->win, fs->winsect, 1);
"780
[e ( _disk_write (4 , , , . *U _fs 1 -> &U . *U _fs 17 `*Cuc . *U _fs 16 -> -> 1 `i `ui ]
[; ;ff.c: 781: fs->fsi_flag = 0;
"781
[e = . *U _fs 5 -> -> 0 `i `uc ]
"782
}
[e :U 38 ]
[; ;ff.c: 782: }
[; ;ff.c: 784: if (disk_ioctl(fs->drv, 0, 0) != RES_OK)
"784
[e $ ! != -> ( _disk_ioctl (3 , , . *U _fs 1 -> -> 0 `i `uc -> -> 0 `i `*v `i -> . `E195 0 `i 39  ]
[; ;ff.c: 785: res = FR_DISK_ERR;
"785
[e = _res -> . `E64 1 `E64 ]
[e :U 39 ]
"786
}
[e :U 37 ]
[; ;ff.c: 786: }
[; ;ff.c: 788: return res;
"788
[e ) _res ]
[e $UE 36  ]
[; ;ff.c: 789: }
"789
[e :UE 36 ]
}
"800
[v _clust2sect `(ul ~T0 @X0 1 ef2`*S1`ul ]
"804
{
[; ;ff.c: 800: DWORD clust2sect (
[; ;ff.c: 801: FATFS* fs,
[; ;ff.c: 802: DWORD clst
[; ;ff.c: 803: )
[; ;ff.c: 804: {
[e :U _clust2sect ]
"801
[v _fs `*S1 ~T0 @X0 1 r1 ]
"802
[v _clst `ul ~T0 @X0 1 r2 ]
"804
[f ]
[; ;ff.c: 805: clst -= 2;
"805
[e =- _clst -> -> -> 2 `i `l `ul ]
[; ;ff.c: 806: if (clst >= fs->n_fatent - 2) return 0;
"806
[e $ ! >= _clst - . *U _fs 10 -> -> -> 2 `i `l `ul 41  ]
[e ) -> -> -> 0 `i `l `ul ]
[e $UE 40  ]
[e :U 41 ]
[; ;ff.c: 807: return clst * fs->csize + fs->database;
"807
[e ) + * _clst -> . *U _fs 2 `ul . *U _fs 15 ]
[e $UE 40  ]
[; ;ff.c: 808: }
"808
[e :UE 40 ]
}
"818
[v _get_fat `(ul ~T0 @X0 1 ef2`*S1`ul ]
"822
{
[; ;ff.c: 818: DWORD get_fat (
[; ;ff.c: 819: FATFS* fs,
[; ;ff.c: 820: DWORD clst
[; ;ff.c: 821: )
[; ;ff.c: 822: {
[e :U _get_fat ]
"819
[v _fs `*S1 ~T0 @X0 1 r1 ]
"820
[v _clst `ul ~T0 @X0 1 r2 ]
"822
[f ]
"823
[v _wc `ui ~T0 @X0 1 a ]
[v _bc `ui ~T0 @X0 1 a ]
"824
[v _p `*uc ~T0 @X0 1 a ]
"825
[v _val `ul ~T0 @X0 1 a ]
[; ;ff.c: 823: UINT wc, bc;
[; ;ff.c: 824: BYTE *p;
[; ;ff.c: 825: DWORD val;
[; ;ff.c: 828: if (clst < 2 || clst >= fs->n_fatent) {
"828
[e $ ! || < _clst -> -> -> 2 `i `l `ul >= _clst . *U _fs 10 43  ]
{
[; ;ff.c: 829: val = 1;
"829
[e = _val -> -> -> 1 `i `l `ul ]
"831
}
[; ;ff.c: 831: } else {
[e $U 44  ]
[e :U 43 ]
{
[; ;ff.c: 832: val = 0xFFFFFFFF;
"832
[e = _val -> -1 `ul ]
[; ;ff.c: 834: switch (fs->fs_type) {
"834
[e $U 46  ]
{
[; ;ff.c: 835: case 1 :
"835
[e :U 47 ]
[; ;ff.c: 836: bc = (UINT)clst; bc += bc / 2;
"836
[e = _bc -> _clst `ui ]
[e =+ _bc / _bc -> -> 2 `i `ui ]
[; ;ff.c: 837: if (move_window(fs, fs->fatbase + (bc / ((UINT)512))) != FR_OK) break;
"837
[e $ ! != -> ( _move_window (2 , _fs + . *U _fs 13 -> / _bc -> -> 512 `i `ui `ul `i -> . `E64 0 `i 48  ]
[e $U 45  ]
[e :U 48 ]
[; ;ff.c: 838: wc = fs->win[bc++ % ((UINT)512)];
"838
[e = _wc -> *U + &U . *U _fs 17 * -> % ++ _bc -> -> 1 `i `ui -> -> 512 `i `ui `ux -> -> # *U &U . *U _fs 17 `ui `ux `ui ]
[; ;ff.c: 839: if (move_window(fs, fs->fatbase + (bc / ((UINT)512))) != FR_OK) break;
"839
[e $ ! != -> ( _move_window (2 , _fs + . *U _fs 13 -> / _bc -> -> 512 `i `ui `ul `i -> . `E64 0 `i 49  ]
[e $U 45  ]
[e :U 49 ]
[; ;ff.c: 840: wc |= fs->win[bc % ((UINT)512)] << 8;
"840
[e =| _wc -> << -> *U + &U . *U _fs 17 * -> % _bc -> -> 512 `i `ui `ux -> -> # *U &U . *U _fs 17 `ui `ux `i -> 8 `i `ui ]
[; ;ff.c: 841: val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
"841
[e = _val -> ? != & _clst -> -> -> 1 `i `l `ul -> -> 0 `i `ul : >> _wc -> 4 `i & _wc -> -> 4095 `i `ui `ul ]
[; ;ff.c: 842: break;
"842
[e $U 45  ]
[; ;ff.c: 844: case 2 :
"844
[e :U 50 ]
[; ;ff.c: 845: if (move_window(fs, fs->fatbase + (clst / (((UINT)512) / 2))) != FR_OK) break;
"845
[e $ ! != -> ( _move_window (2 , _fs + . *U _fs 13 / _clst -> / -> -> 512 `i `ui -> -> 2 `i `ui `ul `i -> . `E64 0 `i 51  ]
[e $U 45  ]
[e :U 51 ]
[; ;ff.c: 846: p = &fs->win[clst * 2 % ((UINT)512)];
"846
[e = _p &U *U + &U . *U _fs 17 * -> % * _clst -> -> -> 2 `i `l `ul -> -> -> 512 `i `ui `ul `ux -> -> # *U &U . *U _fs 17 `ui `ux ]
[; ;ff.c: 847: val = (WORD)(*(WORD*)(BYTE*)(p));
"847
[e = _val -> *U -> _p `*us `ul ]
[; ;ff.c: 848: break;
"848
[e $U 45  ]
[; ;ff.c: 850: case 3 :
"850
[e :U 52 ]
[; ;ff.c: 851: if (move_window(fs, fs->fatbase + (clst / (((UINT)512) / 4))) != FR_OK) break;
"851
[e $ ! != -> ( _move_window (2 , _fs + . *U _fs 13 / _clst -> / -> -> 512 `i `ui -> -> 4 `i `ui `ul `i -> . `E64 0 `i 53  ]
[e $U 45  ]
[e :U 53 ]
[; ;ff.c: 852: p = &fs->win[clst * 4 % ((UINT)512)];
"852
[e = _p &U *U + &U . *U _fs 17 * -> % * _clst -> -> -> 4 `i `l `ul -> -> -> 512 `i `ui `ul `ux -> -> # *U &U . *U _fs 17 `ui `ux ]
[; ;ff.c: 853: val = (DWORD)(*(DWORD*)(BYTE*)(p)) & 0x0FFFFFFF;
"853
[e = _val & *U -> _p `*ul -> -> 268435455 `l `ul ]
[; ;ff.c: 854: break;
"854
[e $U 45  ]
[; ;ff.c: 856: default:
"856
[e :U 54 ]
[; ;ff.c: 857: val = 1;
"857
[e = _val -> -> -> 1 `i `l `ul ]
"858
}
[; ;ff.c: 858: }
[e $U 45  ]
"834
[e :U 46 ]
[e [\ . *U _fs 0 , $ -> -> 1 `i `uc 47
 , $ -> -> 2 `i `uc 50
 , $ -> -> 3 `i `uc 52
 54 ]
"858
[e :U 45 ]
"859
}
[e :U 44 ]
[; ;ff.c: 859: }
[; ;ff.c: 861: return val;
"861
[e ) _val ]
[e $UE 42  ]
[; ;ff.c: 862: }
"862
[e :UE 42 ]
}
"873
[v _put_fat `(E64 ~T0 @X0 1 ef3`*S1`ul`ul ]
"878
{
[; ;ff.c: 873: FRESULT put_fat (
[; ;ff.c: 874: FATFS* fs,
[; ;ff.c: 875: DWORD clst,
[; ;ff.c: 876: DWORD val
[; ;ff.c: 877: )
[; ;ff.c: 878: {
[e :U _put_fat ]
"874
[v _fs `*S1 ~T0 @X0 1 r1 ]
"875
[v _clst `ul ~T0 @X0 1 r2 ]
"876
[v _val `ul ~T0 @X0 1 r3 ]
"878
[f ]
"879
[v _bc `ui ~T0 @X0 1 a ]
"880
[v _p `*uc ~T0 @X0 1 a ]
"881
[v _res `E64 ~T0 @X0 1 a ]
[; ;ff.c: 879: UINT bc;
[; ;ff.c: 880: BYTE *p;
[; ;ff.c: 881: FRESULT res;
[; ;ff.c: 884: if (clst < 2 || clst >= fs->n_fatent) {
"884
[e $ ! || < _clst -> -> -> 2 `i `l `ul >= _clst . *U _fs 10 56  ]
{
[; ;ff.c: 885: res = FR_INT_ERR;
"885
[e = _res -> . `E64 2 `E64 ]
"887
}
[; ;ff.c: 887: } else {
[e $U 57  ]
[e :U 56 ]
{
[; ;ff.c: 888: switch (fs->fs_type) {
"888
[e $U 59  ]
{
[; ;ff.c: 889: case 1 :
"889
[e :U 60 ]
[; ;ff.c: 890: bc = (UINT)clst; bc += bc / 2;
"890
[e = _bc -> _clst `ui ]
[e =+ _bc / _bc -> -> 2 `i `ui ]
[; ;ff.c: 891: res = move_window(fs, fs->fatbase + (bc / ((UINT)512)));
"891
[e = _res ( _move_window (2 , _fs + . *U _fs 13 -> / _bc -> -> 512 `i `ui `ul ]
[; ;ff.c: 892: if (res != FR_OK) break;
"892
[e $ ! != -> _res `i -> . `E64 0 `i 61  ]
[e $U 58  ]
[e :U 61 ]
[; ;ff.c: 893: p = &fs->win[bc++ % ((UINT)512)];
"893
[e = _p &U *U + &U . *U _fs 17 * -> % ++ _bc -> -> 1 `i `ui -> -> 512 `i `ui `ux -> -> # *U &U . *U _fs 17 `ui `ux ]
[; ;ff.c: 894: *p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
"894
[e = *U _p -> ? != & _clst -> -> -> 1 `i `l `ul -> -> 0 `i `ul : | & -> *U _p `i -> 15 `i << -> -> _val `uc `i -> 4 `i -> -> _val `uc `i `uc ]
[; ;ff.c: 895: fs->wflag = 1;
"895
[e = . *U _fs 4 -> -> 1 `i `uc ]
[; ;ff.c: 896: res = move_window(fs, fs->fatbase + (bc / ((UINT)512)));
"896
[e = _res ( _move_window (2 , _fs + . *U _fs 13 -> / _bc -> -> 512 `i `ui `ul ]
[; ;ff.c: 897: if (res != FR_OK) break;
"897
[e $ ! != -> _res `i -> . `E64 0 `i 62  ]
[e $U 58  ]
[e :U 62 ]
[; ;ff.c: 898: p = &fs->win[bc % ((UINT)512)];
"898
[e = _p &U *U + &U . *U _fs 17 * -> % _bc -> -> 512 `i `ui `ux -> -> # *U &U . *U _fs 17 `ui `ux ]
[; ;ff.c: 899: *p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
"899
[e = *U _p -> ? != & _clst -> -> -> 1 `i `l `ul -> -> 0 `i `ul : -> -> >> _val -> 4 `i `uc `i | & -> *U _p `i -> 240 `i & -> -> >> _val -> 8 `i `uc `i -> 15 `i `uc ]
[; ;ff.c: 900: fs->wflag = 1;
"900
[e = . *U _fs 4 -> -> 1 `i `uc ]
[; ;ff.c: 901: break;
"901
[e $U 58  ]
[; ;ff.c: 903: case 2 :
"903
[e :U 63 ]
[; ;ff.c: 904: res = move_window(fs, fs->fatbase + (clst / (((UINT)512) / 2)));
"904
[e = _res ( _move_window (2 , _fs + . *U _fs 13 / _clst -> / -> -> 512 `i `ui -> -> 2 `i `ui `ul ]
[; ;ff.c: 905: if (res != FR_OK) break;
"905
[e $ ! != -> _res `i -> . `E64 0 `i 64  ]
[e $U 58  ]
[e :U 64 ]
[; ;ff.c: 906: p = &fs->win[clst * 2 % ((UINT)512)];
"906
[e = _p &U *U + &U . *U _fs 17 * -> % * _clst -> -> -> 2 `i `l `ul -> -> -> 512 `i `ui `ul `ux -> -> # *U &U . *U _fs 17 `ui `ux ]
[; ;ff.c: 907: *(WORD*)(BYTE*)(p)=(WORD)((WORD)val);
"907
[e = *U -> _p `*us -> _val `us ]
[; ;ff.c: 908: fs->wflag = 1;
"908
[e = . *U _fs 4 -> -> 1 `i `uc ]
[; ;ff.c: 909: break;
"909
[e $U 58  ]
[; ;ff.c: 911: case 3 :
"911
[e :U 65 ]
[; ;ff.c: 912: res = move_window(fs, fs->fatbase + (clst / (((UINT)512) / 4)));
"912
[e = _res ( _move_window (2 , _fs + . *U _fs 13 / _clst -> / -> -> 512 `i `ui -> -> 4 `i `ui `ul ]
[; ;ff.c: 913: if (res != FR_OK) break;
"913
[e $ ! != -> _res `i -> . `E64 0 `i 66  ]
[e $U 58  ]
[e :U 66 ]
[; ;ff.c: 914: p = &fs->win[clst * 4 % ((UINT)512)];
"914
[e = _p &U *U + &U . *U _fs 17 * -> % * _clst -> -> -> 4 `i `l `ul -> -> -> 512 `i `ui `ul `ux -> -> # *U &U . *U _fs 17 `ui `ux ]
[; ;ff.c: 915: val |= (DWORD)(*(DWORD*)(BYTE*)(p)) & 0xF0000000;
"915
[e =| _val & *U -> _p `*ul -> -268435456 `ul ]
[; ;ff.c: 916: *(DWORD*)(BYTE*)(p)=(DWORD)(val);
"916
[e = *U -> _p `*ul _val ]
[; ;ff.c: 917: fs->wflag = 1;
"917
[e = . *U _fs 4 -> -> 1 `i `uc ]
[; ;ff.c: 918: break;
"918
[e $U 58  ]
[; ;ff.c: 920: default :
"920
[e :U 67 ]
[; ;ff.c: 921: res = FR_INT_ERR;
"921
[e = _res -> . `E64 2 `E64 ]
"922
}
[; ;ff.c: 922: }
[e $U 58  ]
"888
[e :U 59 ]
[e [\ . *U _fs 0 , $ -> -> 1 `i `uc 60
 , $ -> -> 2 `i `uc 63
 , $ -> -> 3 `i `uc 65
 67 ]
"922
[e :U 58 ]
"923
}
[e :U 57 ]
[; ;ff.c: 923: }
[; ;ff.c: 925: return res;
"925
[e ) _res ]
[e $UE 55  ]
[; ;ff.c: 926: }
"926
[e :UE 55 ]
}
"937
[v _remove_chain `(E64 ~T0 @X0 1 sf2`*S1`ul ]
"941
{
[; ;ff.c: 936: static
[; ;ff.c: 937: FRESULT remove_chain (
[; ;ff.c: 938: FATFS* fs,
[; ;ff.c: 939: DWORD clst
[; ;ff.c: 940: )
[; ;ff.c: 941: {
[e :U _remove_chain ]
"938
[v _fs `*S1 ~T0 @X0 1 r1 ]
"939
[v _clst `ul ~T0 @X0 1 r2 ]
"941
[f ]
"942
[v _res `E64 ~T0 @X0 1 a ]
"943
[v _nxt `ul ~T0 @X0 1 a ]
[; ;ff.c: 942: FRESULT res;
[; ;ff.c: 943: DWORD nxt;
[; ;ff.c: 948: if (clst < 2 || clst >= fs->n_fatent) {
"948
[e $ ! || < _clst -> -> -> 2 `i `l `ul >= _clst . *U _fs 10 69  ]
{
[; ;ff.c: 949: res = FR_INT_ERR;
"949
[e = _res -> . `E64 2 `E64 ]
"951
}
[; ;ff.c: 951: } else {
[e $U 70  ]
[e :U 69 ]
{
[; ;ff.c: 952: res = FR_OK;
"952
[e = _res -> . `E64 0 `E64 ]
[; ;ff.c: 953: while (clst < fs->n_fatent) {
"953
[e $U 71  ]
[e :U 72 ]
{
[; ;ff.c: 954: nxt = get_fat(fs, clst);
"954
[e = _nxt ( _get_fat (2 , _fs _clst ]
[; ;ff.c: 955: if (nxt == 0) break;
"955
[e $ ! == _nxt -> -> -> 0 `i `l `ul 74  ]
[e $U 73  ]
[e :U 74 ]
[; ;ff.c: 956: if (nxt == 1) { res = FR_INT_ERR; break; }
"956
[e $ ! == _nxt -> -> -> 1 `i `l `ul 75  ]
{
[e = _res -> . `E64 2 `E64 ]
[e $U 73  ]
}
[e :U 75 ]
[; ;ff.c: 957: if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
"957
[e $ ! == _nxt -> -1 `ul 76  ]
{
[e = _res -> . `E64 1 `E64 ]
[e $U 73  ]
}
[e :U 76 ]
[; ;ff.c: 958: res = put_fat(fs, clst, 0);
"958
[e = _res ( _put_fat (3 , , _fs _clst -> -> -> 0 `i `l `ul ]
[; ;ff.c: 959: if (res != FR_OK) break;
"959
[e $ ! != -> _res `i -> . `E64 0 `i 77  ]
[e $U 73  ]
[e :U 77 ]
[; ;ff.c: 960: if (fs->free_clust != 0xFFFFFFFF) {
"960
[e $ ! != . *U _fs 9 -> -1 `ul 78  ]
{
[; ;ff.c: 961: fs->free_clust++;
"961
[e ++ . *U _fs 9 -> -> -> 1 `i `l `ul ]
[; ;ff.c: 962: fs->fsi_flag |= 1;
"962
[e =| . *U _fs 5 -> -> 1 `i `uc ]
"963
}
[e :U 78 ]
[; ;ff.c: 963: }
[; ;ff.c: 974: clst = nxt;
"974
[e = _clst _nxt ]
"975
}
[e :U 71 ]
"953
[e $ < _clst . *U _fs 10 72  ]
[e :U 73 ]
"976
}
[e :U 70 ]
[; ;ff.c: 975: }
[; ;ff.c: 976: }
[; ;ff.c: 978: return res;
"978
[e ) _res ]
[e $UE 68  ]
[; ;ff.c: 979: }
"979
[e :UE 68 ]
}
"990
[v _create_chain `(ul ~T0 @X0 1 sf2`*S1`ul ]
"994
{
[; ;ff.c: 989: static
[; ;ff.c: 990: DWORD create_chain (
[; ;ff.c: 991: FATFS* fs,
[; ;ff.c: 992: DWORD clst
[; ;ff.c: 993: )
[; ;ff.c: 994: {
[e :U _create_chain ]
"991
[v _fs `*S1 ~T0 @X0 1 r1 ]
"992
[v _clst `ul ~T0 @X0 1 r2 ]
"994
[f ]
"995
[v _cs `ul ~T0 @X0 1 a ]
[v _ncl `ul ~T0 @X0 1 a ]
[v _scl `ul ~T0 @X0 1 a ]
"996
[v _res `E64 ~T0 @X0 1 a ]
[; ;ff.c: 995: DWORD cs, ncl, scl;
[; ;ff.c: 996: FRESULT res;
[; ;ff.c: 999: if (clst == 0) {
"999
[e $ ! == _clst -> -> -> 0 `i `l `ul 80  ]
{
[; ;ff.c: 1000: scl = fs->last_clust;
"1000
[e = _scl . *U _fs 8 ]
[; ;ff.c: 1001: if (!scl || scl >= fs->n_fatent) scl = 1;
"1001
[e $ ! || ! != _scl -> -> 0 `i `ul >= _scl . *U _fs 10 81  ]
[e = _scl -> -> -> 1 `i `l `ul ]
[e :U 81 ]
"1002
}
[; ;ff.c: 1002: }
[e $U 82  ]
"1003
[e :U 80 ]
[; ;ff.c: 1003: else {
{
[; ;ff.c: 1004: cs = get_fat(fs, clst);
"1004
[e = _cs ( _get_fat (2 , _fs _clst ]
[; ;ff.c: 1005: if (cs < 2) return 1;
"1005
[e $ ! < _cs -> -> -> 2 `i `l `ul 83  ]
[e ) -> -> -> 1 `i `l `ul ]
[e $UE 79  ]
[e :U 83 ]
[; ;ff.c: 1006: if (cs == 0xFFFFFFFF) return cs;
"1006
[e $ ! == _cs -> -1 `ul 84  ]
[e ) _cs ]
[e $UE 79  ]
[e :U 84 ]
[; ;ff.c: 1007: if (cs < fs->n_fatent) return cs;
"1007
[e $ ! < _cs . *U _fs 10 85  ]
[e ) _cs ]
[e $UE 79  ]
[e :U 85 ]
[; ;ff.c: 1008: scl = clst;
"1008
[e = _scl _clst ]
"1009
}
[e :U 82 ]
[; ;ff.c: 1009: }
[; ;ff.c: 1011: ncl = scl;
"1011
[e = _ncl _scl ]
[; ;ff.c: 1012: for (;;) {
"1012
{
[e :U 86 ]
{
[; ;ff.c: 1013: ncl++;
"1013
[e ++ _ncl -> -> -> 1 `i `l `ul ]
[; ;ff.c: 1014: if (ncl >= fs->n_fatent) {
"1014
[e $ ! >= _ncl . *U _fs 10 89  ]
{
[; ;ff.c: 1015: ncl = 2;
"1015
[e = _ncl -> -> -> 2 `i `l `ul ]
[; ;ff.c: 1016: if (ncl > scl) return 0;
"1016
[e $ ! > _ncl _scl 90  ]
[e ) -> -> -> 0 `i `l `ul ]
[e $UE 79  ]
[e :U 90 ]
"1017
}
[e :U 89 ]
[; ;ff.c: 1017: }
[; ;ff.c: 1018: cs = get_fat(fs, ncl);
"1018
[e = _cs ( _get_fat (2 , _fs _ncl ]
[; ;ff.c: 1019: if (cs == 0) break;
"1019
[e $ ! == _cs -> -> -> 0 `i `l `ul 91  ]
[e $U 87  ]
[e :U 91 ]
[; ;ff.c: 1020: if (cs == 0xFFFFFFFF || cs == 1)
"1020
[e $ ! || == _cs -> -1 `ul == _cs -> -> -> 1 `i `l `ul 92  ]
[; ;ff.c: 1021: return cs;
"1021
[e ) _cs ]
[e $UE 79  ]
[e :U 92 ]
[; ;ff.c: 1022: if (ncl == scl) return 0;
"1022
[e $ ! == _ncl _scl 93  ]
[e ) -> -> -> 0 `i `l `ul ]
[e $UE 79  ]
[e :U 93 ]
"1023
}
[; ;ff.c: 1023: }
[e $U 86  ]
[e :U 87 ]
}
[; ;ff.c: 1025: res = put_fat(fs, ncl, 0x0FFFFFFF);
"1025
[e = _res ( _put_fat (3 , , _fs _ncl -> -> 268435455 `l `ul ]
[; ;ff.c: 1026: if (res == FR_OK && clst != 0) {
"1026
[e $ ! && == -> _res `i -> . `E64 0 `i != _clst -> -> -> 0 `i `l `ul 94  ]
{
[; ;ff.c: 1027: res = put_fat(fs, clst, ncl);
"1027
[e = _res ( _put_fat (3 , , _fs _clst _ncl ]
"1028
}
[e :U 94 ]
[; ;ff.c: 1028: }
[; ;ff.c: 1029: if (res == FR_OK) {
"1029
[e $ ! == -> _res `i -> . `E64 0 `i 95  ]
{
[; ;ff.c: 1030: fs->last_clust = ncl;
"1030
[e = . *U _fs 8 _ncl ]
[; ;ff.c: 1031: if (fs->free_clust != 0xFFFFFFFF) {
"1031
[e $ ! != . *U _fs 9 -> -1 `ul 96  ]
{
[; ;ff.c: 1032: fs->free_clust--;
"1032
[e -- . *U _fs 9 -> -> -> 1 `i `l `ul ]
[; ;ff.c: 1033: fs->fsi_flag |= 1;
"1033
[e =| . *U _fs 5 -> -> 1 `i `uc ]
"1034
}
[e :U 96 ]
"1035
}
[; ;ff.c: 1034: }
[; ;ff.c: 1035: } else {
[e $U 97  ]
[e :U 95 ]
{
[; ;ff.c: 1036: ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
"1036
[e = _ncl ? == -> _res `i -> . `E64 1 `i : -> -1 `ul -> -> -> 1 `i `l `ul ]
"1037
}
[e :U 97 ]
[; ;ff.c: 1037: }
[; ;ff.c: 1039: return ncl;
"1039
[e ) _ncl ]
[e $UE 79  ]
[; ;ff.c: 1040: }
"1040
[e :UE 79 ]
}
"1080
[v _dir_sdi `(E64 ~T0 @X0 1 sf2`*S3`ui ]
"1084
{
[; ;ff.c: 1079: static
[; ;ff.c: 1080: FRESULT dir_sdi (
[; ;ff.c: 1081: DIR* dp,
[; ;ff.c: 1082: UINT idx
[; ;ff.c: 1083: )
[; ;ff.c: 1084: {
[e :U _dir_sdi ]
"1081
[v _dp `*S3 ~T0 @X0 1 r1 ]
"1082
[v _idx `ui ~T0 @X0 1 r2 ]
"1084
[f ]
"1085
[v _clst `ul ~T0 @X0 1 a ]
[v _sect `ul ~T0 @X0 1 a ]
"1086
[v _ic `ui ~T0 @X0 1 a ]
[; ;ff.c: 1085: DWORD clst, sect;
[; ;ff.c: 1086: UINT ic;
[; ;ff.c: 1089: dp->index = (WORD)idx;
"1089
[e = . *U _dp 2 -> _idx `us ]
[; ;ff.c: 1090: clst = dp->sclust;
"1090
[e = _clst . *U _dp 3 ]
[; ;ff.c: 1091: if (clst == 1 || clst >= dp->fs->n_fatent)
"1091
[e $ ! || == _clst -> -> -> 1 `i `l `ul >= _clst . *U . *U _dp 0 10 99  ]
[; ;ff.c: 1092: return FR_INT_ERR;
"1092
[e ) -> . `E64 2 `E64 ]
[e $UE 98  ]
[e :U 99 ]
[; ;ff.c: 1093: if (!clst && dp->fs->fs_type == 3)
"1093
[e $ ! && ! != _clst -> -> 0 `i `ul == -> . *U . *U _dp 0 0 `i -> 3 `i 100  ]
[; ;ff.c: 1094: clst = dp->fs->dirbase;
"1094
[e = _clst . *U . *U _dp 0 14 ]
[e :U 100 ]
[; ;ff.c: 1096: if (clst == 0) {
"1096
[e $ ! == _clst -> -> -> 0 `i `l `ul 101  ]
{
[; ;ff.c: 1097: if (idx >= dp->fs->n_rootdir)
"1097
[e $ ! >= _idx -> . *U . *U _dp 0 7 `ui 102  ]
[; ;ff.c: 1098: return FR_INT_ERR;
"1098
[e ) -> . `E64 2 `E64 ]
[e $UE 98  ]
[e :U 102 ]
[; ;ff.c: 1099: sect = dp->fs->dirbase;
"1099
[e = _sect . *U . *U _dp 0 14 ]
"1100
}
[; ;ff.c: 1100: }
[e $U 103  ]
"1101
[e :U 101 ]
[; ;ff.c: 1101: else {
{
[; ;ff.c: 1102: ic = ((UINT)512) / 32 * dp->fs->csize;
"1102
[e = _ic * / -> -> 512 `i `ui -> -> 32 `i `ui -> . *U . *U _dp 0 2 `ui ]
[; ;ff.c: 1103: while (idx >= ic) {
"1103
[e $U 104  ]
[e :U 105 ]
{
[; ;ff.c: 1104: clst = get_fat(dp->fs, clst);
"1104
[e = _clst ( _get_fat (2 , . *U _dp 0 _clst ]
[; ;ff.c: 1105: if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
"1105
[e $ ! == _clst -> -1 `ul 107  ]
[e ) -> . `E64 1 `E64 ]
[e $UE 98  ]
[e :U 107 ]
[; ;ff.c: 1106: if (clst < 2 || clst >= dp->fs->n_fatent)
"1106
[e $ ! || < _clst -> -> -> 2 `i `l `ul >= _clst . *U . *U _dp 0 10 108  ]
[; ;ff.c: 1107: return FR_INT_ERR;
"1107
[e ) -> . `E64 2 `E64 ]
[e $UE 98  ]
[e :U 108 ]
[; ;ff.c: 1108: idx -= ic;
"1108
[e =- _idx _ic ]
"1109
}
[e :U 104 ]
"1103
[e $ >= _idx _ic 105  ]
[e :U 106 ]
[; ;ff.c: 1109: }
[; ;ff.c: 1110: sect = clust2sect(dp->fs, clst);
"1110
[e = _sect ( _clust2sect (2 , . *U _dp 0 _clst ]
"1111
}
[e :U 103 ]
[; ;ff.c: 1111: }
[; ;ff.c: 1112: dp->clust = clst;
"1112
[e = . *U _dp 4 _clst ]
[; ;ff.c: 1113: if (!sect) return FR_INT_ERR;
"1113
[e $ ! ! != _sect -> -> 0 `i `ul 109  ]
[e ) -> . `E64 2 `E64 ]
[e $UE 98  ]
[e :U 109 ]
[; ;ff.c: 1114: dp->sect = sect + idx / (((UINT)512) / 32);
"1114
[e = . *U _dp 5 + _sect -> / _idx / -> -> 512 `i `ui -> -> 32 `i `ui `ul ]
[; ;ff.c: 1115: dp->dir = dp->fs->win + (idx % (((UINT)512) / 32)) * 32;
"1115
[e = . *U _dp 6 + &U . *U . *U _dp 0 17 * -> * % _idx / -> -> 512 `i `ui -> -> 32 `i `ui -> -> 32 `i `ui `ux -> -> # *U &U . *U . *U _dp 0 17 `ui `ux ]
[; ;ff.c: 1117: return FR_OK;
"1117
[e ) -> . `E64 0 `E64 ]
[e $UE 98  ]
[; ;ff.c: 1118: }
"1118
[e :UE 98 ]
}
"1128
[v _dir_next `(E64 ~T0 @X0 1 sf2`*S3`i ]
"1132
{
[; ;ff.c: 1127: static
[; ;ff.c: 1128: FRESULT dir_next (
[; ;ff.c: 1129: DIR* dp,
[; ;ff.c: 1130: int stretch
[; ;ff.c: 1131: )
[; ;ff.c: 1132: {
[e :U _dir_next ]
"1129
[v _dp `*S3 ~T0 @X0 1 r1 ]
"1130
[v _stretch `i ~T0 @X0 1 r2 ]
"1132
[f ]
"1133
[v _clst `ul ~T0 @X0 1 a ]
"1134
[v _i `ui ~T0 @X0 1 a ]
"1136
[v _c `ui ~T0 @X0 1 a ]
[; ;ff.c: 1133: DWORD clst;
[; ;ff.c: 1134: UINT i;
[; ;ff.c: 1136: UINT c;
[; ;ff.c: 1140: i = dp->index + 1;
"1140
[e = _i + -> . *U _dp 2 `ui -> -> 1 `i `ui ]
[; ;ff.c: 1141: if (!(i & 0xFFFF) || !dp->sect)
"1141
[e $ ! || ! != & _i -> 65535 `ui -> -> 0 `i `ui ! != . *U _dp 5 -> -> 0 `i `ul 111  ]
[; ;ff.c: 1142: return FR_NO_FILE;
"1142
[e ) -> . `E64 4 `E64 ]
[e $UE 110  ]
[e :U 111 ]
[; ;ff.c: 1144: if (!(i % (((UINT)512) / 32))) {
"1144
[e $ ! ! != % _i / -> -> 512 `i `ui -> -> 32 `i `ui -> -> 0 `i `ui 112  ]
{
[; ;ff.c: 1145: dp->sect++;
"1145
[e ++ . *U _dp 5 -> -> -> 1 `i `l `ul ]
[; ;ff.c: 1147: if (!dp->clust) {
"1147
[e $ ! ! != . *U _dp 4 -> -> 0 `i `ul 113  ]
{
[; ;ff.c: 1148: if (i >= dp->fs->n_rootdir)
"1148
[e $ ! >= _i -> . *U . *U _dp 0 7 `ui 114  ]
[; ;ff.c: 1149: return FR_NO_FILE;
"1149
[e ) -> . `E64 4 `E64 ]
[e $UE 110  ]
[e :U 114 ]
"1150
}
[; ;ff.c: 1150: }
[e $U 115  ]
"1151
[e :U 113 ]
[; ;ff.c: 1151: else {
{
[; ;ff.c: 1152: if (((i / (((UINT)512) / 32)) & (dp->fs->csize - 1)) == 0) {
"1152
[e $ ! == & / _i / -> -> 512 `i `ui -> -> 32 `i `ui -> - -> . *U . *U _dp 0 2 `i -> 1 `i `ui -> -> 0 `i `ui 116  ]
{
[; ;ff.c: 1153: clst = get_fat(dp->fs, dp->clust);
"1153
[e = _clst ( _get_fat (2 , . *U _dp 0 . *U _dp 4 ]
[; ;ff.c: 1154: if (clst <= 1) return FR_INT_ERR;
"1154
[e $ ! <= _clst -> -> -> 1 `i `l `ul 117  ]
[e ) -> . `E64 2 `E64 ]
[e $UE 110  ]
[e :U 117 ]
[; ;ff.c: 1155: if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
"1155
[e $ ! == _clst -> -1 `ul 118  ]
[e ) -> . `E64 1 `E64 ]
[e $UE 110  ]
[e :U 118 ]
[; ;ff.c: 1156: if (clst >= dp->fs->n_fatent) {
"1156
[e $ ! >= _clst . *U . *U _dp 0 10 119  ]
{
[; ;ff.c: 1158: if (!stretch) return FR_NO_FILE;
"1158
[e $ ! ! != _stretch -> 0 `i 120  ]
[e ) -> . `E64 4 `E64 ]
[e $UE 110  ]
[e :U 120 ]
[; ;ff.c: 1159: clst = create_chain(dp->fs, dp->clust);
"1159
[e = _clst ( _create_chain (2 , . *U _dp 0 . *U _dp 4 ]
[; ;ff.c: 1160: if (clst == 0) return FR_DENIED;
"1160
[e $ ! == _clst -> -> -> 0 `i `l `ul 121  ]
[e ) -> . `E64 7 `E64 ]
[e $UE 110  ]
[e :U 121 ]
[; ;ff.c: 1161: if (clst == 1) return FR_INT_ERR;
"1161
[e $ ! == _clst -> -> -> 1 `i `l `ul 122  ]
[e ) -> . `E64 2 `E64 ]
[e $UE 110  ]
[e :U 122 ]
[; ;ff.c: 1162: if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
"1162
[e $ ! == _clst -> -1 `ul 123  ]
[e ) -> . `E64 1 `E64 ]
[e $UE 110  ]
[e :U 123 ]
[; ;ff.c: 1164: if (sync_window(dp->fs)) return FR_DISK_ERR;
"1164
[e $ ! != -> ( _sync_window (1 . *U _dp 0 `i -> -> -> 0 `i `E64 `i 124  ]
[e ) -> . `E64 1 `E64 ]
[e $UE 110  ]
[e :U 124 ]
[; ;ff.c: 1165: mem_set(dp->fs->win, 0, ((UINT)512));
"1165
[e ( _mem_set (3 , , -> &U . *U . *U _dp 0 17 `*v -> 0 `i -> -> 512 `i `ui ]
[; ;ff.c: 1166: dp->fs->winsect = clust2sect(dp->fs, clst);
"1166
[e = . *U . *U _dp 0 16 ( _clust2sect (2 , . *U _dp 0 _clst ]
[; ;ff.c: 1167: for (c = 0; c < dp->fs->csize; c++) {
"1167
{
[e = _c -> -> 0 `i `ui ]
[e $U 128  ]
[e :U 125 ]
{
[; ;ff.c: 1168: dp->fs->wflag = 1;
"1168
[e = . *U . *U _dp 0 4 -> -> 1 `i `uc ]
[; ;ff.c: 1169: if (sync_window(dp->fs)) return FR_DISK_ERR;
"1169
[e $ ! != -> ( _sync_window (1 . *U _dp 0 `i -> -> -> 0 `i `E64 `i 129  ]
[e ) -> . `E64 1 `E64 ]
[e $UE 110  ]
[e :U 129 ]
[; ;ff.c: 1170: dp->fs->winsect++;
"1170
[e ++ . *U . *U _dp 0 16 -> -> -> 1 `i `l `ul ]
"1171
}
"1167
[e ++ _c -> -> 1 `i `ui ]
[e :U 128 ]
[e $ < _c -> . *U . *U _dp 0 2 `ui 125  ]
[e :U 126 ]
"1171
}
[; ;ff.c: 1171: }
[; ;ff.c: 1172: dp->fs->winsect -= c;
"1172
[e =- . *U . *U _dp 0 16 -> _c `ul ]
"1177
}
[e :U 119 ]
[; ;ff.c: 1177: }
[; ;ff.c: 1178: dp->clust = clst;
"1178
[e = . *U _dp 4 _clst ]
[; ;ff.c: 1179: dp->sect = clust2sect(dp->fs, clst);
"1179
[e = . *U _dp 5 ( _clust2sect (2 , . *U _dp 0 _clst ]
"1180
}
[e :U 116 ]
"1181
}
[e :U 115 ]
"1182
}
[e :U 112 ]
[; ;ff.c: 1180: }
[; ;ff.c: 1181: }
[; ;ff.c: 1182: }
[; ;ff.c: 1184: dp->index = (WORD)i;
"1184
[e = . *U _dp 2 -> _i `us ]
[; ;ff.c: 1185: dp->dir = dp->fs->win + (i % (((UINT)512) / 32)) * 32;
"1185
[e = . *U _dp 6 + &U . *U . *U _dp 0 17 * -> * % _i / -> -> 512 `i `ui -> -> 32 `i `ui -> -> 32 `i `ui `ux -> -> # *U &U . *U . *U _dp 0 17 `ui `ux ]
[; ;ff.c: 1187: return FR_OK;
"1187
[e ) -> . `E64 0 `E64 ]
[e $UE 110  ]
[; ;ff.c: 1188: }
"1188
[e :UE 110 ]
}
"1199
[v _dir_alloc `(E64 ~T0 @X0 1 sf2`*S3`ui ]
"1203
{
[; ;ff.c: 1198: static
[; ;ff.c: 1199: FRESULT dir_alloc (
[; ;ff.c: 1200: DIR* dp,
[; ;ff.c: 1201: UINT nent
[; ;ff.c: 1202: )
[; ;ff.c: 1203: {
[e :U _dir_alloc ]
"1200
[v _dp `*S3 ~T0 @X0 1 r1 ]
"1201
[v _nent `ui ~T0 @X0 1 r2 ]
"1203
[f ]
"1204
[v _res `E64 ~T0 @X0 1 a ]
"1205
[v _n `ui ~T0 @X0 1 a ]
[; ;ff.c: 1204: FRESULT res;
[; ;ff.c: 1205: UINT n;
[; ;ff.c: 1208: res = dir_sdi(dp, 0);
"1208
[e = _res ( _dir_sdi (2 , _dp -> -> 0 `i `ui ]
[; ;ff.c: 1209: if (res == FR_OK) {
"1209
[e $ ! == -> _res `i -> . `E64 0 `i 131  ]
{
[; ;ff.c: 1210: n = 0;
"1210
[e = _n -> -> 0 `i `ui ]
[; ;ff.c: 1211: do {
"1211
[e :U 134 ]
{
[; ;ff.c: 1212: res = move_window(dp->fs, dp->sect);
"1212
[e = _res ( _move_window (2 , . *U _dp 0 . *U _dp 5 ]
[; ;ff.c: 1213: if (res != FR_OK) break;
"1213
[e $ ! != -> _res `i -> . `E64 0 `i 135  ]
[e $U 133  ]
[e :U 135 ]
[; ;ff.c: 1214: if (dp->dir[0] == 0xE5 || dp->dir[0] == 0) {
"1214
[e $ ! || == -> *U + . *U _dp 6 * -> -> 0 `i `x -> -> # *U . *U _dp 6 `i `x `i -> 229 `i == -> *U + . *U _dp 6 * -> -> 0 `i `x -> -> # *U . *U _dp 6 `i `x `i -> 0 `i 136  ]
{
[; ;ff.c: 1215: if (++n == nent) break;
"1215
[e $ ! == =+ _n -> -> 1 `i `ui _nent 137  ]
[e $U 133  ]
[e :U 137 ]
"1216
}
[; ;ff.c: 1216: } else {
[e $U 138  ]
[e :U 136 ]
{
[; ;ff.c: 1217: n = 0;
"1217
[e = _n -> -> 0 `i `ui ]
"1218
}
[e :U 138 ]
[; ;ff.c: 1218: }
[; ;ff.c: 1219: res = dir_next(dp, 1);
"1219
[e = _res ( _dir_next (2 , _dp -> 1 `i ]
"1220
}
[; ;ff.c: 1220: } while (res == FR_OK);
[e $ == -> _res `i -> . `E64 0 `i 134  ]
[e :U 133 ]
"1221
}
[e :U 131 ]
[; ;ff.c: 1221: }
[; ;ff.c: 1222: if (res == FR_NO_FILE) res = FR_DENIED;
"1222
[e $ ! == -> _res `i -> . `E64 4 `i 139  ]
[e = _res -> . `E64 7 `E64 ]
[e :U 139 ]
[; ;ff.c: 1223: return res;
"1223
[e ) _res ]
[e $UE 130  ]
[; ;ff.c: 1224: }
"1224
[e :UE 130 ]
}
"1235
[v _ld_clust `(ul ~T0 @X0 1 sf2`*S1`*Cuc ]
"1239
{
[; ;ff.c: 1234: static
[; ;ff.c: 1235: DWORD ld_clust (
[; ;ff.c: 1236: FATFS* fs,
[; ;ff.c: 1237: const BYTE* dir
[; ;ff.c: 1238: )
[; ;ff.c: 1239: {
[e :U _ld_clust ]
"1236
[v _fs `*S1 ~T0 @X0 1 r1 ]
"1237
[v _dir `*Cuc ~T0 @X0 1 r2 ]
"1239
[f ]
"1240
[v _cl `ul ~T0 @X0 1 a ]
[; ;ff.c: 1240: DWORD cl;
[; ;ff.c: 1242: cl = (WORD)(*(WORD*)(BYTE*)(dir + 26));
"1242
[e = _cl -> *U -> -> + _dir * -> -> 26 `i `x -> -> # *U _dir `i `x `*uc `*us `ul ]
[; ;ff.c: 1243: if (fs->fs_type == 3)
"1243
[e $ ! == -> . *U _fs 0 `i -> 3 `i 141  ]
[; ;ff.c: 1244: cl |= (DWORD)(WORD)(*(WORD*)(BYTE*)(dir + 20)) << 16;
"1244
[e =| _cl << -> *U -> -> + _dir * -> -> 20 `i `x -> -> # *U _dir `i `x `*uc `*us `ul -> 16 `i ]
[e :U 141 ]
[; ;ff.c: 1246: return cl;
"1246
[e ) _cl ]
[e $UE 140  ]
[; ;ff.c: 1247: }
"1247
[e :UE 140 ]
}
"1252
[v _st_clust `(v ~T0 @X0 1 sf2`*uc`ul ]
"1256
{
[; ;ff.c: 1251: static
[; ;ff.c: 1252: void st_clust (
[; ;ff.c: 1253: BYTE* dir,
[; ;ff.c: 1254: DWORD cl
[; ;ff.c: 1255: )
[; ;ff.c: 1256: {
[e :U _st_clust ]
"1253
[v _dir `*uc ~T0 @X0 1 r1 ]
"1254
[v _cl `ul ~T0 @X0 1 r2 ]
"1256
[f ]
[; ;ff.c: 1257: *(WORD*)(BYTE*)(dir + 26)=(WORD)(cl);
"1257
[e = *U -> + _dir * -> -> 26 `i `x -> -> # *U _dir `i `x `*us -> _cl `us ]
[; ;ff.c: 1258: *(WORD*)(BYTE*)(dir + 20)=(WORD)(cl >> 16);
"1258
[e = *U -> + _dir * -> -> 20 `i `x -> -> # *U _dir `i `x `*us -> >> _cl -> 16 `i `us ]
[; ;ff.c: 1259: }
"1259
[e :UE 142 ]
}
"1458
[v _dir_find `(E64 ~T0 @X0 1 sf1`*S3 ]
"1461
{
[; ;ff.c: 1457: static
[; ;ff.c: 1458: FRESULT dir_find (
[; ;ff.c: 1459: DIR* dp
[; ;ff.c: 1460: )
[; ;ff.c: 1461: {
[e :U _dir_find ]
"1459
[v _dp `*S3 ~T0 @X0 1 r1 ]
"1461
[f ]
"1462
[v _res `E64 ~T0 @X0 1 a ]
"1463
[v _c `uc ~T0 @X0 1 a ]
[v _dir `*uc ~T0 @X0 1 a ]
[; ;ff.c: 1462: FRESULT res;
[; ;ff.c: 1463: BYTE c, *dir;
[; ;ff.c: 1468: res = dir_sdi(dp, 0);
"1468
[e = _res ( _dir_sdi (2 , _dp -> -> 0 `i `ui ]
[; ;ff.c: 1469: if (res != FR_OK) return res;
"1469
[e $ ! != -> _res `i -> . `E64 0 `i 144  ]
[e ) _res ]
[e $UE 143  ]
[e :U 144 ]
[; ;ff.c: 1474: do {
"1474
[e :U 147 ]
{
[; ;ff.c: 1475: res = move_window(dp->fs, dp->sect);
"1475
[e = _res ( _move_window (2 , . *U _dp 0 . *U _dp 5 ]
[; ;ff.c: 1476: if (res != FR_OK) break;
"1476
[e $ ! != -> _res `i -> . `E64 0 `i 148  ]
[e $U 146  ]
[e :U 148 ]
[; ;ff.c: 1477: dir = dp->dir;
"1477
[e = _dir . *U _dp 6 ]
[; ;ff.c: 1478: c = dir[0];
"1478
[e = _c *U + _dir * -> -> 0 `i `x -> -> # *U _dir `i `x ]
[; ;ff.c: 1479: if (c == 0) { res = FR_NO_FILE; break; }
"1479
[e $ ! == -> _c `i -> 0 `i 149  ]
{
[e = _res -> . `E64 4 `E64 ]
[e $U 146  ]
}
[e :U 149 ]
[; ;ff.c: 1502: if (!(dir[11] & 0x08) && !mem_cmp(dir, dp->fn, 11))
"1502
[e $ ! && ! != & -> *U + _dir * -> -> 11 `i `x -> -> # *U _dir `i `x `i -> 8 `i -> 0 `i ! != ( _mem_cmp (3 , , -> _dir `*Cv -> . *U _dp 7 `*Cv -> -> 11 `i `ui -> 0 `i 150  ]
[; ;ff.c: 1503: break;
"1503
[e $U 146  ]
[e :U 150 ]
[; ;ff.c: 1505: res = dir_next(dp, 0);
"1505
[e = _res ( _dir_next (2 , _dp -> 0 `i ]
"1506
}
[; ;ff.c: 1506: } while (res == FR_OK);
[e $ == -> _res `i -> . `E64 0 `i 147  ]
[e :U 146 ]
[; ;ff.c: 1508: return res;
"1508
[e ) _res ]
[e $UE 143  ]
[; ;ff.c: 1509: }
"1509
[e :UE 143 ]
}
"1578
[v _dir_register `(E64 ~T0 @X0 1 sf1`*S3 ]
"1581
{
[; ;ff.c: 1577: static
[; ;ff.c: 1578: FRESULT dir_register (
[; ;ff.c: 1579: DIR* dp
[; ;ff.c: 1580: )
[; ;ff.c: 1581: {
[e :U _dir_register ]
"1579
[v _dp `*S3 ~T0 @X0 1 r1 ]
"1581
[f ]
"1582
[v _res `E64 ~T0 @X0 1 a ]
[; ;ff.c: 1582: FRESULT res;
[; ;ff.c: 1629: res = dir_alloc(dp, 1);
"1629
[e = _res ( _dir_alloc (2 , _dp -> -> 1 `i `ui ]
[; ;ff.c: 1632: if (res == FR_OK) {
"1632
[e $ ! == -> _res `i -> . `E64 0 `i 152  ]
{
[; ;ff.c: 1633: res = move_window(dp->fs, dp->sect);
"1633
[e = _res ( _move_window (2 , . *U _dp 0 . *U _dp 5 ]
[; ;ff.c: 1634: if (res == FR_OK) {
"1634
[e $ ! == -> _res `i -> . `E64 0 `i 153  ]
{
[; ;ff.c: 1635: mem_set(dp->dir, 0, 32);
"1635
[e ( _mem_set (3 , , -> . *U _dp 6 `*v -> 0 `i -> -> 32 `i `ui ]
[; ;ff.c: 1636: mem_cpy(dp->dir, dp->fn, 11);
"1636
[e ( _mem_cpy (3 , , -> . *U _dp 6 `*v -> . *U _dp 7 `*Cv -> -> 11 `i `ui ]
[; ;ff.c: 1640: dp->fs->wflag = 1;
"1640
[e = . *U . *U _dp 0 4 -> -> 1 `i `uc ]
"1641
}
[e :U 153 ]
"1642
}
[e :U 152 ]
[; ;ff.c: 1641: }
[; ;ff.c: 1642: }
[; ;ff.c: 1644: return res;
"1644
[e ) _res ]
[e $UE 151  ]
[; ;ff.c: 1645: }
"1645
[e :UE 151 ]
}
"1843
[v _create_name `(E64 ~T0 @X0 1 sf2`*S3`**Cuc ]
"1847
{
[; ;ff.c: 1842: static
[; ;ff.c: 1843: FRESULT create_name (
[; ;ff.c: 1844: DIR* dp,
[; ;ff.c: 1845: const TCHAR** path
[; ;ff.c: 1846: )
[; ;ff.c: 1847: {
[e :U _create_name ]
"1844
[v _dp `*S3 ~T0 @X0 1 r1 ]
"1845
[v _path `**Cuc ~T0 @X0 1 r2 ]
"1847
[f ]
"1969
[v _b `uc ~T0 @X0 1 a ]
[v _c `uc ~T0 @X0 1 a ]
[v _d `uc ~T0 @X0 1 a ]
[v _sfn `*uc ~T0 @X0 1 a ]
"1970
[v _ni `ui ~T0 @X0 1 a ]
[v _si `ui ~T0 @X0 1 a ]
[v _i `ui ~T0 @X0 1 a ]
"1971
[v _p `*Cuc ~T0 @X0 1 a ]
[; ;ff.c: 1969: BYTE b, c, d, *sfn;
[; ;ff.c: 1970: UINT ni, si, i;
[; ;ff.c: 1971: const char *p;
[; ;ff.c: 1974: for (p = *path; *p == '/' || *p == '\\'; p++) ;
"1974
{
[e = _p *U _path ]
[e $U 158  ]
[e :U 155 ]
[e ++ _p * -> -> 1 `i `x -> -> # *U _p `i `x ]
[e :U 158 ]
[e $ || == -> *U _p `ui -> 47 `ui == -> *U _p `ui -> 92 `ui 155  ]
[e :U 156 ]
}
[; ;ff.c: 1975: sfn = dp->fn;
"1975
[e = _sfn . *U _dp 7 ]
[; ;ff.c: 1976: mem_set(sfn, ' ', 11);
"1976
[e ( _mem_set (3 , , -> _sfn `*v -> -> 32 `ui `i -> -> 11 `i `ui ]
[; ;ff.c: 1977: si = i = b = 0; ni = 8;
"1977
[e = _si = _i -> = _b -> -> 0 `i `uc `ui ]
[e = _ni -> -> 8 `i `ui ]
[; ;ff.c: 1991: for (;;) {
"1991
{
[e :U 159 ]
{
[; ;ff.c: 1992: c = (BYTE)p[si++];
"1992
[e = _c *U + _p * -> ++ _si -> -> 1 `i `ui `ux -> -> # *U _p `ui `ux ]
[; ;ff.c: 1993: if (c <= ' ' || c == '/' || c == '\\') break;
"1993
[e $ ! || || <= -> _c `ui -> 32 `ui == -> _c `ui -> 47 `ui == -> _c `ui -> 92 `ui 162  ]
[e $U 160  ]
[e :U 162 ]
[; ;ff.c: 1994: if (c == '.' || i >= ni) {
"1994
[e $ ! || == -> _c `ui -> 46 `ui >= _i _ni 163  ]
{
[; ;ff.c: 1995: if (ni != 8 || c != '.') return FR_INVALID_NAME;
"1995
[e $ ! || != _ni -> -> 8 `i `ui != -> _c `ui -> 46 `ui 164  ]
[e ) -> . `E64 6 `E64 ]
[e $UE 154  ]
[e :U 164 ]
[; ;ff.c: 1996: i = 8; ni = 11;
"1996
[e = _i -> -> 8 `i `ui ]
[e = _ni -> -> 11 `i `ui ]
[; ;ff.c: 1997: b <<= 2; continue;
"1997
[e =<< _b -> 2 `i ]
[e $U 161  ]
"1998
}
[e :U 163 ]
[; ;ff.c: 1998: }
[; ;ff.c: 1999: if (c >= 0x80) {
"1999
[e $ ! >= -> _c `i -> 128 `i 165  ]
{
[; ;ff.c: 2000: b |= 3;
"2000
[e =| _b -> -> 3 `i `uc ]
"2008
}
[e :U 165 ]
[; ;ff.c: 2008: }
[; ;ff.c: 2009: if ((((BYTE)(c) >= 0x81 && (BYTE)(c) <= 0x9F) || ((BYTE)(c) >= 0xE0 && (BYTE)(c) <= 0xFC))) {
"2009
[e $ ! || && >= -> _c `i -> 129 `i <= -> _c `i -> 159 `i && >= -> _c `i -> 224 `i <= -> _c `i -> 252 `i 166  ]
{
[; ;ff.c: 2010: d = (BYTE)p[si++];
"2010
[e = _d *U + _p * -> ++ _si -> -> 1 `i `ui `ux -> -> # *U _p `ui `ux ]
[; ;ff.c: 2011: if (!(((BYTE)(d) >= 0x40 && (BYTE)(d) <= 0x7E) || ((BYTE)(d) >= 0x80 && (BYTE)(d) <= 0xFC)) || i >= ni - 1)
"2011
[e $ ! || ! || && >= -> _d `i -> 64 `i <= -> _d `i -> 126 `i && >= -> _d `i -> 128 `i <= -> _d `i -> 252 `i >= _i - _ni -> -> 1 `i `ui 167  ]
[; ;ff.c: 2012: return FR_INVALID_NAME;
"2012
[e ) -> . `E64 6 `E64 ]
[e $UE 154  ]
[e :U 167 ]
[; ;ff.c: 2013: sfn[i++] = c;
"2013
[e = *U + _sfn * -> ++ _i -> -> 1 `i `ui `ux -> -> # *U _sfn `ui `ux _c ]
[; ;ff.c: 2014: sfn[i++] = d;
"2014
[e = *U + _sfn * -> ++ _i -> -> 1 `i `ui `ux -> -> # *U _sfn `ui `ux _d ]
"2015
}
[; ;ff.c: 2015: } else {
[e $U 168  ]
[e :U 166 ]
{
[; ;ff.c: 2016: if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))
"2016
[e $ ! != ( _chk_chr (2 , :s 1C -> _c `i -> 0 `i 169  ]
[; ;ff.c: 2017: return FR_INVALID_NAME;
"2017
[e ) -> . `E64 6 `E64 ]
[e $UE 154  ]
[e :U 169 ]
[; ;ff.c: 2018: if ((((c)>='A')&&((c)<='Z'))) {
"2018
[e $ ! && >= -> _c `ui -> 65 `ui <= -> _c `ui -> 90 `ui 170  ]
{
[; ;ff.c: 2019: b |= 2;
"2019
[e =| _b -> -> 2 `i `uc ]
"2020
}
[; ;ff.c: 2020: } else {
[e $U 171  ]
[e :U 170 ]
{
[; ;ff.c: 2021: if ((((c)>='a')&&((c)<='z'))) {
"2021
[e $ ! && >= -> _c `ui -> 97 `ui <= -> _c `ui -> 122 `ui 172  ]
{
[; ;ff.c: 2022: b |= 1; c -= 0x20;
"2022
[e =| _b -> -> 1 `i `uc ]
[e =- _c -> -> 32 `i `uc ]
"2023
}
[e :U 172 ]
"2024
}
[e :U 171 ]
[; ;ff.c: 2023: }
[; ;ff.c: 2024: }
[; ;ff.c: 2025: sfn[i++] = c;
"2025
[e = *U + _sfn * -> ++ _i -> -> 1 `i `ui `ux -> -> # *U _sfn `ui `ux _c ]
"2026
}
[e :U 168 ]
"2027
}
[e :U 161 ]
[; ;ff.c: 2026: }
[; ;ff.c: 2027: }
[e $U 159  ]
[e :U 160 ]
}
[; ;ff.c: 2028: *path = &p[si];
"2028
[e = *U _path &U *U + _p * -> _si `ux -> -> # *U _p `ui `ux ]
[; ;ff.c: 2029: c = (c <= ' ') ? 0x04 : 0;
"2029
[e = _c -> ? <= -> _c `ui -> 32 `ui : -> 4 `i -> 0 `i `uc ]
[; ;ff.c: 2031: if (!i) return FR_INVALID_NAME;
"2031
[e $ ! ! != _i -> -> 0 `i `ui 173  ]
[e ) -> . `E64 6 `E64 ]
[e $UE 154  ]
[e :U 173 ]
[; ;ff.c: 2032: if (sfn[0] == 0xE5) sfn[0] = 0x05;
"2032
[e $ ! == -> *U + _sfn * -> -> 0 `i `x -> -> # *U _sfn `i `x `i -> 229 `i 174  ]
[e = *U + _sfn * -> -> 0 `i `x -> -> # *U _sfn `i `x -> -> 5 `i `uc ]
[e :U 174 ]
[; ;ff.c: 2034: if (ni == 8) b <<= 2;
"2034
[e $ ! == _ni -> -> 8 `i `ui 175  ]
[e =<< _b -> 2 `i ]
[e :U 175 ]
[; ;ff.c: 2035: if ((b & 0x03) == 0x01) c |= 0x10;
"2035
[e $ ! == & -> _b `i -> 3 `i -> 1 `i 176  ]
[e =| _c -> -> 16 `i `uc ]
[e :U 176 ]
[; ;ff.c: 2036: if ((b & 0x0C) == 0x04) c |= 0x08;
"2036
[e $ ! == & -> _b `i -> 12 `i -> 4 `i 177  ]
[e =| _c -> -> 8 `i `uc ]
[e :U 177 ]
[; ;ff.c: 2038: sfn[11] = c;
"2038
[e = *U + _sfn * -> -> 11 `i `x -> -> # *U _sfn `i `x _c ]
[; ;ff.c: 2040: return FR_OK;
"2040
[e ) -> . `E64 0 `E64 ]
[e $UE 154  ]
[; ;ff.c: 2042: }
"2042
[e :UE 154 ]
}
"2052
[v _follow_path `(E64 ~T0 @X0 1 sf2`*S3`*Cuc ]
"2056
{
[; ;ff.c: 2051: static
[; ;ff.c: 2052: FRESULT follow_path (
[; ;ff.c: 2053: DIR* dp,
[; ;ff.c: 2054: const TCHAR* path
[; ;ff.c: 2055: )
[; ;ff.c: 2056: {
[e :U _follow_path ]
"2053
[v _dp `*S3 ~T0 @X0 1 r1 ]
"2054
[v _path `*Cuc ~T0 @X0 1 r2 ]
"2056
[f ]
"2057
[v _res `E64 ~T0 @X0 1 a ]
"2058
[v _dir `*uc ~T0 @X0 1 a ]
[v _ns `uc ~T0 @X0 1 a ]
[; ;ff.c: 2057: FRESULT res;
[; ;ff.c: 2058: BYTE *dir, ns;
[; ;ff.c: 2068: if (*path == '/' || *path == '\\')
"2068
[e $ ! || == -> *U _path `ui -> 47 `ui == -> *U _path `ui -> 92 `ui 179  ]
[; ;ff.c: 2069: path++;
"2069
[e ++ _path * -> -> 1 `i `x -> -> # *U _path `i `x ]
[e :U 179 ]
[; ;ff.c: 2070: dp->sclust = 0;
"2070
[e = . *U _dp 3 -> -> -> 0 `i `l `ul ]
[; ;ff.c: 2073: if ((UINT)*path < ' ') {
"2073
[e $ ! < -> *U _path `ui -> 32 `ui 180  ]
{
[; ;ff.c: 2074: res = dir_sdi(dp, 0);
"2074
[e = _res ( _dir_sdi (2 , _dp -> -> 0 `i `ui ]
[; ;ff.c: 2075: dp->dir = 0;
"2075
[e = . *U _dp 6 -> -> 0 `i `*uc ]
"2076
}
[; ;ff.c: 2076: } else {
[e $U 181  ]
[e :U 180 ]
{
[; ;ff.c: 2077: for (;;) {
"2077
{
[e :U 182 ]
{
[; ;ff.c: 2078: res = create_name(dp, &path);
"2078
[e = _res ( _create_name (2 , _dp &U _path ]
[; ;ff.c: 2079: if (res != FR_OK) break;
"2079
[e $ ! != -> _res `i -> . `E64 0 `i 185  ]
[e $U 183  ]
[e :U 185 ]
[; ;ff.c: 2080: res = dir_find(dp);
"2080
[e = _res ( _dir_find (1 _dp ]
[; ;ff.c: 2081: ns = dp->fn[11];
"2081
[e = _ns *U + . *U _dp 7 * -> -> 11 `i `x -> -> # *U . *U _dp 7 `i `x ]
[; ;ff.c: 2082: if (res != FR_OK) {
"2082
[e $ ! != -> _res `i -> . `E64 0 `i 186  ]
{
[; ;ff.c: 2083: if (res == FR_NO_FILE) {
"2083
[e $ ! == -> _res `i -> . `E64 4 `i 187  ]
{
[; ;ff.c: 2084: if (0 && (ns & 0x20)) {
"2084
[e $ ! && != -> 0 `i -> 0 `i != & -> _ns `i -> 32 `i -> 0 `i 188  ]
{
[; ;ff.c: 2085: dp->sclust = 0; dp->dir = 0;
"2085
[e = . *U _dp 3 -> -> -> 0 `i `l `ul ]
[e = . *U _dp 6 -> -> 0 `i `*uc ]
[; ;ff.c: 2086: if (!(ns & 0x04)) continue;
"2086
[e $ ! ! != & -> _ns `i -> 4 `i -> 0 `i 189  ]
[e $U 184  ]
[e :U 189 ]
[; ;ff.c: 2087: res = FR_OK;
"2087
[e = _res -> . `E64 0 `E64 ]
"2088
}
[; ;ff.c: 2088: } else {
[e $U 190  ]
[e :U 188 ]
{
[; ;ff.c: 2089: if (!(ns & 0x04)) res = FR_NO_PATH;
"2089
[e $ ! ! != & -> _ns `i -> 4 `i -> 0 `i 191  ]
[e = _res -> . `E64 5 `E64 ]
[e :U 191 ]
"2090
}
[e :U 190 ]
"2091
}
[e :U 187 ]
[; ;ff.c: 2090: }
[; ;ff.c: 2091: }
[; ;ff.c: 2092: break;
"2092
[e $U 183  ]
"2093
}
[e :U 186 ]
[; ;ff.c: 2093: }
[; ;ff.c: 2094: if (ns & 0x04) break;
"2094
[e $ ! != & -> _ns `i -> 4 `i -> 0 `i 192  ]
[e $U 183  ]
[e :U 192 ]
[; ;ff.c: 2095: dir = dp->dir;
"2095
[e = _dir . *U _dp 6 ]
[; ;ff.c: 2096: if (!(dir[11] & 0x10)) {
"2096
[e $ ! ! != & -> *U + _dir * -> -> 11 `i `x -> -> # *U _dir `i `x `i -> 16 `i -> 0 `i 193  ]
{
[; ;ff.c: 2097: res = FR_NO_PATH; break;
"2097
[e = _res -> . `E64 5 `E64 ]
[e $U 183  ]
"2098
}
[e :U 193 ]
[; ;ff.c: 2098: }
[; ;ff.c: 2099: dp->sclust = ld_clust(dp->fs, dir);
"2099
[e = . *U _dp 3 ( _ld_clust (2 , . *U _dp 0 -> _dir `*Cuc ]
"2100
}
[e :U 184 ]
[; ;ff.c: 2100: }
[e $U 182  ]
[e :U 183 ]
}
"2101
}
[e :U 181 ]
[; ;ff.c: 2101: }
[; ;ff.c: 2103: return res;
"2103
[e ) _res ]
[e $UE 178  ]
[; ;ff.c: 2104: }
"2104
[e :UE 178 ]
}
"2114
[v _get_ldnumber `(i ~T0 @X0 1 sf1`**Cuc ]
"2117
{
[; ;ff.c: 2113: static
[; ;ff.c: 2114: int get_ldnumber (
[; ;ff.c: 2115: const TCHAR** path
[; ;ff.c: 2116: )
[; ;ff.c: 2117: {
[e :U _get_ldnumber ]
"2115
[v _path `**Cuc ~T0 @X0 1 r1 ]
"2117
[f ]
"2118
[v _tp `*Cuc ~T0 @X0 1 a ]
[v _tt `*Cuc ~T0 @X0 1 a ]
"2119
[v _i `ui ~T0 @X0 1 a ]
"2120
[v _vol `i ~T0 @X0 1 a ]
[; ;ff.c: 2118: const TCHAR *tp, *tt;
[; ;ff.c: 2119: UINT i;
[; ;ff.c: 2120: int vol = -1;
[e = _vol -U -> 1 `i ]
[; ;ff.c: 2129: if (*path) {
"2129
[e $ ! != *U _path -> -> 0 `i `*Cuc 195  ]
{
[; ;ff.c: 2130: for (tt = *path; (UINT)*tt >= (0 ? ' ' : '!') && *tt != ':'; tt++) ;
"2130
{
[e = _tt *U _path ]
[e $U 199  ]
[e :U 196 ]
[e ++ _tt * -> -> 1 `i `x -> -> # *U _tt `i `x ]
[e :U 199 ]
[e $ && >= -> *U _tt `ui ? != -> 0 `i -> 0 `i : -> 32 `ui -> 33 `ui != -> *U _tt `ui -> 58 `ui 196  ]
[e :U 197 ]
}
[; ;ff.c: 2131: if (*tt == ':') {
"2131
[e $ ! == -> *U _tt `ui -> 58 `ui 200  ]
{
[; ;ff.c: 2132: tp = *path;
"2132
[e = _tp *U _path ]
[; ;ff.c: 2133: i = *tp++ - '0';
"2133
[e = _i - -> *U ++ _tp * -> -> 1 `i `x -> -> # *U _tp `i `x `ui -> 48 `ui ]
[; ;ff.c: 2134: if (i < 10 && tp == tt) {
"2134
[e $ ! && < _i -> -> 10 `i `ui == _tp _tt 201  ]
{
[; ;ff.c: 2135: if (i < 1) {
"2135
[e $ ! < _i -> -> 1 `i `ui 202  ]
{
[; ;ff.c: 2136: vol = (int)i;
"2136
[e = _vol -> _i `i ]
[; ;ff.c: 2137: *path = ++tt;
"2137
[e = *U _path =+ _tt * -> -> 1 `i `x -> -> # *U _tt `i `x ]
"2138
}
[e :U 202 ]
"2139
}
[e :U 201 ]
[; ;ff.c: 2138: }
[; ;ff.c: 2139: }
[; ;ff.c: 2156: return vol;
"2156
[e ) _vol ]
[e $UE 194  ]
"2157
}
[e :U 200 ]
[; ;ff.c: 2157: }
[; ;ff.c: 2161: vol = 0;
"2161
[e = _vol -> 0 `i ]
"2163
}
[e :U 195 ]
[; ;ff.c: 2163: }
[; ;ff.c: 2164: return vol;
"2164
[e ) _vol ]
[e $UE 194  ]
[; ;ff.c: 2165: }
"2165
[e :UE 194 ]
}
"2175
[v _check_fs `(uc ~T0 @X0 1 sf2`*S1`ul ]
"2179
{
[; ;ff.c: 2174: static
[; ;ff.c: 2175: BYTE check_fs (
[; ;ff.c: 2176: FATFS* fs,
[; ;ff.c: 2177: DWORD sect
[; ;ff.c: 2178: )
[; ;ff.c: 2179: {
[e :U _check_fs ]
"2176
[v _fs `*S1 ~T0 @X0 1 r1 ]
"2177
[v _sect `ul ~T0 @X0 1 r2 ]
"2179
[f ]
[; ;ff.c: 2180: fs->wflag = 0; fs->winsect = 0xFFFFFFFF;
"2180
[e = . *U _fs 4 -> -> 0 `i `uc ]
[e = . *U _fs 16 -> -1 `ul ]
[; ;ff.c: 2181: if (move_window(fs, sect) != FR_OK)
"2181
[e $ ! != -> ( _move_window (2 , _fs _sect `i -> . `E64 0 `i 204  ]
[; ;ff.c: 2182: return 3;
"2182
[e ) -> -> 3 `i `uc ]
[e $UE 203  ]
[e :U 204 ]
[; ;ff.c: 2184: if ((WORD)(*(WORD*)(BYTE*)(&fs->win[510])) != 0xAA55)
"2184
[e $ ! != -> *U -> &U *U + &U . *U _fs 17 * -> -> -> 510 `i `ui `ux -> -> # *U &U . *U _fs 17 `ui `ux `*us `ui -> 43605 `ui 205  ]
[; ;ff.c: 2185: return 2;
"2185
[e ) -> -> 2 `i `uc ]
[e $UE 203  ]
[e :U 205 ]
[; ;ff.c: 2187: if (((DWORD)(*(DWORD*)(BYTE*)(&fs->win[54])) & 0xFFFFFF) == 0x544146)
"2187
[e $ ! == & *U -> &U *U + &U . *U _fs 17 * -> -> -> 54 `i `ui `ux -> -> # *U &U . *U _fs 17 `ui `ux `*ul -> -> 16777215 `l `ul -> -> 5521734 `l `ul 206  ]
[; ;ff.c: 2188: return 0;
"2188
[e ) -> -> 0 `i `uc ]
[e $UE 203  ]
[e :U 206 ]
[; ;ff.c: 2189: if (((DWORD)(*(DWORD*)(BYTE*)(&fs->win[82])) & 0xFFFFFF) == 0x544146)
"2189
[e $ ! == & *U -> &U *U + &U . *U _fs 17 * -> -> -> 82 `i `ui `ux -> -> # *U &U . *U _fs 17 `ui `ux `*ul -> -> 16777215 `l `ul -> -> 5521734 `l `ul 207  ]
[; ;ff.c: 2190: return 0;
"2190
[e ) -> -> 0 `i `uc ]
[e $UE 203  ]
[e :U 207 ]
[; ;ff.c: 2192: return 1;
"2192
[e ) -> -> 1 `i `uc ]
[e $UE 203  ]
[; ;ff.c: 2193: }
"2193
[e :UE 203 ]
}
"2203
[v _find_volume `(E64 ~T0 @X0 1 sf3`**S1`**Cuc`uc ]
"2208
{
[; ;ff.c: 2202: static
[; ;ff.c: 2203: FRESULT find_volume (
[; ;ff.c: 2204: FATFS** rfs,
[; ;ff.c: 2205: const TCHAR** path,
[; ;ff.c: 2206: BYTE wmode
[; ;ff.c: 2207: )
[; ;ff.c: 2208: {
[e :U _find_volume ]
"2204
[v _rfs `**S1 ~T0 @X0 1 r1 ]
"2205
[v _path `**Cuc ~T0 @X0 1 r2 ]
"2206
[v _wmode `uc ~T0 @X0 1 r3 ]
"2208
[f ]
"2209
[v _fmt `uc ~T0 @X0 1 a ]
[v _pt `*uc ~T0 @X0 1 a ]
"2210
[v _vol `i ~T0 @X0 1 a ]
"2211
[v _stat `uc ~T0 @X0 1 a ]
"2212
[v _bsect `ul ~T0 @X0 1 a ]
[v _fasize `ul ~T0 @X0 1 a ]
[v _tsect `ul ~T0 @X0 1 a ]
[v _sysect `ul ~T0 @X0 1 a ]
[v _nclst `ul ~T0 @X0 1 a ]
[v _szbfat `ul ~T0 @X0 1 a ]
[v _br `ul ~T0 @X0 -> 4 `i a ]
"2213
[v _nrsv `us ~T0 @X0 1 a ]
"2214
[v _fs `*S1 ~T0 @X0 1 a ]
"2215
[v _i `ui ~T0 @X0 1 a ]
[; ;ff.c: 2209: BYTE fmt, *pt;
[; ;ff.c: 2210: int vol;
[; ;ff.c: 2211: DSTATUS stat;
[; ;ff.c: 2212: DWORD bsect, fasize, tsect, sysect, nclst, szbfat, br[4];
[; ;ff.c: 2213: WORD nrsv;
[; ;ff.c: 2214: FATFS *fs;
[; ;ff.c: 2215: UINT i;
[; ;ff.c: 2219: *rfs = 0;
"2219
[e = *U _rfs -> -> 0 `i `*S1 ]
[; ;ff.c: 2220: vol = get_ldnumber(path);
"2220
[e = _vol ( _get_ldnumber (1 _path ]
[; ;ff.c: 2221: if (vol < 0) return FR_INVALID_DRIVE;
"2221
[e $ ! < _vol -> 0 `i 209  ]
[e ) -> . `E64 11 `E64 ]
[e $UE 208  ]
[e :U 209 ]
[; ;ff.c: 2224: fs = FatFs[vol];
"2224
[e = _fs *U + &U _FatFs * -> -> _vol `ui `ux -> -> # *U &U _FatFs `ui `ux ]
[; ;ff.c: 2225: if (!fs) return FR_NOT_ENABLED;
"2225
[e $ ! ! != _fs -> -> 0 `i `*S1 210  ]
[e ) -> . `E64 12 `E64 ]
[e $UE 208  ]
[e :U 210 ]
[; ;ff.c: 2227: ;
[; ;ff.c: 2228: *rfs = fs;
"2228
[e = *U _rfs _fs ]
[; ;ff.c: 2230: if (fs->fs_type) {
"2230
[e $ ! != -> . *U _fs 0 `i -> -> -> 0 `i `uc `i 211  ]
{
[; ;ff.c: 2231: stat = disk_status(fs->drv);
"2231
[e = _stat ( _disk_status (1 . *U _fs 1 ]
[; ;ff.c: 2232: if (!(stat & 0x01)) {
"2232
[e $ ! ! != & -> _stat `i -> 1 `i -> 0 `i 212  ]
{
[; ;ff.c: 2233: if (!0 && wmode && (stat & 0x04))
"2233
[e $ ! && && ! != -> 0 `i -> 0 `i != -> _wmode `i -> -> -> 0 `i `uc `i != & -> _stat `i -> 4 `i -> 0 `i 213  ]
[; ;ff.c: 2234: return FR_WRITE_PROTECTED;
"2234
[e ) -> . `E64 10 `E64 ]
[e $UE 208  ]
[e :U 213 ]
[; ;ff.c: 2235: return FR_OK;
"2235
[e ) -> . `E64 0 `E64 ]
[e $UE 208  ]
"2236
}
[e :U 212 ]
"2237
}
[e :U 211 ]
[; ;ff.c: 2236: }
[; ;ff.c: 2237: }
[; ;ff.c: 2242: fs->fs_type = 0;
"2242
[e = . *U _fs 0 -> -> 0 `i `uc ]
[; ;ff.c: 2243: fs->drv = (BYTE)(vol);
"2243
[e = . *U _fs 1 -> _vol `uc ]
[; ;ff.c: 2244: stat = disk_initialize(fs->drv);
"2244
[e = _stat ( _disk_initialize (1 . *U _fs 1 ]
[; ;ff.c: 2245: if (stat & 0x01)
"2245
[e $ ! != & -> _stat `i -> 1 `i -> 0 `i 214  ]
[; ;ff.c: 2246: return FR_NOT_READY;
"2246
[e ) -> . `E64 3 `E64 ]
[e $UE 208  ]
[e :U 214 ]
[; ;ff.c: 2247: if (!0 && wmode && (stat & 0x04))
"2247
[e $ ! && && ! != -> 0 `i -> 0 `i != -> _wmode `i -> -> -> 0 `i `uc `i != & -> _stat `i -> 4 `i -> 0 `i 215  ]
[; ;ff.c: 2248: return FR_WRITE_PROTECTED;
"2248
[e ) -> . `E64 10 `E64 ]
[e $UE 208  ]
[e :U 215 ]
[; ;ff.c: 2254: bsect = 0;
"2254
[e = _bsect -> -> -> 0 `i `l `ul ]
[; ;ff.c: 2255: fmt = check_fs(fs, bsect);
"2255
[e = _fmt ( _check_fs (2 , _fs _bsect ]
[; ;ff.c: 2256: if (fmt == 1 || (!fmt && (0))) {
"2256
[e $ ! || == -> _fmt `i -> 1 `i && ! != -> _fmt `i -> -> -> 0 `i `uc `i != -> 0 `i -> 0 `i 216  ]
{
[; ;ff.c: 2257: for (i = 0; i < 4; i++) {
"2257
{
[e = _i -> -> 0 `i `ui ]
[e $ < _i -> -> 4 `i `ui 217  ]
[e $U 218  ]
[e :U 217 ]
{
[; ;ff.c: 2258: pt = fs->win + 446 + i * 16;
"2258
[e = _pt + + &U . *U _fs 17 * -> -> 446 `i `x -> -> # *U &U . *U _fs 17 `i `x * -> * _i -> -> 16 `i `ui `ux -> -> # *U + &U . *U _fs 17 * -> -> 446 `i `x -> -> # *U &U . *U _fs 17 `i `x `ui `ux ]
[; ;ff.c: 2259: br[i] = pt[4] ? (DWORD)(*(DWORD*)(BYTE*)(&pt[8])) : 0;
"2259
[e = *U + &U _br * -> _i `ux -> -> # *U &U _br `ui `ux ? != -> *U + _pt * -> -> 4 `i `x -> -> # *U _pt `i `x `i -> -> -> 0 `i `uc `i : *U -> &U *U + _pt * -> -> 8 `i `x -> -> # *U _pt `i `x `*ul -> -> -> 0 `i `l `ul ]
"2260
}
"2257
[e ++ _i -> -> 1 `i `ui ]
[e $ < _i -> -> 4 `i `ui 217  ]
[e :U 218 ]
"2260
}
[; ;ff.c: 2260: }
[; ;ff.c: 2261: i = 0;
"2261
[e = _i -> -> 0 `i `ui ]
[; ;ff.c: 2262: if (i) i--;
"2262
[e $ ! != _i -> -> 0 `i `ui 220  ]
[e -- _i -> -> 1 `i `ui ]
[e :U 220 ]
[; ;ff.c: 2263: do {
"2263
[e :U 223 ]
{
[; ;ff.c: 2264: bsect = br[i];
"2264
[e = _bsect *U + &U _br * -> _i `ux -> -> # *U &U _br `ui `ux ]
[; ;ff.c: 2265: fmt = bsect ? check_fs(fs, bsect) : 2;
"2265
[e = _fmt -> ? != _bsect -> -> 0 `i `ul : -> ( _check_fs (2 , _fs _bsect `i -> 2 `i `uc ]
"2266
}
[; ;ff.c: 2266: } while (!0 && fmt && ++i < 4);
[e $ && && ! != -> 0 `i -> 0 `i != -> _fmt `i -> -> -> 0 `i `uc `i < =+ _i -> -> 1 `i `ui -> -> 4 `i `ui 223  ]
[e :U 222 ]
"2267
}
[e :U 216 ]
[; ;ff.c: 2267: }
[; ;ff.c: 2268: if (fmt == 3) return FR_DISK_ERR;
"2268
[e $ ! == -> _fmt `i -> 3 `i 224  ]
[e ) -> . `E64 1 `E64 ]
[e $UE 208  ]
[e :U 224 ]
[; ;ff.c: 2269: if (fmt) return FR_NO_FILESYSTEM;
"2269
[e $ ! != -> _fmt `i -> -> -> 0 `i `uc `i 225  ]
[e ) -> . `E64 13 `E64 ]
[e $UE 208  ]
[e :U 225 ]
[; ;ff.c: 2273: if ((WORD)(*(WORD*)(BYTE*)(fs->win + 11)) != ((UINT)512))
"2273
[e $ ! != -> *U -> + &U . *U _fs 17 * -> -> 11 `i `x -> -> # *U &U . *U _fs 17 `i `x `*us `ui -> -> 512 `i `ui 226  ]
[; ;ff.c: 2274: return FR_NO_FILESYSTEM;
"2274
[e ) -> . `E64 13 `E64 ]
[e $UE 208  ]
[e :U 226 ]
[; ;ff.c: 2276: fasize = (WORD)(*(WORD*)(BYTE*)(fs->win + 22));
"2276
[e = _fasize -> *U -> + &U . *U _fs 17 * -> -> 22 `i `x -> -> # *U &U . *U _fs 17 `i `x `*us `ul ]
[; ;ff.c: 2277: if (!fasize) fasize = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 36));
"2277
[e $ ! ! != _fasize -> -> 0 `i `ul 227  ]
[e = _fasize *U -> + &U . *U _fs 17 * -> -> 36 `i `x -> -> # *U &U . *U _fs 17 `i `x `*ul ]
[e :U 227 ]
[; ;ff.c: 2278: fs->fsize = fasize;
"2278
[e = . *U _fs 11 _fasize ]
[; ;ff.c: 2280: fs->n_fats = fs->win[16];
"2280
[e = . *U _fs 3 *U + &U . *U _fs 17 * -> -> -> 16 `i `ui `ux -> -> # *U &U . *U _fs 17 `ui `ux ]
[; ;ff.c: 2281: if (fs->n_fats != 1 && fs->n_fats != 2)
"2281
[e $ ! && != -> . *U _fs 3 `i -> 1 `i != -> . *U _fs 3 `i -> 2 `i 228  ]
[; ;ff.c: 2282: return FR_NO_FILESYSTEM;
"2282
[e ) -> . `E64 13 `E64 ]
[e $UE 208  ]
[e :U 228 ]
[; ;ff.c: 2283: fasize *= fs->n_fats;
"2283
[e =* _fasize -> . *U _fs 3 `ul ]
[; ;ff.c: 2285: fs->csize = fs->win[13];
"2285
[e = . *U _fs 2 *U + &U . *U _fs 17 * -> -> -> 13 `i `ui `ux -> -> # *U &U . *U _fs 17 `ui `ux ]
[; ;ff.c: 2286: if (!fs->csize || (fs->csize & (fs->csize - 1)))
"2286
[e $ ! || ! != -> . *U _fs 2 `i -> -> -> 0 `i `uc `i != & -> . *U _fs 2 `i - -> . *U _fs 2 `i -> 1 `i -> 0 `i 229  ]
[; ;ff.c: 2287: return FR_NO_FILESYSTEM;
"2287
[e ) -> . `E64 13 `E64 ]
[e $UE 208  ]
[e :U 229 ]
[; ;ff.c: 2289: fs->n_rootdir = (WORD)(*(WORD*)(BYTE*)(fs->win + 17));
"2289
[e = . *U _fs 7 *U -> + &U . *U _fs 17 * -> -> 17 `i `x -> -> # *U &U . *U _fs 17 `i `x `*us ]
[; ;ff.c: 2290: if (fs->n_rootdir % (((UINT)512) / 32))
"2290
[e $ ! != % -> . *U _fs 7 `ui / -> -> 512 `i `ui -> -> 32 `i `ui -> -> 0 `i `ui 230  ]
[; ;ff.c: 2291: return FR_NO_FILESYSTEM;
"2291
[e ) -> . `E64 13 `E64 ]
[e $UE 208  ]
[e :U 230 ]
[; ;ff.c: 2293: tsect = (WORD)(*(WORD*)(BYTE*)(fs->win + 19));
"2293
[e = _tsect -> *U -> + &U . *U _fs 17 * -> -> 19 `i `x -> -> # *U &U . *U _fs 17 `i `x `*us `ul ]
[; ;ff.c: 2294: if (!tsect) tsect = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 32));
"2294
[e $ ! ! != _tsect -> -> 0 `i `ul 231  ]
[e = _tsect *U -> + &U . *U _fs 17 * -> -> 32 `i `x -> -> # *U &U . *U _fs 17 `i `x `*ul ]
[e :U 231 ]
[; ;ff.c: 2296: nrsv = (WORD)(*(WORD*)(BYTE*)(fs->win + 14));
"2296
[e = _nrsv *U -> + &U . *U _fs 17 * -> -> 14 `i `x -> -> # *U &U . *U _fs 17 `i `x `*us ]
[; ;ff.c: 2297: if (!nrsv) return FR_NO_FILESYSTEM;
"2297
[e $ ! ! != -> _nrsv `ui -> -> -> 0 `i `us `ui 232  ]
[e ) -> . `E64 13 `E64 ]
[e $UE 208  ]
[e :U 232 ]
[; ;ff.c: 2300: sysect = nrsv + fasize + fs->n_rootdir / (((UINT)512) / 32);
"2300
[e = _sysect + + -> _nrsv `ul _fasize -> / -> . *U _fs 7 `ui / -> -> 512 `i `ui -> -> 32 `i `ui `ul ]
[; ;ff.c: 2301: if (tsect < sysect) return FR_NO_FILESYSTEM;
"2301
[e $ ! < _tsect _sysect 233  ]
[e ) -> . `E64 13 `E64 ]
[e $UE 208  ]
[e :U 233 ]
[; ;ff.c: 2302: nclst = (tsect - sysect) / fs->csize;
"2302
[e = _nclst / - _tsect _sysect -> . *U _fs 2 `ul ]
[; ;ff.c: 2303: if (!nclst) return FR_NO_FILESYSTEM;
"2303
[e $ ! ! != _nclst -> -> 0 `i `ul 234  ]
[e ) -> . `E64 13 `E64 ]
[e $UE 208  ]
[e :U 234 ]
[; ;ff.c: 2304: fmt = 1;
"2304
[e = _fmt -> -> 1 `i `uc ]
[; ;ff.c: 2305: if (nclst >= 4086U) fmt = 2;
"2305
[e $ ! >= _nclst -> -> 4086 `ui `ul 235  ]
[e = _fmt -> -> 2 `i `uc ]
[e :U 235 ]
[; ;ff.c: 2306: if (nclst >= 65526U) fmt = 3;
"2306
[e $ ! >= _nclst -> -> 65526 `ui `ul 236  ]
[e = _fmt -> -> 3 `i `uc ]
[e :U 236 ]
[; ;ff.c: 2309: fs->n_fatent = nclst + 2;
"2309
[e = . *U _fs 10 + _nclst -> -> -> 2 `i `l `ul ]
[; ;ff.c: 2310: fs->volbase = bsect;
"2310
[e = . *U _fs 12 _bsect ]
[; ;ff.c: 2311: fs->fatbase = bsect + nrsv;
"2311
[e = . *U _fs 13 + _bsect -> _nrsv `ul ]
[; ;ff.c: 2312: fs->database = bsect + sysect;
"2312
[e = . *U _fs 15 + _bsect _sysect ]
[; ;ff.c: 2313: if (fmt == 3) {
"2313
[e $ ! == -> _fmt `i -> 3 `i 237  ]
{
[; ;ff.c: 2314: if (fs->n_rootdir) return FR_NO_FILESYSTEM;
"2314
[e $ ! != -> . *U _fs 7 `ui -> -> -> 0 `i `us `ui 238  ]
[e ) -> . `E64 13 `E64 ]
[e $UE 208  ]
[e :U 238 ]
[; ;ff.c: 2315: fs->dirbase = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 44));
"2315
[e = . *U _fs 14 *U -> + &U . *U _fs 17 * -> -> 44 `i `x -> -> # *U &U . *U _fs 17 `i `x `*ul ]
[; ;ff.c: 2316: szbfat = fs->n_fatent * 4;
"2316
[e = _szbfat * . *U _fs 10 -> -> -> 4 `i `l `ul ]
"2317
}
[; ;ff.c: 2317: } else {
[e $U 239  ]
[e :U 237 ]
{
[; ;ff.c: 2318: if (!fs->n_rootdir) return FR_NO_FILESYSTEM;
"2318
[e $ ! ! != -> . *U _fs 7 `ui -> -> -> 0 `i `us `ui 240  ]
[e ) -> . `E64 13 `E64 ]
[e $UE 208  ]
[e :U 240 ]
[; ;ff.c: 2319: fs->dirbase = fs->fatbase + fasize;
"2319
[e = . *U _fs 14 + . *U _fs 13 _fasize ]
[; ;ff.c: 2320: szbfat = (fmt == 2) ?
[; ;ff.c: 2321: fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
"2321
[e = _szbfat ? == -> _fmt `i -> 2 `i : * . *U _fs 10 -> -> -> 2 `i `l `ul + / * . *U _fs 10 -> -> -> 3 `i `l `ul -> -> -> 2 `i `l `ul & . *U _fs 10 -> -> -> 1 `i `l `ul ]
"2322
}
[e :U 239 ]
[; ;ff.c: 2322: }
[; ;ff.c: 2323: if (fs->fsize < (szbfat + (((UINT)512) - 1)) / ((UINT)512))
"2323
[e $ ! < . *U _fs 11 / + _szbfat -> - -> -> 512 `i `ui -> -> 1 `i `ui `ul -> -> -> 512 `i `ui `ul 241  ]
[; ;ff.c: 2324: return FR_NO_FILESYSTEM;
"2324
[e ) -> . `E64 13 `E64 ]
[e $UE 208  ]
[e :U 241 ]
[; ;ff.c: 2328: fs->last_clust = fs->free_clust = 0xFFFFFFFF;
"2328
[e = . *U _fs 8 = . *U _fs 9 -> -1 `ul ]
[; ;ff.c: 2331: fs->fsi_flag = 0x80;
"2331
[e = . *U _fs 5 -> -> 128 `i `uc ]
[; ;ff.c: 2333: if (fmt == 3
[; ;ff.c: 2334: && (WORD)(*(WORD*)(BYTE*)(fs->win + 48)) == 1
[; ;ff.c: 2335: && move_window(fs, bsect + 1) == FR_OK)
"2335
[e $ ! && && == -> _fmt `i -> 3 `i == -> *U -> + &U . *U _fs 17 * -> -> 48 `i `x -> -> # *U &U . *U _fs 17 `i `x `*us `ui -> -> 1 `i `ui == -> ( _move_window (2 , _fs + _bsect -> -> -> 1 `i `l `ul `i -> . `E64 0 `i 242  ]
[; ;ff.c: 2336: {
"2336
{
[; ;ff.c: 2337: fs->fsi_flag = 0;
"2337
[e = . *U _fs 5 -> -> 0 `i `uc ]
[; ;ff.c: 2338: if ((WORD)(*(WORD*)(BYTE*)(fs->win + 510)) == 0xAA55
[; ;ff.c: 2339: && (DWORD)(*(DWORD*)(BYTE*)(fs->win + 0)) == 0x41615252
[; ;ff.c: 2340: && (DWORD)(*(DWORD*)(BYTE*)(fs->win + 484)) == 0x61417272)
"2340
[e $ ! && && == -> *U -> + &U . *U _fs 17 * -> -> 510 `i `x -> -> # *U &U . *U _fs 17 `i `x `*us `ui -> 43605 `ui == *U -> + &U . *U _fs 17 * -> -> 0 `i `x -> -> # *U &U . *U _fs 17 `i `x `*ul -> -> 1096897106 `l `ul == *U -> + &U . *U _fs 17 * -> -> 484 `i `x -> -> # *U &U . *U _fs 17 `i `x `*ul -> -> 1631679090 `l `ul 243  ]
[; ;ff.c: 2341: {
"2341
{
[; ;ff.c: 2343: fs->free_clust = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 488));
"2343
[e = . *U _fs 9 *U -> + &U . *U _fs 17 * -> -> 488 `i `x -> -> # *U &U . *U _fs 17 `i `x `*ul ]
[; ;ff.c: 2346: fs->last_clust = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 492));
"2346
[e = . *U _fs 8 *U -> + &U . *U _fs 17 * -> -> 492 `i `x -> -> # *U &U . *U _fs 17 `i `x `*ul ]
"2348
}
[e :U 243 ]
"2349
}
[e :U 242 ]
[; ;ff.c: 2348: }
[; ;ff.c: 2349: }
[; ;ff.c: 2352: fs->fs_type = fmt;
"2352
[e = . *U _fs 0 _fmt ]
[; ;ff.c: 2353: fs->id = ++Fsid;
"2353
[e = . *U _fs 6 =+ _Fsid -> -> 1 `i `us ]
[; ;ff.c: 2361: return FR_OK;
"2361
[e ) -> . `E64 0 `E64 ]
[e $UE 208  ]
[; ;ff.c: 2362: }
"2362
[e :UE 208 ]
}
"2372
[v _validate `(E64 ~T0 @X0 1 sf1`*v ]
"2375
{
[; ;ff.c: 2371: static
[; ;ff.c: 2372: FRESULT validate (
[; ;ff.c: 2373: void* obj
[; ;ff.c: 2374: )
[; ;ff.c: 2375: {
[e :U _validate ]
"2373
[v _obj `*v ~T0 @X0 1 r1 ]
"2375
[f ]
"2376
[v _fil `*S2 ~T0 @X0 1 a ]
[; ;ff.c: 2376: FIL *fil = (FIL*)obj;
[e = _fil -> _obj `*S2 ]
[; ;ff.c: 2379: if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & 0x01))
"2379
[e $ ! || || || || ! != _fil -> -> 0 `i `*S2 ! != . *U _fil 0 -> -> 0 `i `*S1 ! != -> . *U . *U _fil 0 0 `i -> -> -> 0 `i `uc `i != -> . *U . *U _fil 0 6 `ui -> . *U _fil 1 `ui != & -> ( _disk_status (1 . *U . *U _fil 0 1 `i -> 1 `i -> 0 `i 245  ]
[; ;ff.c: 2380: return FR_INVALID_OBJECT;
"2380
[e ) -> . `E64 9 `E64 ]
[e $UE 244  ]
[e :U 245 ]
[; ;ff.c: 2382: ;
[; ;ff.c: 2384: return FR_OK;
"2384
[e ) -> . `E64 0 `E64 ]
[e $UE 244  ]
[; ;ff.c: 2385: }
"2385
[e :UE 244 ]
}
"2402
[v _f_mount `(E64 ~T0 @X0 1 ef3`*S1`*Cuc`uc ]
"2407
{
[; ;ff.c: 2402: FRESULT f_mount (
[; ;ff.c: 2403: FATFS* fs,
[; ;ff.c: 2404: const TCHAR* path,
[; ;ff.c: 2405: BYTE opt
[; ;ff.c: 2406: )
[; ;ff.c: 2407: {
[e :U _f_mount ]
"2403
[v _fs `*S1 ~T0 @X0 1 r1 ]
"2404
[v _path `*Cuc ~T0 @X0 1 r2 ]
"2405
[v _opt `uc ~T0 @X0 1 r3 ]
"2407
[f ]
"2408
[v _cfs `*S1 ~T0 @X0 1 a ]
"2409
[v _vol `i ~T0 @X0 1 a ]
"2410
[v _res `E64 ~T0 @X0 1 a ]
"2411
[v _rp `*Cuc ~T0 @X0 1 a ]
[; ;ff.c: 2408: FATFS *cfs;
[; ;ff.c: 2409: int vol;
[; ;ff.c: 2410: FRESULT res;
[; ;ff.c: 2411: const TCHAR *rp = path;
[e = _rp _path ]
[; ;ff.c: 2414: vol = get_ldnumber(&rp);
"2414
[e = _vol ( _get_ldnumber (1 &U _rp ]
[; ;ff.c: 2415: if (vol < 0) return FR_INVALID_DRIVE;
"2415
[e $ ! < _vol -> 0 `i 247  ]
[e ) -> . `E64 11 `E64 ]
[e $UE 246  ]
[e :U 247 ]
[; ;ff.c: 2416: cfs = FatFs[vol];
"2416
[e = _cfs *U + &U _FatFs * -> -> _vol `ui `ux -> -> # *U &U _FatFs `ui `ux ]
[; ;ff.c: 2418: if (cfs) {
"2418
[e $ ! != _cfs -> -> 0 `i `*S1 248  ]
{
[; ;ff.c: 2425: cfs->fs_type = 0;
"2425
[e = . *U _cfs 0 -> -> 0 `i `uc ]
"2426
}
[e :U 248 ]
[; ;ff.c: 2426: }
[; ;ff.c: 2428: if (fs) {
"2428
[e $ ! != _fs -> -> 0 `i `*S1 249  ]
{
[; ;ff.c: 2429: fs->fs_type = 0;
"2429
[e = . *U _fs 0 -> -> 0 `i `uc ]
"2433
}
[e :U 249 ]
[; ;ff.c: 2433: }
[; ;ff.c: 2434: FatFs[vol] = fs;
"2434
[e = *U + &U _FatFs * -> -> _vol `ui `ux -> -> # *U &U _FatFs `ui `ux _fs ]
[; ;ff.c: 2436: if (!fs || opt != 1) return FR_OK;
"2436
[e $ ! || ! != _fs -> -> 0 `i `*S1 != -> _opt `i -> 1 `i 250  ]
[e ) -> . `E64 0 `E64 ]
[e $UE 246  ]
[e :U 250 ]
[; ;ff.c: 2438: res = find_volume(&fs, &path, 0);
"2438
[e = _res ( _find_volume (3 , , &U _fs &U _path -> -> 0 `i `uc ]
[; ;ff.c: 2439: return res;
"2439
[e ) _res ]
[e $UE 246  ]
[; ;ff.c: 2440: }
"2440
[e :UE 246 ]
}
"2449
[v _f_open `(E64 ~T0 @X0 1 ef3`*S2`*Cuc`uc ]
"2454
{
[; ;ff.c: 2449: FRESULT f_open (
[; ;ff.c: 2450: FIL* fp,
[; ;ff.c: 2451: const TCHAR* path,
[; ;ff.c: 2452: BYTE mode
[; ;ff.c: 2453: )
[; ;ff.c: 2454: {
[e :U _f_open ]
"2450
[v _fp `*S2 ~T0 @X0 1 r1 ]
"2451
[v _path `*Cuc ~T0 @X0 1 r2 ]
"2452
[v _mode `uc ~T0 @X0 1 r3 ]
"2454
[f ]
"2455
[v _res `E64 ~T0 @X0 1 a ]
"2456
[v _dj `S3 ~T0 @X0 1 a ]
"2457
[v _dir `*uc ~T0 @X0 1 a ]
"2458
[v _sfn `uc ~T0 @X0 -> 12 `i a ]
"2460
[v _dw `ul ~T0 @X0 1 a ]
[v _cl `ul ~T0 @X0 1 a ]
[; ;ff.c: 2455: FRESULT res;
[; ;ff.c: 2456: DIR dj;
[; ;ff.c: 2457: BYTE *dir;
[; ;ff.c: 2458: BYTE sfn[12];
[; ;ff.c: 2460: DWORD dw, cl;
[; ;ff.c: 2464: if (!fp) return FR_INVALID_OBJECT;
"2464
[e $ ! ! != _fp -> -> 0 `i `*S2 252  ]
[e ) -> . `E64 9 `E64 ]
[e $UE 251  ]
[e :U 252 ]
[; ;ff.c: 2465: fp->fs = 0;
"2465
[e = . *U _fp 0 -> -> 0 `i `*S1 ]
[; ;ff.c: 2469: mode &= 0x01 | 0x02 | 0x08 | 0x10 | 0x04;
"2469
[e =& _mode -> | | | | -> 1 `i -> 2 `i -> 8 `i -> 16 `i -> 4 `i `uc ]
[; ;ff.c: 2470: res = find_volume(&dj.fs, &path, (BYTE)(mode & ~0x01));
"2470
[e = _res ( _find_volume (3 , , &U . _dj 0 &U _path -> & -> _mode `i ~ -> 1 `i `uc ]
[; ;ff.c: 2475: if (res == FR_OK) {
"2475
[e $ ! == -> _res `i -> . `E64 0 `i 253  ]
{
[; ;ff.c: 2476: (dj).fn = sfn;
"2476
[e = . _dj 7 &U _sfn ]
[; ;ff.c: 2477: res = follow_path(&dj, path);
"2477
[e = _res ( _follow_path (2 , &U _dj _path ]
[; ;ff.c: 2478: dir = dj.dir;
"2478
[e = _dir . _dj 6 ]
[; ;ff.c: 2480: if (res == FR_OK) {
"2480
[e $ ! == -> _res `i -> . `E64 0 `i 254  ]
{
[; ;ff.c: 2481: if (!dir)
"2481
[e $ ! ! != _dir -> -> 0 `i `*uc 255  ]
[; ;ff.c: 2482: res = FR_INVALID_NAME;
"2482
[e = _res -> . `E64 6 `E64 ]
[e :U 255 ]
"2487
}
[e :U 254 ]
[; ;ff.c: 2487: }
[; ;ff.c: 2489: if (mode & (0x08 | 0x10 | 0x04)) {
"2489
[e $ ! != & -> _mode `i | | -> 8 `i -> 16 `i -> 4 `i -> 0 `i 256  ]
{
[; ;ff.c: 2490: if (res != FR_OK) {
"2490
[e $ ! != -> _res `i -> . `E64 0 `i 257  ]
{
[; ;ff.c: 2491: if (res == FR_NO_FILE)
"2491
[e $ ! == -> _res `i -> . `E64 4 `i 258  ]
[; ;ff.c: 2495: res = dir_register(&dj);
"2495
[e = _res ( _dir_register (1 &U _dj ]
[e :U 258 ]
[; ;ff.c: 2497: mode |= 0x08;
"2497
[e =| _mode -> -> 8 `i `uc ]
[; ;ff.c: 2498: dir = dj.dir;
"2498
[e = _dir . _dj 6 ]
"2499
}
[; ;ff.c: 2499: }
[e $U 259  ]
"2500
[e :U 257 ]
[; ;ff.c: 2500: else {
{
[; ;ff.c: 2501: if (dir[11] & (0x01 | 0x10)) {
"2501
[e $ ! != & -> *U + _dir * -> -> 11 `i `x -> -> # *U _dir `i `x `i | -> 1 `i -> 16 `i -> 0 `i 260  ]
{
[; ;ff.c: 2502: res = FR_DENIED;
"2502
[e = _res -> . `E64 7 `E64 ]
"2503
}
[; ;ff.c: 2503: } else {
[e $U 261  ]
[e :U 260 ]
{
[; ;ff.c: 2504: if (mode & 0x04)
"2504
[e $ ! != & -> _mode `i -> 4 `i -> 0 `i 262  ]
[; ;ff.c: 2505: res = FR_EXIST;
"2505
[e = _res -> . `E64 8 `E64 ]
[e :U 262 ]
"2506
}
[e :U 261 ]
"2507
}
[e :U 259 ]
[; ;ff.c: 2506: }
[; ;ff.c: 2507: }
[; ;ff.c: 2508: if (res == FR_OK && (mode & 0x08)) {
"2508
[e $ ! && == -> _res `i -> . `E64 0 `i != & -> _mode `i -> 8 `i -> 0 `i 263  ]
{
[; ;ff.c: 2509: dw = 061616;
"2509
[e = _dw -> -> -> 25486 `i `l `ul ]
[; ;ff.c: 2510: *(DWORD*)(BYTE*)(dir + 14)=(DWORD)(dw);
"2510
[e = *U -> + _dir * -> -> 14 `i `x -> -> # *U _dir `i `x `*ul _dw ]
[; ;ff.c: 2511: *(DWORD*)(BYTE*)(dir + 22)=(DWORD)(dw);
"2511
[e = *U -> + _dir * -> -> 22 `i `x -> -> # *U _dir `i `x `*ul _dw ]
[; ;ff.c: 2512: dir[11] = 0;
"2512
[e = *U + _dir * -> -> 11 `i `x -> -> # *U _dir `i `x -> -> 0 `i `uc ]
[; ;ff.c: 2513: *(DWORD*)(BYTE*)(dir + 28)=(DWORD)(0);
"2513
[e = *U -> + _dir * -> -> 28 `i `x -> -> # *U _dir `i `x `*ul -> -> 0 `i `ul ]
[; ;ff.c: 2514: cl = ld_clust(dj.fs, dir);
"2514
[e = _cl ( _ld_clust (2 , . _dj 0 -> _dir `*Cuc ]
[; ;ff.c: 2515: st_clust(dir, 0);
"2515
[e ( _st_clust (2 , _dir -> -> -> 0 `i `l `ul ]
[; ;ff.c: 2516: dj.fs->wflag = 1;
"2516
[e = . *U . _dj 0 4 -> -> 1 `i `uc ]
[; ;ff.c: 2517: if (cl) {
"2517
[e $ ! != _cl -> -> 0 `i `ul 264  ]
{
[; ;ff.c: 2518: dw = dj.fs->winsect;
"2518
[e = _dw . *U . _dj 0 16 ]
[; ;ff.c: 2519: res = remove_chain(dj.fs, cl);
"2519
[e = _res ( _remove_chain (2 , . _dj 0 _cl ]
[; ;ff.c: 2520: if (res == FR_OK) {
"2520
[e $ ! == -> _res `i -> . `E64 0 `i 265  ]
{
[; ;ff.c: 2521: dj.fs->last_clust = cl - 1;
"2521
[e = . *U . _dj 0 8 - _cl -> -> -> 1 `i `l `ul ]
[; ;ff.c: 2522: res = move_window(dj.fs, dw);
"2522
[e = _res ( _move_window (2 , . _dj 0 _dw ]
"2523
}
[e :U 265 ]
"2524
}
[e :U 264 ]
"2525
}
[e :U 263 ]
"2526
}
[; ;ff.c: 2523: }
[; ;ff.c: 2524: }
[; ;ff.c: 2525: }
[; ;ff.c: 2526: }
[e $U 266  ]
"2527
[e :U 256 ]
[; ;ff.c: 2527: else {
{
[; ;ff.c: 2528: if (res == FR_OK) {
"2528
[e $ ! == -> _res `i -> . `E64 0 `i 267  ]
{
[; ;ff.c: 2529: if (dir[11] & 0x10) {
"2529
[e $ ! != & -> *U + _dir * -> -> 11 `i `x -> -> # *U _dir `i `x `i -> 16 `i -> 0 `i 268  ]
{
[; ;ff.c: 2530: res = FR_NO_FILE;
"2530
[e = _res -> . `E64 4 `E64 ]
"2531
}
[; ;ff.c: 2531: } else {
[e $U 269  ]
[e :U 268 ]
{
[; ;ff.c: 2532: if ((mode & 0x02) && (dir[11] & 0x01))
"2532
[e $ ! && != & -> _mode `i -> 2 `i -> 0 `i != & -> *U + _dir * -> -> 11 `i `x -> -> # *U _dir `i `x `i -> 1 `i -> 0 `i 270  ]
[; ;ff.c: 2533: res = FR_DENIED;
"2533
[e = _res -> . `E64 7 `E64 ]
[e :U 270 ]
"2534
}
[e :U 269 ]
"2535
}
[e :U 267 ]
"2536
}
[e :U 266 ]
[; ;ff.c: 2534: }
[; ;ff.c: 2535: }
[; ;ff.c: 2536: }
[; ;ff.c: 2537: if (res == FR_OK) {
"2537
[e $ ! == -> _res `i -> . `E64 0 `i 271  ]
{
[; ;ff.c: 2538: if (mode & 0x08)
"2538
[e $ ! != & -> _mode `i -> 8 `i -> 0 `i 272  ]
[; ;ff.c: 2539: mode |= 0x20;
"2539
[e =| _mode -> -> 32 `i `uc ]
[e :U 272 ]
[; ;ff.c: 2540: fp->dir_sect = dj.fs->winsect;
"2540
[e = . *U _fp 9 . *U . _dj 0 16 ]
[; ;ff.c: 2541: fp->dir_ptr = dir;
"2541
[e = . *U _fp 10 _dir ]
"2546
}
[e :U 271 ]
[; ;ff.c: 2546: }
[; ;ff.c: 2559: ;
[; ;ff.c: 2561: if (res == FR_OK) {
"2561
[e $ ! == -> _res `i -> . `E64 0 `i 273  ]
{
[; ;ff.c: 2562: fp->flag = mode;
"2562
[e = . *U _fp 2 _mode ]
[; ;ff.c: 2563: fp->err = 0;
"2563
[e = . *U _fp 3 -> -> 0 `i `uc ]
[; ;ff.c: 2564: fp->sclust = ld_clust(dj.fs, dir);
"2564
[e = . *U _fp 6 ( _ld_clust (2 , . _dj 0 -> _dir `*Cuc ]
[; ;ff.c: 2565: fp->fsize = (DWORD)(*(DWORD*)(BYTE*)(dir + 28));
"2565
[e = . *U _fp 5 *U -> + _dir * -> -> 28 `i `x -> -> # *U _dir `i `x `*ul ]
[; ;ff.c: 2566: fp->fptr = 0;
"2566
[e = . *U _fp 4 -> -> -> 0 `i `l `ul ]
[; ;ff.c: 2567: fp->dsect = 0;
"2567
[e = . *U _fp 8 -> -> -> 0 `i `l `ul ]
[; ;ff.c: 2571: fp->fs = dj.fs;
"2571
[e = . *U _fp 0 . _dj 0 ]
[; ;ff.c: 2572: fp->id = fp->fs->id;
"2572
[e = . *U _fp 1 . *U . *U _fp 0 6 ]
"2573
}
[e :U 273 ]
"2574
}
[e :U 253 ]
[; ;ff.c: 2573: }
[; ;ff.c: 2574: }
[; ;ff.c: 2576: return res;
"2576
[e ) _res ]
[e $UE 251  ]
[; ;ff.c: 2577: }
"2577
[e :UE 251 ]
}
"2586
[v _f_read `(E64 ~T0 @X0 1 ef4`*S2`*v`ui`*ui ]
"2592
{
[; ;ff.c: 2586: FRESULT f_read (
[; ;ff.c: 2587: FIL* fp,
[; ;ff.c: 2588: void* buff,
[; ;ff.c: 2589: UINT btr,
[; ;ff.c: 2590: UINT* br
[; ;ff.c: 2591: )
[; ;ff.c: 2592: {
[e :U _f_read ]
"2587
[v _fp `*S2 ~T0 @X0 1 r1 ]
"2588
[v _buff `*v ~T0 @X0 1 r2 ]
"2589
[v _btr `ui ~T0 @X0 1 r3 ]
"2590
[v _br `*ui ~T0 @X0 1 r4 ]
"2592
[f ]
"2593
[v _res `E64 ~T0 @X0 1 a ]
"2594
[v _clst `ul ~T0 @X0 1 a ]
[v _sect `ul ~T0 @X0 1 a ]
[v _remain `ul ~T0 @X0 1 a ]
"2595
[v _rcnt `ui ~T0 @X0 1 a ]
[v _cc `ui ~T0 @X0 1 a ]
"2596
[v _csect `uc ~T0 @X0 1 a ]
[v _rbuff `*uc ~T0 @X0 1 a ]
[; ;ff.c: 2593: FRESULT res;
[; ;ff.c: 2594: DWORD clst, sect, remain;
[; ;ff.c: 2595: UINT rcnt, cc;
[; ;ff.c: 2596: BYTE csect, *rbuff = (BYTE*)buff;
[e = _rbuff -> _buff `*uc ]
[; ;ff.c: 2599: *br = 0;
"2599
[e = *U _br -> -> 0 `i `ui ]
[; ;ff.c: 2601: res = validate(fp);
"2601
[e = _res ( _validate (1 -> _fp `*v ]
[; ;ff.c: 2602: if (res != FR_OK) return res;
"2602
[e $ ! != -> _res `i -> . `E64 0 `i 275  ]
[e ) _res ]
[e $UE 274  ]
[e :U 275 ]
[; ;ff.c: 2603: if (fp->err)
"2603
[e $ ! != -> . *U _fp 3 `i -> -> -> 0 `i `uc `i 276  ]
[; ;ff.c: 2604: return (FRESULT)fp->err;
"2604
[e ) -> . *U _fp 3 `E64 ]
[e $UE 274  ]
[e :U 276 ]
[; ;ff.c: 2605: if (!(fp->flag & 0x01))
"2605
[e $ ! ! != & -> . *U _fp 2 `i -> 1 `i -> 0 `i 277  ]
[; ;ff.c: 2606: return FR_DENIED;
"2606
[e ) -> . `E64 7 `E64 ]
[e $UE 274  ]
[e :U 277 ]
[; ;ff.c: 2607: remain = fp->fsize - fp->fptr;
"2607
[e = _remain - . *U _fp 5 . *U _fp 4 ]
[; ;ff.c: 2608: if (btr > remain) btr = (UINT)remain;
"2608
[e $ ! > -> _btr `ul _remain 278  ]
[e = _btr -> _remain `ui ]
[e :U 278 ]
[; ;ff.c: 2610: for ( ; btr;
"2610
{
[; ;ff.c: 2611: rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
[e $U 282  ]
"2611
[e :U 279 ]
{
[; ;ff.c: 2612: if ((fp->fptr % ((UINT)512)) == 0) {
"2612
[e $ ! == % . *U _fp 4 -> -> -> 512 `i `ui `ul -> -> -> 0 `i `l `ul 283  ]
{
[; ;ff.c: 2613: csect = (BYTE)(fp->fptr / ((UINT)512) & (fp->fs->csize - 1));
"2613
[e = _csect -> & / . *U _fp 4 -> -> -> 512 `i `ui `ul -> -> - -> . *U . *U _fp 0 2 `i -> 1 `i `l `ul `uc ]
[; ;ff.c: 2614: if (!csect) {
"2614
[e $ ! ! != -> _csect `i -> -> -> 0 `i `uc `i 284  ]
{
[; ;ff.c: 2615: if (fp->fptr == 0) {
"2615
[e $ ! == . *U _fp 4 -> -> -> 0 `i `l `ul 285  ]
{
[; ;ff.c: 2616: clst = fp->sclust;
"2616
[e = _clst . *U _fp 6 ]
"2617
}
[; ;ff.c: 2617: } else {
[e $U 286  ]
[e :U 285 ]
{
[; ;ff.c: 2623: clst = get_fat(fp->fs, fp->clust);
"2623
[e = _clst ( _get_fat (2 , . *U _fp 0 . *U _fp 7 ]
"2624
}
[e :U 286 ]
[; ;ff.c: 2624: }
[; ;ff.c: 2625: if (clst < 2) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
"2625
[e $ ! < _clst -> -> -> 2 `i `l `ul 287  ]
{
[e = . *U _fp 3 -> . `E64 2 `uc ]
[e ) -> . `E64 2 `E64 ]
[e $UE 274  ]
}
[e :U 287 ]
[; ;ff.c: 2626: if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
"2626
[e $ ! == _clst -> -1 `ul 288  ]
{
[e = . *U _fp 3 -> . `E64 1 `uc ]
[e ) -> . `E64 1 `E64 ]
[e $UE 274  ]
}
[e :U 288 ]
[; ;ff.c: 2627: fp->clust = clst;
"2627
[e = . *U _fp 7 _clst ]
"2628
}
[e :U 284 ]
[; ;ff.c: 2628: }
[; ;ff.c: 2629: sect = clust2sect(fp->fs, fp->clust);
"2629
[e = _sect ( _clust2sect (2 , . *U _fp 0 . *U _fp 7 ]
[; ;ff.c: 2630: if (!sect) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
"2630
[e $ ! ! != _sect -> -> 0 `i `ul 289  ]
{
[e = . *U _fp 3 -> . `E64 2 `uc ]
[e ) -> . `E64 2 `E64 ]
[e $UE 274  ]
}
[e :U 289 ]
[; ;ff.c: 2631: sect += csect;
"2631
[e =+ _sect -> _csect `ul ]
[; ;ff.c: 2632: cc = btr / ((UINT)512);
"2632
[e = _cc / _btr -> -> 512 `i `ui ]
[; ;ff.c: 2633: if (cc) {
"2633
[e $ ! != _cc -> -> 0 `i `ui 290  ]
{
[; ;ff.c: 2634: if (csect + cc > fp->fs->csize)
"2634
[e $ ! > + -> _csect `ui _cc -> . *U . *U _fp 0 2 `ui 291  ]
[; ;ff.c: 2635: cc = fp->fs->csize - csect;
"2635
[e = _cc -> - -> . *U . *U _fp 0 2 `i -> _csect `i `ui ]
[e :U 291 ]
[; ;ff.c: 2636: if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
"2636
[e $ ! != -> ( _disk_read (4 , , , . *U . *U _fp 0 1 _rbuff _sect _cc `i -> . `E195 0 `i 292  ]
[; ;ff.c: 2637: { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
"2637
{
[e = . *U _fp 3 -> . `E64 1 `uc ]
[e ) -> . `E64 1 `E64 ]
[e $UE 274  ]
}
[e :U 292 ]
[; ;ff.c: 2647: rcnt = ((UINT)512) * cc;
"2647
[e = _rcnt * -> -> 512 `i `ui _cc ]
[; ;ff.c: 2648: continue;
"2648
[e $U 281  ]
"2649
}
[e :U 290 ]
[; ;ff.c: 2649: }
[; ;ff.c: 2663: fp->dsect = sect;
"2663
[e = . *U _fp 8 _sect ]
"2664
}
[e :U 283 ]
[; ;ff.c: 2664: }
[; ;ff.c: 2665: rcnt = ((UINT)512) - ((UINT)fp->fptr % ((UINT)512));
"2665
[e = _rcnt - -> -> 512 `i `ui % -> . *U _fp 4 `ui -> -> 512 `i `ui ]
[; ;ff.c: 2666: if (rcnt > btr) rcnt = btr;
"2666
[e $ ! > _rcnt _btr 293  ]
[e = _rcnt _btr ]
[e :U 293 ]
[; ;ff.c: 2668: if (move_window(fp->fs, fp->dsect) != FR_OK)
"2668
[e $ ! != -> ( _move_window (2 , . *U _fp 0 . *U _fp 8 `i -> . `E64 0 `i 294  ]
[; ;ff.c: 2669: { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
"2669
{
[e = . *U _fp 3 -> . `E64 1 `uc ]
[e ) -> . `E64 1 `E64 ]
[e $UE 274  ]
}
[e :U 294 ]
[; ;ff.c: 2670: mem_cpy(rbuff, &fp->fs->win[fp->fptr % ((UINT)512)], rcnt);
"2670
[e ( _mem_cpy (3 , , -> _rbuff `*v -> &U *U + &U . *U . *U _fp 0 17 * -> % . *U _fp 4 -> -> -> 512 `i `ui `ul `ux -> -> # *U &U . *U . *U _fp 0 17 `ui `ux `*Cv _rcnt ]
"2674
}
"2611
[e :U 281 ]
[e ; ; ; =+ _rbuff * -> _rcnt `ux -> -> # *U _rbuff `ui `ux =+ . *U _fp 4 -> _rcnt `ul =+ *U _br _rcnt =- _btr _rcnt ]
"2610
[e :U 282 ]
[e $ != _btr -> -> 0 `i `ui 279  ]
[e :U 280 ]
"2674
}
[; ;ff.c: 2674: }
[; ;ff.c: 2676: return FR_OK;
"2676
[e ) -> . `E64 0 `E64 ]
[e $UE 274  ]
[; ;ff.c: 2677: }
"2677
[e :UE 274 ]
}
"2687
[v _f_write `(E64 ~T0 @X0 1 ef4`*S2`*Cv`ui`*ui ]
"2693
{
[; ;ff.c: 2687: FRESULT f_write (
[; ;ff.c: 2688: FIL* fp,
[; ;ff.c: 2689: const void *buff,
[; ;ff.c: 2690: UINT btw,
[; ;ff.c: 2691: UINT* bw
[; ;ff.c: 2692: )
[; ;ff.c: 2693: {
[e :U _f_write ]
"2688
[v _fp `*S2 ~T0 @X0 1 r1 ]
"2689
[v _buff `*Cv ~T0 @X0 1 r2 ]
"2690
[v _btw `ui ~T0 @X0 1 r3 ]
"2691
[v _bw `*ui ~T0 @X0 1 r4 ]
"2693
[f ]
"2694
[v _res `E64 ~T0 @X0 1 a ]
"2695
[v _clst `ul ~T0 @X0 1 a ]
[v _sect `ul ~T0 @X0 1 a ]
"2696
[v _wcnt `ui ~T0 @X0 1 a ]
[v _cc `ui ~T0 @X0 1 a ]
"2697
[v _wbuff `*Cuc ~T0 @X0 1 a ]
[; ;ff.c: 2694: FRESULT res;
[; ;ff.c: 2695: DWORD clst, sect;
[; ;ff.c: 2696: UINT wcnt, cc;
[; ;ff.c: 2697: const BYTE *wbuff = (const BYTE*)buff;
[e = _wbuff -> _buff `*Cuc ]
"2698
[v _csect `uc ~T0 @X0 1 a ]
[; ;ff.c: 2698: BYTE csect;
[; ;ff.c: 2701: *bw = 0;
"2701
[e = *U _bw -> -> 0 `i `ui ]
[; ;ff.c: 2703: res = validate(fp);
"2703
[e = _res ( _validate (1 -> _fp `*v ]
[; ;ff.c: 2704: if (res != FR_OK) return res;
"2704
[e $ ! != -> _res `i -> . `E64 0 `i 296  ]
[e ) _res ]
[e $UE 295  ]
[e :U 296 ]
[; ;ff.c: 2705: if (fp->err)
"2705
[e $ ! != -> . *U _fp 3 `i -> -> -> 0 `i `uc `i 297  ]
[; ;ff.c: 2706: return (FRESULT)fp->err;
"2706
[e ) -> . *U _fp 3 `E64 ]
[e $UE 295  ]
[e :U 297 ]
[; ;ff.c: 2707: if (!(fp->flag & 0x02))
"2707
[e $ ! ! != & -> . *U _fp 2 `i -> 2 `i -> 0 `i 298  ]
[; ;ff.c: 2708: return FR_DENIED;
"2708
[e ) -> . `E64 7 `E64 ]
[e $UE 295  ]
[e :U 298 ]
[; ;ff.c: 2709: if (fp->fptr + btw < fp->fptr) btw = 0;
"2709
[e $ ! < + . *U _fp 4 -> _btw `ul . *U _fp 4 299  ]
[e = _btw -> -> 0 `i `ui ]
[e :U 299 ]
[; ;ff.c: 2711: for ( ; btw;
"2711
{
[; ;ff.c: 2712: wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
[e $U 303  ]
"2712
[e :U 300 ]
{
[; ;ff.c: 2713: if ((fp->fptr % ((UINT)512)) == 0) {
"2713
[e $ ! == % . *U _fp 4 -> -> -> 512 `i `ui `ul -> -> -> 0 `i `l `ul 304  ]
{
[; ;ff.c: 2714: csect = (BYTE)(fp->fptr / ((UINT)512) & (fp->fs->csize - 1));
"2714
[e = _csect -> & / . *U _fp 4 -> -> -> 512 `i `ui `ul -> -> - -> . *U . *U _fp 0 2 `i -> 1 `i `l `ul `uc ]
[; ;ff.c: 2715: if (!csect) {
"2715
[e $ ! ! != -> _csect `i -> -> -> 0 `i `uc `i 305  ]
{
[; ;ff.c: 2716: if (fp->fptr == 0) {
"2716
[e $ ! == . *U _fp 4 -> -> -> 0 `i `l `ul 306  ]
{
[; ;ff.c: 2717: clst = fp->sclust;
"2717
[e = _clst . *U _fp 6 ]
[; ;ff.c: 2718: if (clst == 0)
"2718
[e $ ! == _clst -> -> -> 0 `i `l `ul 307  ]
[; ;ff.c: 2719: clst = create_chain(fp->fs, 0);
"2719
[e = _clst ( _create_chain (2 , . *U _fp 0 -> -> -> 0 `i `l `ul ]
[e :U 307 ]
"2720
}
[; ;ff.c: 2720: } else {
[e $U 308  ]
[e :U 306 ]
{
[; ;ff.c: 2726: clst = create_chain(fp->fs, fp->clust);
"2726
[e = _clst ( _create_chain (2 , . *U _fp 0 . *U _fp 7 ]
"2727
}
[e :U 308 ]
[; ;ff.c: 2727: }
[; ;ff.c: 2728: if (clst == 0) break;
"2728
[e $ ! == _clst -> -> -> 0 `i `l `ul 309  ]
[e $U 301  ]
[e :U 309 ]
[; ;ff.c: 2729: if (clst == 1) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
"2729
[e $ ! == _clst -> -> -> 1 `i `l `ul 310  ]
{
[e = . *U _fp 3 -> . `E64 2 `uc ]
[e ) -> . `E64 2 `E64 ]
[e $UE 295  ]
}
[e :U 310 ]
[; ;ff.c: 2730: if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
"2730
[e $ ! == _clst -> -1 `ul 311  ]
{
[e = . *U _fp 3 -> . `E64 1 `uc ]
[e ) -> . `E64 1 `E64 ]
[e $UE 295  ]
}
[e :U 311 ]
[; ;ff.c: 2731: fp->clust = clst;
"2731
[e = . *U _fp 7 _clst ]
[; ;ff.c: 2732: if (fp->sclust == 0) fp->sclust = clst;
"2732
[e $ ! == . *U _fp 6 -> -> -> 0 `i `l `ul 312  ]
[e = . *U _fp 6 _clst ]
[e :U 312 ]
"2733
}
[e :U 305 ]
[; ;ff.c: 2733: }
[; ;ff.c: 2735: if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))
"2735
[e $ ! && == . *U . *U _fp 0 16 . *U _fp 8 != -> ( _sync_window (1 . *U _fp 0 `i -> -> -> 0 `i `E64 `i 313  ]
[; ;ff.c: 2736: { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
"2736
{
[e = . *U _fp 3 -> . `E64 1 `uc ]
[e ) -> . `E64 1 `E64 ]
[e $UE 295  ]
}
[e :U 313 ]
[; ;ff.c: 2744: sect = clust2sect(fp->fs, fp->clust);
"2744
[e = _sect ( _clust2sect (2 , . *U _fp 0 . *U _fp 7 ]
[; ;ff.c: 2745: if (!sect) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
"2745
[e $ ! ! != _sect -> -> 0 `i `ul 314  ]
{
[e = . *U _fp 3 -> . `E64 2 `uc ]
[e ) -> . `E64 2 `E64 ]
[e $UE 295  ]
}
[e :U 314 ]
[; ;ff.c: 2746: sect += csect;
"2746
[e =+ _sect -> _csect `ul ]
[; ;ff.c: 2747: cc = btw / ((UINT)512);
"2747
[e = _cc / _btw -> -> 512 `i `ui ]
[; ;ff.c: 2748: if (cc) {
"2748
[e $ ! != _cc -> -> 0 `i `ui 315  ]
{
[; ;ff.c: 2749: if (csect + cc > fp->fs->csize)
"2749
[e $ ! > + -> _csect `ui _cc -> . *U . *U _fp 0 2 `ui 316  ]
[; ;ff.c: 2750: cc = fp->fs->csize - csect;
"2750
[e = _cc -> - -> . *U . *U _fp 0 2 `i -> _csect `i `ui ]
[e :U 316 ]
[; ;ff.c: 2751: if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
"2751
[e $ ! != -> ( _disk_write (4 , , , . *U . *U _fp 0 1 _wbuff _sect _cc `i -> . `E195 0 `i 317  ]
[; ;ff.c: 2752: { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
"2752
{
[e = . *U _fp 3 -> . `E64 1 `uc ]
[e ) -> . `E64 1 `E64 ]
[e $UE 295  ]
}
[e :U 317 ]
[; ;ff.c: 2766: wcnt = ((UINT)512) * cc;
"2766
[e = _wcnt * -> -> 512 `i `ui _cc ]
[; ;ff.c: 2767: continue;
"2767
[e $U 302  ]
"2768
}
[e :U 315 ]
[; ;ff.c: 2768: }
[; ;ff.c: 2770: if (fp->fptr >= fp->fsize) {
"2770
[e $ ! >= . *U _fp 4 . *U _fp 5 318  ]
{
[; ;ff.c: 2771: if (sync_window(fp->fs)) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
"2771
[e $ ! != -> ( _sync_window (1 . *U _fp 0 `i -> -> -> 0 `i `E64 `i 319  ]
{
[e = . *U _fp 3 -> . `E64 1 `uc ]
[e ) -> . `E64 1 `E64 ]
[e $UE 295  ]
}
[e :U 319 ]
[; ;ff.c: 2772: fp->fs->winsect = sect;
"2772
[e = . *U . *U _fp 0 16 _sect ]
"2773
}
[e :U 318 ]
[; ;ff.c: 2773: }
[; ;ff.c: 2781: fp->dsect = sect;
"2781
[e = . *U _fp 8 _sect ]
"2782
}
[e :U 304 ]
[; ;ff.c: 2782: }
[; ;ff.c: 2783: wcnt = ((UINT)512) - ((UINT)fp->fptr % ((UINT)512));
"2783
[e = _wcnt - -> -> 512 `i `ui % -> . *U _fp 4 `ui -> -> 512 `i `ui ]
[; ;ff.c: 2784: if (wcnt > btw) wcnt = btw;
"2784
[e $ ! > _wcnt _btw 320  ]
[e = _wcnt _btw ]
[e :U 320 ]
[; ;ff.c: 2786: if (move_window(fp->fs, fp->dsect) != FR_OK)
"2786
[e $ ! != -> ( _move_window (2 , . *U _fp 0 . *U _fp 8 `i -> . `E64 0 `i 321  ]
[; ;ff.c: 2787: { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
"2787
{
[e = . *U _fp 3 -> . `E64 1 `uc ]
[e ) -> . `E64 1 `E64 ]
[e $UE 295  ]
}
[e :U 321 ]
[; ;ff.c: 2788: mem_cpy(&fp->fs->win[fp->fptr % ((UINT)512)], wbuff, wcnt);
"2788
[e ( _mem_cpy (3 , , -> &U *U + &U . *U . *U _fp 0 17 * -> % . *U _fp 4 -> -> -> 512 `i `ui `ul `ux -> -> # *U &U . *U . *U _fp 0 17 `ui `ux `*v -> _wbuff `*Cv _wcnt ]
[; ;ff.c: 2789: fp->fs->wflag = 1;
"2789
[e = . *U . *U _fp 0 4 -> -> 1 `i `uc ]
"2794
}
"2712
[e :U 302 ]
[e ; ; ; =+ _wbuff * -> _wcnt `ux -> -> # *U _wbuff `ui `ux =+ . *U _fp 4 -> _wcnt `ul =+ *U _bw _wcnt =- _btw _wcnt ]
"2711
[e :U 303 ]
[e $ != _btw -> -> 0 `i `ui 300  ]
[e :U 301 ]
"2794
}
[; ;ff.c: 2794: }
[; ;ff.c: 2796: if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;
"2796
[e $ ! > . *U _fp 4 . *U _fp 5 322  ]
[e = . *U _fp 5 . *U _fp 4 ]
[e :U 322 ]
[; ;ff.c: 2797: fp->flag |= 0x20;
"2797
[e =| . *U _fp 2 -> -> 32 `i `uc ]
[; ;ff.c: 2799: return FR_OK;
"2799
[e ) -> . `E64 0 `E64 ]
[e $UE 295  ]
[; ;ff.c: 2800: }
"2800
[e :UE 295 ]
}
"2809
[v _f_sync `(E64 ~T0 @X0 1 ef1`*S2 ]
"2812
{
[; ;ff.c: 2809: FRESULT f_sync (
[; ;ff.c: 2810: FIL* fp
[; ;ff.c: 2811: )
[; ;ff.c: 2812: {
[e :U _f_sync ]
"2810
[v _fp `*S2 ~T0 @X0 1 r1 ]
"2812
[f ]
"2813
[v _res `E64 ~T0 @X0 1 a ]
"2814
[v _tm `ul ~T0 @X0 1 a ]
"2815
[v _dir `*uc ~T0 @X0 1 a ]
[; ;ff.c: 2813: FRESULT res;
[; ;ff.c: 2814: DWORD tm;
[; ;ff.c: 2815: BYTE *dir;
[; ;ff.c: 2818: res = validate(fp);
"2818
[e = _res ( _validate (1 -> _fp `*v ]
[; ;ff.c: 2819: if (res == FR_OK) {
"2819
[e $ ! == -> _res `i -> . `E64 0 `i 324  ]
{
[; ;ff.c: 2820: if (fp->flag & 0x20) {
"2820
[e $ ! != & -> . *U _fp 2 `i -> 32 `i -> 0 `i 325  ]
{
[; ;ff.c: 2829: res = move_window(fp->fs, fp->dir_sect);
"2829
[e = _res ( _move_window (2 , . *U _fp 0 . *U _fp 9 ]
[; ;ff.c: 2830: if (res == FR_OK) {
"2830
[e $ ! == -> _res `i -> . `E64 0 `i 326  ]
{
[; ;ff.c: 2831: dir = fp->dir_ptr;
"2831
[e = _dir . *U _fp 10 ]
[; ;ff.c: 2832: dir[11] |= 0x20;
"2832
[e =| *U + _dir * -> -> 11 `i `x -> -> # *U _dir `i `x -> -> 32 `i `uc ]
[; ;ff.c: 2833: *(DWORD*)(BYTE*)(dir + 28)=(DWORD)(fp->fsize);
"2833
[e = *U -> + _dir * -> -> 28 `i `x -> -> # *U _dir `i `x `*ul . *U _fp 5 ]
[; ;ff.c: 2834: st_clust(dir, fp->sclust);
"2834
[e ( _st_clust (2 , _dir . *U _fp 6 ]
[; ;ff.c: 2835: tm = 061616;
"2835
[e = _tm -> -> -> 25486 `i `l `ul ]
[; ;ff.c: 2836: *(DWORD*)(BYTE*)(dir + 22)=(DWORD)(tm);
"2836
[e = *U -> + _dir * -> -> 22 `i `x -> -> # *U _dir `i `x `*ul _tm ]
[; ;ff.c: 2837: *(WORD*)(BYTE*)(dir + 18)=(WORD)(0);
"2837
[e = *U -> + _dir * -> -> 18 `i `x -> -> # *U _dir `i `x `*us -> -> 0 `i `us ]
[; ;ff.c: 2838: fp->flag &= ~0x20;
"2838
[e =& . *U _fp 2 -> ~ -> 32 `i `uc ]
[; ;ff.c: 2839: fp->fs->wflag = 1;
"2839
[e = . *U . *U _fp 0 4 -> -> 1 `i `uc ]
[; ;ff.c: 2840: res = sync_fs(fp->fs);
"2840
[e = _res ( _sync_fs (1 . *U _fp 0 ]
"2841
}
[e :U 326 ]
"2842
}
[e :U 325 ]
"2843
}
[e :U 324 ]
[; ;ff.c: 2841: }
[; ;ff.c: 2842: }
[; ;ff.c: 2843: }
[; ;ff.c: 2845: return res;
"2845
[e ) _res ]
[e $UE 323  ]
[; ;ff.c: 2846: }
"2846
[e :UE 323 ]
}
"2857
[v _f_close `(E64 ~T0 @X0 1 ef1`*S2 ]
"2860
{
[; ;ff.c: 2857: FRESULT f_close (
[; ;ff.c: 2858: FIL *fp
[; ;ff.c: 2859: )
[; ;ff.c: 2860: {
[e :U _f_close ]
"2858
[v _fp `*S2 ~T0 @X0 1 r1 ]
"2860
[f ]
"2861
[v _res `E64 ~T0 @X0 1 a ]
[; ;ff.c: 2861: FRESULT res;
[; ;ff.c: 2865: res = f_sync(fp);
"2865
[e = _res ( _f_sync (1 _fp ]
[; ;ff.c: 2866: if (res == FR_OK)
"2866
[e $ ! == -> _res `i -> . `E64 0 `i 328  ]
[; ;ff.c: 2868: {
"2868
{
[; ;ff.c: 2869: res = validate(fp);
"2869
[e = _res ( _validate (1 -> _fp `*v ]
[; ;ff.c: 2870: if (res == FR_OK) {
"2870
[e $ ! == -> _res `i -> . `E64 0 `i 329  ]
{
[; ;ff.c: 2878: fp->fs = 0;
"2878
[e = . *U _fp 0 -> -> 0 `i `*S1 ]
"2882
}
[e :U 329 ]
"2883
}
[e :U 328 ]
[; ;ff.c: 2882: }
[; ;ff.c: 2883: }
[; ;ff.c: 2884: return res;
"2884
[e ) _res ]
[e $UE 327  ]
[; ;ff.c: 2885: }
"2885
[e :UE 327 ]
}
[a 1C 34 42 43 44 58 59 60 61 62 63 91 93 124 127 0 ]

