

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Wed Jun 15 22:51:50 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F4515
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    35                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    36  0000                     
    37                           	psect	idataBANK0
    38  00AFA8                     __pidataBANK0:
    39                           	opt stack 0
    40                           
    41                           ;initializer for displayMemory@F3443
    42  00AFA8  20                 	db	32
    43  00AFA9  20                 	db	32
    44  00AFAA  20                 	db	32
    45  00AFAB  20                 	db	32
    46  00AFAC  20                 	db	32
    47  00AFAD  20                 	db	32
    48  00AFAE  20                 	db	32
    49  00AFAF  20                 	db	32
    50  00AFB0  20                 	db	32
    51  00AFB1  20                 	db	32
    52  00AFB2  20                 	db	32
    53  00AFB3  20                 	db	32
    54  00AFB4  20                 	db	32
    55  00AFB5  20                 	db	32
    56  00AFB6  42                 	db	66
    57  00AFB7  79                 	db	121
    58  00AFB8  74                 	db	116
    59  00AFB9  65                 	db	101
    60  00AFBA  73                 	db	115
    61  00AFBB  00                 	db	0
    62  0000                     _PORTC	set	3970
    63  0000                     _PORTD	set	3971
    64  0000                     _TRISB	set	3987
    65  0000                     _TRISC	set	3988
    66  0000                     _TRISD	set	3989
    67                           
    68                           	psect	mediumconst
    69  00BDEA                     __pmediumconst:
    70                           	opt stack 0
    71  00BDEA  00                 	db	0
    72  00BDEB                     __stringdata:
    73                           	opt stack 0
    74  00BDEB                     STR_13:
    75  00BDEB  20                 	db	32
    76  00BDEC  45                 	db	69	;'E'
    77  00BDED  6E                 	db	110	;'n'
    78  00BDEE  74                 	db	116	;'t'
    79  00BDEF  65                 	db	101	;'e'
    80  00BDF0  72                 	db	114	;'r'
    81  00BDF1  20                 	db	32
    82  00BDF2  74                 	db	116	;'t'
    83  00BDF3  65                 	db	101	;'e'
    84  00BDF4  78                 	db	120	;'x'
    85  00BDF5  74                 	db	116	;'t'
    86  00BDF6  20                 	db	32
    87  00BDF7  28                 	db	40
    88  00BDF8  45                 	db	69	;'E'
    89  00BDF9  6E                 	db	110	;'n'
    90  00BDFA  64                 	db	100	;'d'
    91  00BDFB  20                 	db	32
    92  00BDFC  77                 	db	119	;'w'
    93  00BDFD  69                 	db	105	;'i'
    94  00BDFE  74                 	db	116	;'t'
    95  00BDFF  68                 	db	104	;'h'
    96  00BE00  20                 	db	32
    97  00BE01  7E                 	db	126
    98  00BE02  29                 	db	41
    99  00BE03  3A                 	db	58	;':'
   100  00BE04  00                 	db	0
   101  00BE05                     STR_8:
   102  00BE05  54                 	db	84	;'T'
   103  00BE06  48                 	db	72	;'H'
   104  00BE07  49                 	db	73	;'I'
   105  00BE08  53                 	db	83	;'S'
   106  00BE09  20                 	db	32
   107  00BE0A  49                 	db	73	;'I'
   108  00BE0B  53                 	db	83	;'S'
   109  00BE0C  20                 	db	32
   110  00BE0D  4A                 	db	74	;'J'
   111  00BE0E  55                 	db	85	;'U'
   112  00BE0F  53                 	db	83	;'S'
   113  00BE10  54                 	db	84	;'T'
   114  00BE11  20                 	db	32
   115  00BE12  41                 	db	65	;'A'
   116  00BE13  20                 	db	32
   117  00BE14  54                 	db	84	;'T'
   118  00BE15  45                 	db	69	;'E'
   119  00BE16  53                 	db	83	;'S'
   120  00BE17  54                 	db	84	;'T'
   121  00BE18  20                 	db	32
   122  00BE19  20                 	db	32
   123  00BE1A  20                 	db	32
   124  00BE1B  20                 	db	32
   125  00BE1C  7E                 	db	126
   126  00BE1D  00                 	db	0
   127  00BE1E  45                 	db	69	;'E'
   128  00BE1F  6E                 	db	110	;'n'
   129  00BE20  74                 	db	116	;'t'
   130  00BE21  20                 	db	32
   131  00BE22  74                 	db	116	;'t'
   132  00BE23  78                 	db	120	;'x'
   133  00BE24  74                 	db	116	;'t'
   134  00BE25  20                 	db	32
   135  00BE26  65                 	db	101	;'e'
   136  00BE27  6E                 	db	110	;'n'
   137  00BE28  64                 	db	100	;'d'
   138  00BE29  20                 	db	32
   139  00BE2A  77                 	db	119	;'w'
   140  00BE2B  69                 	db	105	;'i'
   141  00BE2C  74                 	db	116	;'t'
   142  00BE2D  68                 	db	104	;'h'
   143  00BE2E  7E                 	db	126
   144  00BE2F  00                 	db	0
   145  00BE30                     STR_15:
   146  00BE30  57                 	db	87	;'W'
   147  00BE31  72                 	db	114	;'r'
   148  00BE32  69                 	db	105	;'i'
   149  00BE33  74                 	db	116	;'t'
   150  00BE34  65                 	db	101	;'e'
   151  00BE35  20                 	db	32
   152  00BE36  73                 	db	115	;'s'
   153  00BE37  75                 	db	117	;'u'
   154  00BE38  63                 	db	99	;'c'
   155  00BE39  63                 	db	99	;'c'
   156  00BE3A  65                 	db	101	;'e'
   157  00BE3B  73                 	db	115	;'s'
   158  00BE3C  73                 	db	115	;'s'
   159  00BE3D  66                 	db	102	;'f'
   160  00BE3E  75                 	db	117	;'u'
   161  00BE3F  6C                 	db	108	;'l'
   162  00BE40  21                 	db	33
   163  00BE41  00                 	db	0
   164  00BE42                     STR_46:
   165  00BE42  20                 	db	32
   166  00BE43  46                 	db	70	;'F'
   167  00BE44  72                 	db	114	;'r'
   168  00BE45  65                 	db	101	;'e'
   169  00BE46  65                 	db	101	;'e'
   170  00BE47  20                 	db	32
   171  00BE48  4D                 	db	77	;'M'
   172  00BE49  65                 	db	101	;'e'
   173  00BE4A  6D                 	db	109	;'m'
   174  00BE4B  6F                 	db	111	;'o'
   175  00BE4C  72                 	db	114	;'r'
   176  00BE4D  79                 	db	121	;'y'
   177  00BE4E  3A                 	db	58	;':'
   178  00BE4F  20                 	db	32
   179  00BE50  20                 	db	32
   180  00BE51  20                 	db	32
   181  00BE52  00                 	db	0
   182  00BE53  20                 	db	32
   183  00BE54  46                 	db	70	;'F'
   184  00BE55  69                 	db	105	;'i'
   185  00BE56  6C                 	db	108	;'l'
   186  00BE57  65                 	db	101	;'e'
   187  00BE58  20                 	db	32
   188  00BE59  43                 	db	67	;'C'
   189  00BE5A  72                 	db	114	;'r'
   190  00BE5B  65                 	db	101	;'e'
   191  00BE5C  61                 	db	97	;'a'
   192  00BE5D  74                 	db	116	;'t'
   193  00BE5E  65                 	db	101	;'e'
   194  00BE5F  64                 	db	100	;'d'
   195  00BE60  21                 	db	33
   196  00BE61  20                 	db	32
   197  00BE62  20                 	db	32
   198  00BE63  00                 	db	0
   199  00BE64  20                 	db	32
   200  00BE65  54                 	db	84	;'T'
   201  00BE66  6F                 	db	111	;'o'
   202  00BE67  74                 	db	116	;'t'
   203  00BE68  61                 	db	97	;'a'
   204  00BE69  6C                 	db	108	;'l'
   205  00BE6A  20                 	db	32
   206  00BE6B  4D                 	db	77	;'M'
   207  00BE6C  65                 	db	101	;'e'
   208  00BE6D  6D                 	db	109	;'m'
   209  00BE6E  6F                 	db	111	;'o'
   210  00BE6F  72                 	db	114	;'r'
   211  00BE70  79                 	db	121	;'y'
   212  00BE71  3A                 	db	58	;':'
   213  00BE72  20                 	db	32
   214  00BE73  20                 	db	32
   215  00BE74  00                 	db	0
   216  00BE75  46                 	db	70	;'F'
   217  00BE76  69                 	db	105	;'i'
   218  00BE77  6C                 	db	108	;'l'
   219  00BE78  65                 	db	101	;'e'
   220  00BE79  20                 	db	32
   221  00BE7A  6E                 	db	110	;'n'
   222  00BE7B  6F                 	db	111	;'o'
   223  00BE7C  74                 	db	116	;'t'
   224  00BE7D  20                 	db	32
   225  00BE7E  65                 	db	101	;'e'
   226  00BE7F  78                 	db	120	;'x'
   227  00BE80  69                 	db	105	;'i'
   228  00BE81  73                 	db	115	;'s'
   229  00BE82  74                 	db	116	;'t'
   230  00BE83  21                 	db	33
   231  00BE84  20                 	db	32
   232  00BE85  00                 	db	0
   233  00BE86  43                 	db	67	;'C'
   234  00BE87  72                 	db	114	;'r'
   235  00BE88  65                 	db	101	;'e'
   236  00BE89  61                 	db	97	;'a'
   237  00BE8A  74                 	db	116	;'t'
   238  00BE8B  69                 	db	105	;'i'
   239  00BE8C  6E                 	db	110	;'n'
   240  00BE8D  67                 	db	103	;'g'
   241  00BE8E  20                 	db	32
   242  00BE8F  46                 	db	70	;'F'
   243  00BE90  69                 	db	105	;'i'
   244  00BE91  6C                 	db	108	;'l'
   245  00BE92  65                 	db	101	;'e'
   246  00BE93  2E                 	db	46
   247  00BE94  2E                 	db	46
   248  00BE95  20                 	db	32
   249  00BE96  00                 	db	0
   250  00BE97                     STR_34:
   251  00BE97  4E                 	db	78	;'N'
   252  00BE98  6F                 	db	111	;'o'
   253  00BE99  20                 	db	32
   254  00BE9A  66                 	db	102	;'f'
   255  00BE9B  72                 	db	114	;'r'
   256  00BE9C  65                 	db	101	;'e'
   257  00BE9D  65                 	db	101	;'e'
   258  00BE9E  20                 	db	32
   259  00BE9F  63                 	db	99	;'c'
   260  00BEA0  6C                 	db	108	;'l'
   261  00BEA1  75                 	db	117	;'u'
   262  00BEA2  73                 	db	115	;'s'
   263  00BEA3  74                 	db	116	;'t'
   264  00BEA4  65                 	db	101	;'e'
   265  00BEA5  72                 	db	114	;'r'
   266  00BEA6  21                 	db	33
   267  00BEA7  00                 	db	0
   268  00BEA8  44                 	db	68	;'D'
   269  00BEA9  65                 	db	101	;'e'
   270  00BEAA  6C                 	db	108	;'l'
   271  00BEAB  65                 	db	101	;'e'
   272  00BEAC  74                 	db	116	;'t'
   273  00BEAD  69                 	db	105	;'i'
   274  00BEAE  6E                 	db	110	;'n'
   275  00BEAF  67                 	db	103	;'g'
   276  00BEB0  2E                 	db	46
   277  00BEB1  2E                 	db	46
   278  00BEB2  2E                 	db	46
   279  00BEB3  2E                 	db	46
   280  00BEB4  2E                 	db	46
   281  00BEB5  2E                 	db	46
   282  00BEB6  2E                 	db	46
   283  00BEB7  2E                 	db	46
   284  00BEB8  00                 	db	0
   285  00BEB9  46                 	db	70	;'F'
   286  00BEBA  69                 	db	105	;'i'
   287  00BEBB  6C                 	db	108	;'l'
   288  00BEBC  65                 	db	101	;'e'
   289  00BEBD  20                 	db	32
   290  00BEBE  65                 	db	101	;'e'
   291  00BEBF  78                 	db	120	;'x'
   292  00BEC0  69                 	db	105	;'i'
   293  00BEC1  73                 	db	115	;'s'
   294  00BEC2  74                 	db	116	;'t'
   295  00BEC3  2C                 	db	44
   296  00BEC4  61                 	db	97	;'a'
   297  00BEC5  70                 	db	112	;'p'
   298  00BEC6  65                 	db	101	;'e'
   299  00BEC7  6E                 	db	110	;'n'
   300  00BEC8  64                 	db	100	;'d'
   301  00BEC9  00                 	db	0
   302  00BECA  49                 	db	73	;'I'
   303  00BECB  6E                 	db	110	;'n'
   304  00BECC  76                 	db	118	;'v'
   305  00BECD  61                 	db	97	;'a'
   306  00BECE  6C                 	db	108	;'l'
   307  00BECF  69                 	db	105	;'i'
   308  00BED0  64                 	db	100	;'d'
   309  00BED1  20                 	db	32
   310  00BED2  66                 	db	102	;'f'
   311  00BED3  69                 	db	105	;'i'
   312  00BED4  6C                 	db	108	;'l'
   313  00BED5  65                 	db	101	;'e'
   314  00BED6  4E                 	db	78	;'N'
   315  00BED7  61                 	db	97	;'a'
   316  00BED8  6D                 	db	109	;'m'
   317  00BED9  65                 	db	101	;'e'
   318  00BEDA  00                 	db	0
   319  00BEDB  45                 	db	69	;'E'
   320  00BEDC  6E                 	db	110	;'n'
   321  00BEDD  64                 	db	100	;'d'
   322  00BEDE  20                 	db	32
   323  00BEDF  43                 	db	67	;'C'
   324  00BEE0  6C                 	db	108	;'l'
   325  00BEE1  75                 	db	117	;'u'
   326  00BEE2  73                 	db	115	;'s'
   327  00BEE3  74                 	db	116	;'t'
   328  00BEE4  72                 	db	114	;'r'
   329  00BEE5  20                 	db	32
   330  00BEE6  43                 	db	67	;'C'
   331  00BEE7  68                 	db	104	;'h'
   332  00BEE8  61                 	db	97	;'a'
   333  00BEE9  69                 	db	105	;'i'
   334  00BEEA  6E                 	db	110	;'n'
   335  00BEEB  00                 	db	0
   336  00BEEC                     STR_28:
   337  00BEEC  45                 	db	69	;'E'
   338  00BEED  72                 	db	114	;'r'
   339  00BEEE  72                 	db	114	;'r'
   340  00BEEF  20                 	db	32
   341  00BEF0  67                 	db	103	;'g'
   342  00BEF1  65                 	db	101	;'e'
   343  00BEF2  74                 	db	116	;'t'
   344  00BEF3  69                 	db	105	;'i'
   345  00BEF4  6E                 	db	110	;'n'
   346  00BEF5  20                 	db	32
   347  00BEF6  63                 	db	99	;'c'
   348  00BEF7  6C                 	db	108	;'l'
   349  00BEF8  75                 	db	117	;'u'
   350  00BEF9  73                 	db	115	;'s'
   351  00BEFA  74                 	db	116	;'t'
   352  00BEFB  72                 	db	114	;'r'
   353  00BEFC  00                 	db	0
   354  00BEFD                     STR_7:
   355  00BEFD  46                 	db	70	;'F'
   356  00BEFE  41                 	db	65	;'A'
   357  00BEFF  54                 	db	84	;'T'
   358  00BF00  33                 	db	51	;'3'
   359  00BF01  32                 	db	50	;'2'
   360  00BF02  20                 	db	32
   361  00BF03  6E                 	db	110	;'n'
   362  00BF04  6F                 	db	111	;'o'
   363  00BF05  74                 	db	116	;'t'
   364  00BF06  20                 	db	32
   365  00BF07  66                 	db	102	;'f'
   366  00BF08  6F                 	db	111	;'o'
   367  00BF09  75                 	db	117	;'u'
   368  00BF0A  6E                 	db	110	;'n'
   369  00BF0B  64                 	db	100	;'d'
   370  00BF0C  21                 	db	33
   371  00BF0D  00                 	db	0
   372  00BF0E                     STR_10:
   373  00BF0E  52                 	db	82	;'R'
   374  00BF0F  65                 	db	101	;'e'
   375  00BF10  61                 	db	97	;'a'
   376  00BF11  64                 	db	100	;'d'
   377  00BF12  20                 	db	32
   378  00BF13  73                 	db	115	;'s'
   379  00BF14  75                 	db	117	;'u'
   380  00BF15  63                 	db	99	;'c'
   381  00BF16  63                 	db	99	;'c'
   382  00BF17  65                 	db	101	;'e'
   383  00BF18  73                 	db	115	;'s'
   384  00BF19  73                 	db	115	;'s'
   385  00BF1A  66                 	db	102	;'f'
   386  00BF1B  75                 	db	117	;'u'
   387  00BF1C  6C                 	db	108	;'l'
   388  00BF1D  21                 	db	33
   389  00BF1E  00                 	db	0
   390  00BF1F                     STR_18:
   391  00BF1F  20                 	db	32
   392  00BF20  49                 	db	73	;'I'
   393  00BF21  6E                 	db	110	;'n'
   394  00BF22  76                 	db	118	;'v'
   395  00BF23  61                 	db	97	;'a'
   396  00BF24  6C                 	db	108	;'l'
   397  00BF25  69                 	db	105	;'i'
   398  00BF26  64                 	db	100	;'d'
   399  00BF27  20                 	db	32
   400  00BF28  6F                 	db	111	;'o'
   401  00BF29  70                 	db	112	;'p'
   402  00BF2A  74                 	db	116	;'t'
   403  00BF2B  69                 	db	105	;'i'
   404  00BF2C  6F                 	db	111	;'o'
   405  00BF2D  6E                 	db	110	;'n'
   406  00BF2E  21                 	db	33
   407  00BF2F  00                 	db	0
   408  00BF30                     STR_2:
   409  00BF30  43                 	db	67	;'C'
   410  00BF31  72                 	db	114	;'r'
   411  00BF32  64                 	db	100	;'d'
   412  00BF33  20                 	db	32
   413  00BF34  49                 	db	73	;'I'
   414  00BF35  6E                 	db	110	;'n'
   415  00BF36  69                 	db	105	;'i'
   416  00BF37  74                 	db	116	;'t'
   417  00BF38  20                 	db	32
   418  00BF39  66                 	db	102	;'f'
   419  00BF3A  61                 	db	97	;'a'
   420  00BF3B  69                 	db	105	;'i'
   421  00BF3C  6C                 	db	108	;'l'
   422  00BF3D  65                 	db	101	;'e'
   423  00BF3E  64                 	db	100	;'d'
   424  00BF3F  2E                 	db	46
   425  00BF40  00                 	db	0
   426  00BF41                     STR_1:
   427  00BF41  43                 	db	67	;'C'
   428  00BF42  72                 	db	114	;'r'
   429  00BF43  64                 	db	100	;'d'
   430  00BF44  20                 	db	32
   431  00BF45  6E                 	db	110	;'n'
   432  00BF46  6F                 	db	111	;'o'
   433  00BF47  74                 	db	116	;'t'
   434  00BF48  20                 	db	32
   435  00BF49  64                 	db	100	;'d'
   436  00BF4A  65                 	db	101	;'e'
   437  00BF4B  74                 	db	116	;'t'
   438  00BF4C  65                 	db	101	;'e'
   439  00BF4D  63                 	db	99	;'c'
   440  00BF4E  74                 	db	116	;'t'
   441  00BF4F  65                 	db	101	;'e'
   442  00BF50  64                 	db	100	;'d'
   443  00BF51  00                 	db	0
   444  00BF52  20                 	db	32
   445  00BF53  46                 	db	70	;'F'
   446  00BF54  69                 	db	105	;'i'
   447  00BF55  6C                 	db	108	;'l'
   448  00BF56  65                 	db	101	;'e'
   449  00BF57  20                 	db	32
   450  00BF58  61                 	db	97	;'a'
   451  00BF59  70                 	db	112	;'p'
   452  00BF5A  70                 	db	112	;'p'
   453  00BF5B  65                 	db	101	;'e'
   454  00BF5C  6E                 	db	110	;'n'
   455  00BF5D  64                 	db	100	;'d'
   456  00BF5E  65                 	db	101	;'e'
   457  00BF5F  64                 	db	100	;'d'
   458  00BF60  21                 	db	33
   459  00BF61  00                 	db	0
   460  00BF62                     STR_4:
   461  00BF62  48                 	db	72	;'H'
   462  00BF63  69                 	db	105	;'i'
   463  00BF64  67                 	db	103	;'g'
   464  00BF65  68                 	db	104	;'h'
   465  00BF66  20                 	db	32
   466  00BF67  43                 	db	67	;'C'
   467  00BF68  61                 	db	97	;'a'
   468  00BF69  70                 	db	112	;'p'
   469  00BF6A  20                 	db	32
   470  00BF6B  44                 	db	68	;'D'
   471  00BF6C  74                 	db	116	;'t'
   472  00BF6D  65                 	db	101	;'e'
   473  00BF6E  63                 	db	99	;'c'
   474  00BF6F  74                 	db	116	;'t'
   475  00BF70  21                 	db	33
   476  00BF71  00                 	db	0
   477  00BF72                     STR_6:
   478  00BF72  55                 	db	85	;'U'
   479  00BF73  6E                 	db	110	;'n'
   480  00BF74  6B                 	db	107	;'k'
   481  00BF75  6E                 	db	110	;'n'
   482  00BF76  6F                 	db	111	;'o'
   483  00BF77  77                 	db	119	;'w'
   484  00BF78  6E                 	db	110	;'n'
   485  00BF79  20                 	db	32
   486  00BF7A  53                 	db	83	;'S'
   487  00BF7B  44                 	db	68	;'D'
   488  00BF7C  20                 	db	32
   489  00BF7D  43                 	db	67	;'C'
   490  00BF7E  61                 	db	97	;'a'
   491  00BF7F  72                 	db	114	;'r'
   492  00BF80  64                 	db	100	;'d'
   493  00BF81  00                 	db	0
   494  00BF82                     STR_3:
   495  00BF82  53                 	db	83	;'S'
   496  00BF83  74                 	db	116	;'t'
   497  00BF84  64                 	db	100	;'d'
   498  00BF85  20                 	db	32
   499  00BF86  43                 	db	67	;'C'
   500  00BF87  61                 	db	97	;'a'
   501  00BF88  70                 	db	112	;'p'
   502  00BF89  20                 	db	32
   503  00BF8A  56                 	db	86	;'V'
   504  00BF8B  65                 	db	101	;'e'
   505  00BF8C  72                 	db	114	;'r'
   506  00BF8D  20                 	db	32
   507  00BF8E  31                 	db	49	;'1'
   508  00BF8F  2E                 	db	46
   509  00BF90  78                 	db	120	;'x'
   510  00BF91  00                 	db	0
   511  00BF92                     STR_5:
   512  00BF92  53                 	db	83	;'S'
   513  00BF93  74                 	db	116	;'t'
   514  00BF94  64                 	db	100	;'d'
   515  00BF95  20                 	db	32
   516  00BF96  43                 	db	67	;'C'
   517  00BF97  61                 	db	97	;'a'
   518  00BF98  70                 	db	112	;'p'
   519  00BF99  20                 	db	32
   520  00BF9A  56                 	db	86	;'V'
   521  00BF9B  65                 	db	101	;'e'
   522  00BF9C  72                 	db	114	;'r'
   523  00BF9D  20                 	db	32
   524  00BF9E  32                 	db	50	;'2'
   525  00BF9F  2E                 	db	46
   526  00BFA0  78                 	db	120	;'x'
   527  00BFA1  00                 	db	0
   528  00BFA2                     STR_11:
   529  00BFA2  45                 	db	69	;'E'
   530  00BFA3  72                 	db	114	;'r'
   531  00BFA4  61                 	db	97	;'a'
   532  00BFA5  73                 	db	115	;'s'
   533  00BFA6  65                 	db	101	;'e'
   534  00BFA7  20                 	db	32
   535  00BFA8  66                 	db	102	;'f'
   536  00BFA9  61                 	db	97	;'a'
   537  00BFAA  69                 	db	105	;'i'
   538  00BFAB  6C                 	db	108	;'l'
   539  00BFAC  65                 	db	101	;'e'
   540  00BFAD  64                 	db	100	;'d'
   541  00BFAE  2E                 	db	46
   542  00BFAF  2E                 	db	46
   543  00BFB0  00                 	db	0
   544  00BFB1                     STR_14:
   545  00BFB1  57                 	db	87	;'W'
   546  00BFB2  72                 	db	114	;'r'
   547  00BFB3  69                 	db	105	;'i'
   548  00BFB4  74                 	db	116	;'t'
   549  00BFB5  65                 	db	101	;'e'
   550  00BFB6  20                 	db	32
   551  00BFB7  66                 	db	102	;'f'
   552  00BFB8  61                 	db	97	;'a'
   553  00BFB9  69                 	db	105	;'i'
   554  00BFBA  6C                 	db	108	;'l'
   555  00BFBB  65                 	db	101	;'e'
   556  00BFBC  64                 	db	100	;'d'
   557  00BFBD  2E                 	db	46
   558  00BFBE  2E                 	db	46
   559  00BFBF  00                 	db	0
   560  00BFC0  46                 	db	70	;'F'
   561  00BFC1  69                 	db	105	;'i'
   562  00BFC2  6C                 	db	108	;'l'
   563  00BFC3  65                 	db	101	;'e'
   564  00BFC4  20                 	db	32
   565  00BFC5  64                 	db	100	;'d'
   566  00BFC6  65                 	db	101	;'e'
   567  00BFC7  6C                 	db	108	;'l'
   568  00BFC8  65                 	db	101	;'e'
   569  00BFC9  74                 	db	116	;'t'
   570  00BFCA  65                 	db	101	;'e'
   571  00BFCB  64                 	db	100	;'d'
   572  00BFCC  21                 	db	33
   573  00BFCD  00                 	db	0
   574  00BFCE                     STR_9:
   575  00BFCE  52                 	db	82	;'R'
   576  00BFCF  65                 	db	101	;'e'
   577  00BFD0  61                 	db	97	;'a'
   578  00BFD1  64                 	db	100	;'d'
   579  00BFD2  20                 	db	32
   580  00BFD3  66                 	db	102	;'f'
   581  00BFD4  61                 	db	97	;'a'
   582  00BFD5  69                 	db	105	;'i'
   583  00BFD6  6C                 	db	108	;'l'
   584  00BFD7  65                 	db	101	;'e'
   585  00BFD8  64                 	db	100	;'d'
   586  00BFD9  2E                 	db	46
   587  00BFDA  2E                 	db	46
   588  00BFDB  00                 	db	0
   589  00BFDC  62                 	db	98	;'b'
   590  00BFDD  75                 	db	117	;'u'
   591  00BFDE  66                 	db	102	;'f'
   592  00BFDF  66                 	db	102	;'f'
   593  00BFE0  65                 	db	101	;'e'
   594  00BFE1  72                 	db	114	;'r'
   595  00BFE2  5B                 	db	91	;'['
   596  00BFE3  6B                 	db	107	;'k'
   597  00BFE4  5D                 	db	93	;']'
   598  00BFE5  00                 	db	0
   599  00BFE6                     STR_12:
   600  00BFE6  45                 	db	69	;'E'
   601  00BFE7  72                 	db	114	;'r'
   602  00BFE8  61                 	db	97	;'a'
   603  00BFE9  73                 	db	115	;'s'
   604  00BFEA  65                 	db	101	;'e'
   605  00BFEB  64                 	db	100	;'d'
   606  00BFEC  21                 	db	33
   607  00BFED  00                 	db	0
   608  00BFEE  46                 	db	70	;'F'
   609  00BFEF  49                 	db	73	;'I'
   610  00BFF0  4C                 	db	76	;'L'
   611  00BFF1  45                 	db	69	;'E'
   612  00BFF2  00                 	db	0
   613  00BFF3  52                 	db	82	;'R'
   614  00BFF4  4F                 	db	79	;'O'
   615  00BFF5  4F                 	db	79	;'O'
   616  00BFF6  54                 	db	84	;'T'
   617  00BFF7  00                 	db	0
   618  00BFF8  44                 	db	68	;'D'
   619  00BFF9  49                 	db	73	;'I'
   620  00BFFA  52                 	db	82	;'R'
   621  00BFFB  00                 	db	0
   622  00BFFC                     STR_36:
   623  00BFFC  0A                 	db	10
   624  00BFFD  00                 	db	0
   625  00BFFE                     __end_of__stringdata:
   626                           	opt stack 0
   627  00BFFE  00                 	db	0	; dummy byte at the end
   628  0000                     
   629                           ; #config settings
   630                           
   631                           	psect	cinit
   632  00B0C4                     __pcinit:
   633                           	opt stack 0
   634  00B0C4                     start_initialization:
   635                           	opt stack 0
   636  00B0C4                     __initialization:
   637                           	opt stack 0
   638                           
   639                           ; Clear objects allocated to BIGRAM (512 bytes)
   640  00B0C4  EE00  F094         	lfsr	0,__pbssBIGRAM
   641  00B0C8  EE12 F000          	lfsr	1,512
   642  00B0CC                     clear_0:
   643  00B0CC  6AEE               	clrf	postinc0,c
   644  00B0CE  50E5               	movf	postdec1,w,c
   645  00B0D0  50E1               	movf	fsr1l,w,c
   646  00B0D2  E1FC               	bnz	clear_0
   647  00B0D4  50E2               	movf	fsr1h,w,c
   648  00B0D6  E1FA               	bnz	clear_0
   649                           
   650                           ; Clear objects allocated to COMRAM (49 bytes)
   651  00B0D8  EE00  F04B         	lfsr	0,__pbssCOMRAM
   652  00B0DC  0E31               	movlw	49
   653  00B0DE                     clear_1:
   654  00B0DE  6AEE               	clrf	postinc0,c
   655  00B0E0  06E8               	decf	wreg,f,c
   656  00B0E2  E1FD               	bnz	clear_1
   657                           
   658                           ; Initialize objects allocated to BANK0 (20 bytes)
   659                           ; load TBLPTR registers with __pidataBANK0
   660  00B0E4  0EA8               	movlw	low __pidataBANK0
   661  00B0E6  6EF6               	movwf	tblptrl,c
   662  00B0E8  0EAF               	movlw	high __pidataBANK0
   663  00B0EA  6EF7               	movwf	tblptrh,c
   664  00B0EC  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   665  00B0EE  6EF8               	movwf	tblptru,c
   666  00B0F0  EE00  F080         	lfsr	0,__pdataBANK0
   667  00B0F4  EE10 F014          	lfsr	1,20
   668  00B0F8                     copy_data0:
   669  00B0F8  0009               	tblrd		*+
   670  00B0FA  CFF5 FFEE          	movff	tablat,postinc0
   671  00B0FE  50E5               	movf	postdec1,w,c
   672  00B100  50E1               	movf	fsr1l,w,c
   673  00B102  E1FA               	bnz	copy_data0
   674  00B104                     end_of_initialization:
   675                           	opt stack 0
   676  00B104                     __end_of__initialization:
   677                           	opt stack 0
   678  00B104  0E00               	movlw	low (__Lmediumconst shr (0+16))
   679  00B106  6EF8               	movwf	tblptru,c
   680  00B108  0100               	movlb	0
   681  00B10A  EFC4  F05B         	goto	_main	;jump to C main() function
   682                           tblptru	equ	0xFF8
   683                           tblptrh	equ	0xFF7
   684                           tblptrl	equ	0xFF6
   685                           tablat	equ	0xFF5
   686                           postinc0	equ	0xFEE
   687                           wreg	equ	0xFE8
   688                           postdec1	equ	0xFE5
   689                           fsr1h	equ	0xFE2
   690                           fsr1l	equ	0xFE1
   691                           
   692                           	psect	bssCOMRAM
   693  00004B                     __pbssCOMRAM:
   694                           	opt stack 0
   695  00004B                     _appendFileLocation:
   696                           	opt stack 0
   697  00004B                     	ds	4
   698  00004F                     _appendFileSector:
   699                           	opt stack 0
   700  00004F                     	ds	4
   701  000053                     _appendStartCluster:
   702                           	opt stack 0
   703  000053                     	ds	4
   704  000057                     _fileSize:
   705                           	opt stack 0
   706  000057                     	ds	4
   707  00005B                     _firstDataSector:
   708                           	opt stack 0
   709  00005B                     	ds	4
   710  00005F                     _rootCluster:
   711                           	opt stack 0
   712  00005F                     	ds	4
   713  000063                     _startBlock:
   714                           	opt stack 0
   715  000063                     	ds	4
   716  000067                     _totalBlocks:
   717                           	opt stack 0
   718  000067                     	ds	4
   719  00006B                     _totalClusters:
   720                           	opt stack 0
   721  00006B                     	ds	4
   722  00006F                     _unusedSectors:
   723                           	opt stack 0
   724  00006F                     	ds	4
   725  000073                     _bytesPerSector:
   726                           	opt stack 0
   727  000073                     	ds	2
   728  000075                     _reservedSectorCount:
   729                           	opt stack 0
   730  000075                     	ds	2
   731  000077                     _SDHC_flag:
   732                           	opt stack 0
   733  000077                     	ds	1
   734  000078                     _cardType:
   735                           	opt stack 0
   736  000078                     	ds	1
   737  000079                     _freeClusterCountUpdated:
   738                           	opt stack 0
   739  000079                     	ds	1
   740  00007A                     _sectorPerCluster:
   741                           	opt stack 0
   742  00007A                     	ds	2
   743                           tblptru	equ	0xFF8
   744                           tblptrh	equ	0xFF7
   745                           tblptrl	equ	0xFF6
   746                           tablat	equ	0xFF5
   747                           postinc0	equ	0xFEE
   748                           wreg	equ	0xFE8
   749                           postdec1	equ	0xFE5
   750                           fsr1h	equ	0xFE2
   751                           fsr1l	equ	0xFE1
   752                           
   753                           	psect	dataBANK0
   754  000080                     __pdataBANK0:
   755                           	opt stack 0
   756  000080                     displayMemory@F3443:
   757                           	opt stack 0
   758  000080                     	ds	20
   759                           tblptru	equ	0xFF8
   760                           tblptrh	equ	0xFF7
   761                           tblptrl	equ	0xFF6
   762                           tablat	equ	0xFF5
   763                           postinc0	equ	0xFEE
   764                           wreg	equ	0xFE8
   765                           postdec1	equ	0xFE5
   766                           fsr1h	equ	0xFE2
   767                           fsr1l	equ	0xFE1
   768                           
   769                           	psect	bssBIGRAM
   770  000094                     __pbssBIGRAM:
   771                           	opt stack 0
   772  000094                     _buffer:
   773                           	opt stack 0
   774  000094                     	ds	512
   775                           tblptru	equ	0xFF8
   776                           tblptrh	equ	0xFF7
   777                           tblptrl	equ	0xFF6
   778                           tablat	equ	0xFF5
   779                           postinc0	equ	0xFEE
   780                           wreg	equ	0xFE8
   781                           postdec1	equ	0xFE5
   782                           fsr1h	equ	0xFE2
   783                           fsr1l	equ	0xFE1
   784                           
   785                           	psect	cstackCOMRAM
   786  000001                     __pcstackCOMRAM:
   787                           	opt stack 0
   788  000001                     ?___lmul:
   789                           	opt stack 0
   790  000001                     ?___lldiv:
   791                           	opt stack 0
   792  000001                     LCD_delay@x:
   793                           	opt stack 0
   794  000001                     SPI_delay@x:
   795                           	opt stack 0
   796  000001                     strcpy@to:
   797                           	opt stack 0
   798  000001                     delay@x:
   799                           	opt stack 0
   800  000001                     ___lmul@multiplier:
   801                           	opt stack 0
   802  000001                     ___lldiv@dividend:
   803                           	opt stack 0
   804                           
   805                           ; 4 bytes @ 0x0
   806  000001                     	ds	2
   807  000003                     LCD_func@cmd:
   808                           	opt stack 0
   809  000003                     SPI_Read_8Bits@i:
   810                           	opt stack 0
   811  000003                     SPI_Send_8Bits@data:
   812                           	opt stack 0
   813  000003                     strcpy@from:
   814                           	opt stack 0
   815                           
   816                           ; 2 bytes @ 0x2
   817  000003                     	ds	1
   818  000004                     ??_LCD_func:
   819  000004                     SPI_Read_8Bits@temp:
   820                           	opt stack 0
   821  000004                     SPI_Send_8Bits@temp:
   822                           	opt stack 0
   823                           
   824                           ; 1 bytes @ 0x3
   825  000004                     	ds	1
   826  000005                     SPI_Send_8Bits@i:
   827                           	opt stack 0
   828  000005                     strcpy@cp:
   829                           	opt stack 0
   830  000005                     ___lmul@multiplicand:
   831                           	opt stack 0
   832  000005                     ___lldiv@divisor:
   833                           	opt stack 0
   834                           
   835                           ; 4 bytes @ 0x4
   836  000005                     	ds	1
   837  000006                     _LCD_func$36:
   838                           	opt stack 0
   839  000006                     SD_sendCommand@arg:
   840                           	opt stack 0
   841                           
   842                           ; 4 bytes @ 0x5
   843  000006                     	ds	2
   844  000008                     LCD_func@data:
   845                           	opt stack 0
   846                           
   847                           ; 1 bytes @ 0x7
   848  000008                     	ds	1
   849  000009                     LCD_cur@col:
   850                           	opt stack 0
   851  000009                     LCD_string@ptr:
   852                           	opt stack 0
   853  000009                     ___lmul@product:
   854                           	opt stack 0
   855  000009                     ___lldiv@quotient:
   856                           	opt stack 0
   857                           
   858                           ; 4 bytes @ 0x8
   859  000009                     	ds	1
   860  00000A                     LCD_cur@row:
   861                           	opt stack 0
   862  00000A                     SD_sendCommand@retry:
   863                           	opt stack 0
   864                           
   865                           ; 1 bytes @ 0x9
   866  00000A                     	ds	1
   867  00000B                     SD_sendCommand@status:
   868                           	opt stack 0
   869                           
   870                           ; 1 bytes @ 0xA
   871  00000B                     	ds	1
   872  00000C                     SD_sendCommand@cmd:
   873                           	opt stack 0
   874                           
   875                           ; 1 bytes @ 0xB
   876  00000C                     	ds	1
   877  00000D                     SD_sendCommand@response:
   878                           	opt stack 0
   879  00000D                     ___lldiv@counter:
   880                           	opt stack 0
   881                           
   882                           ; 1 bytes @ 0xC
   883  00000D                     	ds	1
   884  00000E                     SD_init@SD_version:
   885                           	opt stack 0
   886  00000E                     SD_erase@startBlock:
   887                           	opt stack 0
   888  00000E                     SD_readSingleBlock@startBlock:
   889                           	opt stack 0
   890  00000E                     SD_writeSingleBlock@startBlock:
   891                           	opt stack 0
   892                           
   893                           ; 4 bytes @ 0xD
   894  00000E                     	ds	1
   895  00000F                     SD_init@i:
   896                           	opt stack 0
   897                           
   898                           ; 1 bytes @ 0xE
   899  00000F                     	ds	1
   900  000010                     SD_init@response:
   901                           	opt stack 0
   902                           
   903                           ; 1 bytes @ 0xF
   904  000010                     	ds	1
   905  000011                     SD_init@retry:
   906                           	opt stack 0
   907                           
   908                           ; 2 bytes @ 0x10
   909  000011                     	ds	1
   910  000012                     ??_SD_writeSingleBlock:
   911  000012                     SD_readSingleBlock@retry:
   912                           	opt stack 0
   913  000012                     SD_erase@totalBlocks:
   914                           	opt stack 0
   915                           
   916                           ; 4 bytes @ 0x11
   917  000012                     	ds	1
   918  000013                     SD_writeSingleBlock@retry:
   919                           	opt stack 0
   920                           
   921                           ; 2 bytes @ 0x12
   922  000013                     	ds	1
   923  000014                     SD_readSingleBlock@response:
   924                           	opt stack 0
   925                           
   926                           ; 1 bytes @ 0x13
   927  000014                     	ds	1
   928  000015                     SD_readSingleBlock@i:
   929                           	opt stack 0
   930  000015                     SD_writeSingleBlock@i:
   931                           	opt stack 0
   932                           
   933                           ; 2 bytes @ 0x14
   934  000015                     	ds	1
   935  000016                     ??_SD_erase:
   936                           
   937                           ; 0 bytes @ 0x15
   938  000016                     	ds	1
   939  000017                     SD_writeSingleBlock@response:
   940                           	opt stack 0
   941                           
   942                           ; 1 bytes @ 0x16
   943  000017                     	ds	1
   944  000018                     ?_getSetFreeCluster:
   945                           	opt stack 0
   946  000018                     getSetFreeCluster@get_set:
   947                           	opt stack 0
   948                           
   949                           ; 1 bytes @ 0x17
   950  000018                     	ds	1
   951  000019                     getSetFreeCluster@FSEntry:
   952                           	opt stack 0
   953                           
   954                           ; 4 bytes @ 0x18
   955  000019                     	ds	1
   956  00001A                     SD_erase@response:
   957                           	opt stack 0
   958                           
   959                           ; 1 bytes @ 0x19
   960  00001A                     	ds	3
   961  00001D                     ??_getSetFreeCluster:
   962                           
   963                           ; 0 bytes @ 0x1C
   964  00001D                     	ds	4
   965  000021                     getSetFreeCluster@error:
   966                           	opt stack 0
   967                           
   968                           ; 1 bytes @ 0x20
   969  000021                     	ds	1
   970  000022                     getSetFreeCluster@totOrNext:
   971                           	opt stack 0
   972                           
   973                           ; 1 bytes @ 0x21
   974  000022                     	ds	1
   975  000023                     getSetFreeCluster@FS:
   976                           	opt stack 0
   977                           
   978                           ; 2 bytes @ 0x22
   979  000023                     	ds	2
   980  000025                     ?_getBootSectorData:
   981                           	opt stack 0
   982                           
   983                           ; 2 bytes @ 0x24
   984  000025                     	ds	2
   985  000027                     ??_getBootSectorData:
   986                           
   987                           ; 0 bytes @ 0x26
   988  000027                     	ds	15
   989  000036                     getBootSectorData@dataSectors:
   990                           	opt stack 0
   991                           
   992                           ; 4 bytes @ 0x35
   993  000036                     	ds	4
   994  00003A                     getBootSectorData@mbr:
   995                           	opt stack 0
   996                           
   997                           ; 2 bytes @ 0x39
   998  00003A                     	ds	2
   999  00003C                     getBootSectorData@partition:
  1000                           	opt stack 0
  1001                           
  1002                           ; 2 bytes @ 0x3B
  1003  00003C                     	ds	2
  1004  00003E                     getBootSectorData@bpb:
  1005                           	opt stack 0
  1006                           
  1007                           ; 2 bytes @ 0x3D
  1008  00003E                     	ds	2
  1009  000040                     
  1010                           ; 2 bytes @ 0x3F
  1011  000040                     	ds	2
  1012  000042                     
  1013                           ; 3 bytes @ 0x41
  1014  000042                     	ds	3
  1015  000045                     main@FAT32_active:
  1016                           	opt stack 0
  1017                           
  1018                           ; 1 bytes @ 0x44
  1019  000045                     	ds	1
  1020  000046                     main@option:
  1021                           	opt stack 0
  1022                           
  1023                           ; 1 bytes @ 0x45
  1024  000046                     	ds	1
  1025  000047                     main@data:
  1026                           	opt stack 0
  1027                           
  1028                           ; 1 bytes @ 0x46
  1029  000047                     	ds	1
  1030  000048                     main@i:
  1031                           	opt stack 0
  1032                           
  1033                           ; 2 bytes @ 0x47
  1034  000048                     	ds	2
  1035  00004A                     main@error:
  1036                           	opt stack 0
  1037                           
  1038                           ; 1 bytes @ 0x49
  1039  00004A                     	ds	1
  1040                           tblptru	equ	0xFF8
  1041                           tblptrh	equ	0xFF7
  1042                           tblptrl	equ	0xFF6
  1043                           tablat	equ	0xFF5
  1044                           postinc0	equ	0xFEE
  1045                           wreg	equ	0xFE8
  1046                           postdec1	equ	0xFE5
  1047                           fsr1h	equ	0xFE2
  1048                           fsr1l	equ	0xFE1
  1049                           
  1050 ;;
  1051 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1052 ;;
  1053 ;; *************** function _main *****************
  1054 ;; Defined at:
  1055 ;;		line 37 in file "main.c"
  1056 ;; Parameters:    Size  Location     Type
  1057 ;;  argc            2   63[COMRAM] int 
  1058 ;;  argv            3   65[COMRAM] PTR PTR unsigned char 
  1059 ;; Auto vars:     Size  Location     Type
  1060 ;;  fileName       13    0        unsigned char [13]
  1061 ;;  i               2   71[COMRAM] unsigned int 
  1062 ;;  error           1   73[COMRAM] unsigned char 
  1063 ;;  data            1   70[COMRAM] unsigned char 
  1064 ;;  option          1   69[COMRAM] unsigned char 
  1065 ;;  FAT32_active    1   68[COMRAM] unsigned char 
  1066 ;; Return value:  Size  Location     Type
  1067 ;;                  2   63[COMRAM] int 
  1068 ;; Registers used:
  1069 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1070 ;; Tracked objects:
  1071 ;;		On entry : 0/0
  1072 ;;		On exit  : 0/0
  1073 ;;		Unchanged: 0/0
  1074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1075 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1076 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1077 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1078 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1079 ;;Total ram usage:       11 bytes
  1080 ;; Hardware stack levels required when called:    6
  1081 ;; This function calls:
  1082 ;;		_LCD_cur
  1083 ;;		_LCD_func
  1084 ;;		_LCD_init
  1085 ;;		_LCD_string
  1086 ;;		_SD_erase
  1087 ;;		_SD_init
  1088 ;;		_SD_readSingleBlock
  1089 ;;		_SD_writeSingleBlock
  1090 ;;		_delay
  1091 ;;		_getBootSectorData
  1092 ;;		_init
  1093 ;;		_strcpy
  1094 ;; This function is called by:
  1095 ;;		Startup code after reset
  1096 ;; This function uses a non-reentrant model
  1097 ;;
  1098                           
  1099                           	psect	text0
  1100  00B788                     __ptext0:
  1101                           	opt stack 0
  1102  00B788                     _main:
  1103                           	opt stack 25
  1104                           
  1105                           ;main.c: 39: unsigned char option, error, data, FAT32_active;
  1106                           ;main.c: 40: unsigned int i;
  1107                           ;main.c: 41: unsigned char fileName[13];
  1108                           ;main.c: 42: init();
  1109                           
  1110                           ;incstack = 0
  1111  00B788  ECBB  F057         	call	_init	;wreg free
  1112                           
  1113                           ;main.c: 43: LCD_init();
  1114  00B78C  EC1F  F058         	call	_LCD_init	;wreg free
  1115                           
  1116                           ;main.c: 45: delay(5000);
  1117  00B790  0E88               	movlw	136
  1118  00B792  6E01               	movwf	delay@x,c
  1119  00B794  0E13               	movlw	19
  1120  00B796  6E02               	movwf	delay@x+1,c
  1121  00B798  0E00               	movlw	0
  1122  00B79A  6E03               	movwf	delay@x+2,c
  1123  00B79C  0E00               	movlw	0
  1124  00B79E  6E04               	movwf	delay@x+3,c
  1125  00B7A0  ECF8  F057         	call	_delay	;wreg free
  1126                           
  1127                           ;main.c: 47: cardType = 0;
  1128  00B7A4  0E00               	movlw	0
  1129  00B7A6  6E78               	movwf	_cardType,c	;volatile
  1130                           
  1131                           ;main.c: 50: for (i=0; i<10; i++)
  1132  00B7A8  0E00               	movlw	0
  1133  00B7AA  6E49               	movwf	main@i+1,c
  1134  00B7AC  0E00               	movlw	0
  1135  00B7AE  6E48               	movwf	main@i,c
  1136  00B7B0  0E0A               	movlw	10
  1137  00B7B2  5C48               	subwf	main@i,w,c
  1138  00B7B4  0E00               	movlw	0
  1139  00B7B6  5849               	subwfb	main@i+1,w,c
  1140  00B7B8  B0D8               	btfsc	status,0,c
  1141  00B7BA  D009               	goto	l3007
  1142                           
  1143                           ;main.c: 51: {
  1144                           ;main.c: 52: error = SD_init();
  1145  00B7BC  EC1D  F05B         	call	_SD_init	;wreg free
  1146  00B7C0  6E4A               	movwf	main@error,c
  1147                           
  1148                           ;main.c: 53: if(!error) break;
  1149  00B7C2  664A               	tstfsz	main@error,c
  1150  00B7C4  D001               	goto	l3003
  1151  00B7C6  D003               	goto	l3007
  1152  00B7C8                     l3003:
  1153  00B7C8  4A48               	infsnz	main@i,f,c
  1154  00B7CA  2A49               	incf	main@i+1,f,c
  1155  00B7CC  D7F1               	goto	L1
  1156  00B7CE                     l3007:
  1157                           
  1158                           ;main.c: 54: }
  1159                           ;main.c: 56: if(error)
  1160  00B7CE  504A               	movf	main@error,w,c
  1161  00B7D0  B4D8               	btfsc	status,2,c
  1162  00B7D2  D030               	goto	l3027
  1163                           
  1164                           ;main.c: 57: {
  1165                           ;main.c: 58: if(error == 1) LCD_string("Crd not detected");
  1166  00B7D4  044A               	decf	main@error,w,c
  1167  00B7D6  A4D8               	btfss	status,2,c
  1168  00B7D8  D006               	goto	l3013
  1169  00B7DA  0EBF               	movlw	high STR_1
  1170  00B7DC  6E0A               	movwf	LCD_string@ptr+1,c
  1171  00B7DE  0E41               	movlw	low STR_1
  1172  00B7E0  6E09               	movwf	LCD_string@ptr,c
  1173  00B7E2  ECB2  F058         	call	_LCD_string	;wreg free
  1174  00B7E6                     l3013:
  1175                           
  1176                           ;main.c: 59: if(error == 2) LCD_string("Crd Init failed.");
  1177  00B7E6  504A               	movf	main@error,w,c
  1178  00B7E8  0A02               	xorlw	2
  1179  00B7EA  A4D8               	btfss	status,2,c
  1180  00B7EC  D006               	goto	l86
  1181  00B7EE  0EBF               	movlw	high STR_2
  1182  00B7F0  6E0A               	movwf	LCD_string@ptr+1,c
  1183  00B7F2  0E30               	movlw	low STR_2
  1184  00B7F4  6E09               	movwf	LCD_string@ptr,c
  1185  00B7F6  ECB2  F058         	call	_LCD_string	;wreg free
  1186  00B7FA                     l86:
  1187  00B7FA  D7FF               	goto	l86
  1188  00B7FC                     l3017:
  1189  00B7FC  0EBF               	movlw	high STR_3
  1190  00B7FE  6E0A               	movwf	LCD_string@ptr+1,c
  1191  00B800  0E82               	movlw	low STR_3
  1192  00B802  6E09               	movwf	LCD_string@ptr,c
  1193  00B804  ECB2  F058         	call	_LCD_string	;wreg free
  1194                           
  1195                           ;main.c: 68: break;
  1196  00B808  D020               	goto	l3029
  1197  00B80A                     l3019:
  1198  00B80A  0EBF               	movlw	high STR_4
  1199  00B80C  6E0A               	movwf	LCD_string@ptr+1,c
  1200  00B80E  0E62               	movlw	low STR_4
  1201  00B810  6E09               	movwf	LCD_string@ptr,c
  1202  00B812  ECB2  F058         	call	_LCD_string	;wreg free
  1203                           
  1204                           ;main.c: 70: break;
  1205  00B816  D019               	goto	l3029
  1206  00B818                     l3021:
  1207  00B818  0EBF               	movlw	high STR_5
  1208  00B81A  6E0A               	movwf	LCD_string@ptr+1,c
  1209  00B81C  0E92               	movlw	low STR_5
  1210  00B81E  6E09               	movwf	LCD_string@ptr,c
  1211  00B820  ECB2  F058         	call	_LCD_string	;wreg free
  1212                           
  1213                           ;main.c: 72: break;
  1214  00B824  D012               	goto	l3029
  1215  00B826                     l3023:
  1216  00B826  0EBF               	movlw	high STR_6
  1217  00B828  6E0A               	movwf	LCD_string@ptr+1,c
  1218  00B82A  0E72               	movlw	low STR_6
  1219  00B82C  6E09               	movwf	LCD_string@ptr,c
  1220  00B82E  ECB2  F058         	call	_LCD_string	;wreg free
  1221                           
  1222                           ;main.c: 74: break;
  1223  00B832  D00B               	goto	l3029
  1224  00B834                     l3027:
  1225  00B834  5078               	movf	_cardType,w,c	;volatile
  1226                           
  1227                           ; Switch size 1, requested type "space"
  1228                           ; Number of cases is 3, Range of values is 1 to 3
  1229                           ; switch strategies available:
  1230                           ; Name         Instructions Cycles
  1231                           ; simple_byte           10     6 (average)
  1232                           ;	Chosen strategy is simple_byte
  1233  00B836  0A01               	xorlw	1	; case 1
  1234  00B838  B4D8               	btfsc	status,2,c
  1235  00B83A  D7E0               	goto	l3017
  1236  00B83C  0A03               	xorlw	3	; case 2
  1237  00B83E  B4D8               	btfsc	status,2,c
  1238  00B840  D7E4               	goto	l3019
  1239  00B842  0A01               	xorlw	1	; case 3
  1240  00B844  B4D8               	btfsc	status,2,c
  1241  00B846  D7E8               	goto	l3021
  1242  00B848  D7EE               	goto	l3023
  1243  00B84A                     l3029:
  1244                           
  1245                           ;main.c: 79: LCD_cur(1,1);
  1246  00B84A  0E01               	movlw	1
  1247  00B84C  6E09               	movwf	LCD_cur@col,c
  1248  00B84E  0E01               	movlw	1
  1249  00B850  ECDE  F057         	call	_LCD_cur
  1250                           
  1251                           ;main.c: 80: LCD_func('A',1);
  1252  00B854  0E01               	movlw	1
  1253  00B856  6E03               	movwf	LCD_func@cmd,c
  1254  00B858  0E41               	movlw	65
  1255  00B85A  EC87  F058         	call	_LCD_func
  1256                           
  1257                           ;main.c: 81: FAT32_active = 1;
  1258  00B85E  0E01               	movlw	1
  1259  00B860  6E45               	movwf	main@FAT32_active,c
  1260                           
  1261                           ;main.c: 82: error = getBootSectorData ();
  1262  00B862  EC43  F05D         	call	_getBootSectorData	;wreg free
  1263  00B866  5025               	movf	?_getBootSectorData,w,c
  1264  00B868  6E4A               	movwf	main@error,c
  1265                           
  1266                           ;main.c: 83: if(error)
  1267  00B86A  504A               	movf	main@error,w,c
  1268  00B86C  B4D8               	btfsc	status,2,c
  1269  00B86E  D00E               	goto	l3043
  1270                           
  1271                           ;main.c: 84: {
  1272                           ;main.c: 85: LCD_func('Z',1);
  1273  00B870  0E01               	movlw	1
  1274  00B872  6E03               	movwf	LCD_func@cmd,c
  1275  00B874  0E5A               	movlw	90
  1276  00B876  EC87  F058         	call	_LCD_func
  1277                           
  1278                           ;main.c: 87: LCD_string("FAT32 not found!");
  1279  00B87A  0EBE               	movlw	high STR_7
  1280  00B87C  6E0A               	movwf	LCD_string@ptr+1,c
  1281  00B87E  0EFD               	movlw	low STR_7
  1282  00B880  6E09               	movwf	LCD_string@ptr,c
  1283  00B882  ECB2  F058         	call	_LCD_string	;wreg free
  1284                           
  1285                           ;main.c: 88: FAT32_active = 0;
  1286  00B886  0E00               	movlw	0
  1287  00B888  6E45               	movwf	main@FAT32_active,c
  1288  00B88A                     l96:
  1289  00B88A  D7FF               	goto	l96
  1290  00B88C                     l3043:
  1291                           
  1292                           ;main.c: 90: }
  1293                           ;main.c: 93: delay(50000);delay(50000);
  1294  00B88C  0E50               	movlw	80
  1295  00B88E  6E01               	movwf	delay@x,c
  1296  00B890  0EC3               	movlw	195
  1297  00B892  6E02               	movwf	delay@x+1,c
  1298  00B894  0E00               	movlw	0
  1299  00B896  6E03               	movwf	delay@x+2,c
  1300  00B898  0E00               	movlw	0
  1301  00B89A  6E04               	movwf	delay@x+3,c
  1302  00B89C  ECF8  F057         	call	_delay	;wreg free
  1303  00B8A0  0E50               	movlw	80
  1304  00B8A2  6E01               	movwf	delay@x,c
  1305  00B8A4  0EC3               	movlw	195
  1306  00B8A6  6E02               	movwf	delay@x+1,c
  1307  00B8A8  0E00               	movlw	0
  1308  00B8AA  6E03               	movwf	delay@x+2,c
  1309  00B8AC  0E00               	movlw	0
  1310  00B8AE  6E04               	movwf	delay@x+3,c
  1311  00B8B0  ECF8  F057         	call	_delay	;wreg free
  1312                           
  1313                           ;main.c: 94: delay(50000);delay(50000);
  1314  00B8B4  0E50               	movlw	80
  1315  00B8B6  6E01               	movwf	delay@x,c
  1316  00B8B8  0EC3               	movlw	195
  1317  00B8BA  6E02               	movwf	delay@x+1,c
  1318  00B8BC  0E00               	movlw	0
  1319  00B8BE  6E03               	movwf	delay@x+2,c
  1320  00B8C0  0E00               	movlw	0
  1321  00B8C2  6E04               	movwf	delay@x+3,c
  1322  00B8C4  ECF8  F057         	call	_delay	;wreg free
  1323  00B8C8  0E50               	movlw	80
  1324  00B8CA  6E01               	movwf	delay@x,c
  1325  00B8CC  0EC3               	movlw	195
  1326  00B8CE  6E02               	movwf	delay@x+1,c
  1327  00B8D0  0E00               	movlw	0
  1328  00B8D2  6E03               	movwf	delay@x+2,c
  1329  00B8D4  0E00               	movlw	0
  1330  00B8D6  6E04               	movwf	delay@x+3,c
  1331  00B8D8  ECF8  F057         	call	_delay	;wreg free
  1332                           
  1333                           ;main.c: 95: LCD_cur(1,1);
  1334  00B8DC  0E01               	movlw	1
  1335  00B8DE  6E09               	movwf	LCD_cur@col,c
  1336  00B8E0  0E01               	movlw	1
  1337  00B8E2  ECDE  F057         	call	_LCD_cur
  1338                           
  1339                           ;main.c: 96: startBlock = 0x00000000;
  1340  00B8E6  0E00               	movlw	0
  1341  00B8E8  6E63               	movwf	_startBlock,c	;volatile
  1342  00B8EA  0E00               	movlw	0
  1343  00B8EC  6E64               	movwf	_startBlock+1,c	;volatile
  1344  00B8EE  0E00               	movlw	0
  1345  00B8F0  6E65               	movwf	_startBlock+2,c	;volatile
  1346  00B8F2  0E00               	movlw	0
  1347  00B8F4  6E66               	movwf	_startBlock+3,c	;volatile
  1348                           
  1349                           ;main.c: 97: totalBlocks = 1;
  1350  00B8F6  0E01               	movlw	1
  1351  00B8F8  6E67               	movwf	_totalBlocks,c	;volatile
  1352  00B8FA  0E00               	movlw	0
  1353  00B8FC  6E68               	movwf	_totalBlocks+1,c	;volatile
  1354  00B8FE  0E00               	movlw	0
  1355  00B900  6E69               	movwf	_totalBlocks+2,c	;volatile
  1356  00B902  0E00               	movlw	0
  1357  00B904  6E6A               	movwf	_totalBlocks+3,c	;volatile
  1358                           
  1359                           ;main.c: 98: strcpy(buffer,"THIS IS JUST A TEST    ~");
  1360  00B906  0E00               	movlw	high _buffer
  1361  00B908  6E02               	movwf	strcpy@to+1,c
  1362  00B90A  0E94               	movlw	low _buffer
  1363  00B90C  6E01               	movwf	strcpy@to,c
  1364  00B90E  0EBE               	movlw	high STR_8
  1365  00B910  6E04               	movwf	strcpy@from+1,c
  1366  00B912  0E05               	movlw	low STR_8
  1367  00B914  6E03               	movwf	strcpy@from,c
  1368  00B916  EC07  F058         	call	_strcpy	;wreg free
  1369                           
  1370                           ;main.c: 112: {
  1371                           ;main.c: 113: error = SD_readSingleBlock (startBlock);
  1372                           
  1373                           ;main.c: 111: while(1)
  1374  00B91A  C063  F00E         	movff	_startBlock,SD_readSingleBlock@startBlock	;volatile
  1375  00B91E  C064  F00F         	movff	_startBlock+1,SD_readSingleBlock@startBlock+1	;volatile
  1376  00B922  C065  F010         	movff	_startBlock+2,SD_readSingleBlock@startBlock+2	;volatile
  1377  00B926  C066  F011         	movff	_startBlock+3,SD_readSingleBlock@startBlock+3	;volatile
  1378  00B92A  EC35  F059         	call	_SD_readSingleBlock	;wreg free
  1379  00B92E  6E4A               	movwf	main@error,c
  1380                           
  1381                           ;main.c: 115: if(error)
  1382  00B930  504A               	movf	main@error,w,c
  1383  00B932  B4D8               	btfsc	status,2,c
  1384  00B934  D007               	goto	l3057
  1385                           
  1386                           ;main.c: 116: LCD_string("Read failed..");
  1387  00B936  0EBF               	movlw	high STR_9
  1388  00B938  6E0A               	movwf	LCD_string@ptr+1,c
  1389  00B93A  0ECE               	movlw	low STR_9
  1390  00B93C  6E09               	movwf	LCD_string@ptr,c
  1391  00B93E  ECB2  F058         	call	_LCD_string	;wreg free
  1392  00B942  D006               	goto	l102
  1393  00B944                     l3057:
  1394                           
  1395                           ;main.c: 117: else
  1396                           ;main.c: 118: LCD_string("Read successful!");
  1397  00B944  0EBF               	movlw	high STR_10
  1398  00B946  6E0A               	movwf	LCD_string@ptr+1,c
  1399  00B948  0E0E               	movlw	low STR_10
  1400  00B94A  6E09               	movwf	LCD_string@ptr,c
  1401  00B94C  ECB2  F058         	call	_LCD_string	;wreg free
  1402  00B950                     l102:
  1403  00B950  D7FF               	goto	l102
  1404  00B952                     l3059:
  1405                           
  1406                           ;main.c: 181: error = SD_erase (startBlock, totalBlocks);
  1407  00B952  C063  F00E         	movff	_startBlock,SD_erase@startBlock	;volatile
  1408  00B956  C064  F00F         	movff	_startBlock+1,SD_erase@startBlock+1	;volatile
  1409  00B95A  C065  F010         	movff	_startBlock+2,SD_erase@startBlock+2	;volatile
  1410  00B95E  C066  F011         	movff	_startBlock+3,SD_erase@startBlock+3	;volatile
  1411  00B962  C067  F012         	movff	_totalBlocks,SD_erase@totalBlocks	;volatile
  1412  00B966  C068  F013         	movff	_totalBlocks+1,SD_erase@totalBlocks+1	;volatile
  1413  00B96A  C069  F014         	movff	_totalBlocks+2,SD_erase@totalBlocks+2	;volatile
  1414  00B96E  C06A  F015         	movff	_totalBlocks+3,SD_erase@totalBlocks+3	;volatile
  1415  00B972  ECAE  F059         	call	_SD_erase	;wreg free
  1416  00B976  6E4A               	movwf	main@error,c
  1417                           
  1418                           ;main.c: 183: if(error)
  1419  00B978  504A               	movf	main@error,w,c
  1420  00B97A  B4D8               	btfsc	status,2,c
  1421  00B97C  D007               	goto	l3065
  1422                           
  1423                           ;main.c: 184: LCD_string("Erase failed..");
  1424  00B97E  0EBF               	movlw	high STR_11
  1425  00B980  6E0A               	movwf	LCD_string@ptr+1,c
  1426  00B982  0EA2               	movlw	low STR_11
  1427  00B984  6E09               	movwf	LCD_string@ptr,c
  1428  00B986  ECB2  F058         	call	_LCD_string	;wreg free
  1429  00B98A  D072               	goto	l3107
  1430  00B98C                     l3065:
  1431                           
  1432                           ;main.c: 185: else
  1433                           ;main.c: 186: LCD_string("Erased!");
  1434  00B98C  0EBF               	movlw	high STR_12
  1435  00B98E  6E0A               	movwf	LCD_string@ptr+1,c
  1436  00B990  0EE6               	movlw	low STR_12
  1437  00B992  6E09               	movwf	LCD_string@ptr,c
  1438  00B994  ECB2  F058         	call	_LCD_string	;wreg free
  1439  00B998  D06B               	goto	l3107
  1440  00B99A                     l3067:
  1441                           
  1442                           ;main.c: 190: LCD_string(" Enter text (End with ~):");
  1443  00B99A  0EBD               	movlw	high STR_13
  1444  00B99C  6E0A               	movwf	LCD_string@ptr+1,c
  1445  00B99E  0EEB               	movlw	low STR_13
  1446  00B9A0  6E09               	movwf	LCD_string@ptr,c
  1447  00B9A2  ECB2  F058         	call	_LCD_string	;wreg free
  1448                           
  1449                           ;main.c: 191: i=0;
  1450  00B9A6  0E00               	movlw	0
  1451  00B9A8  6E49               	movwf	main@i+1,c
  1452  00B9AA  0E00               	movlw	0
  1453  00B9AC  6E48               	movwf	main@i,c
  1454  00B9AE                     l3071:
  1455                           
  1456                           ;main.c: 193: {
  1457                           ;main.c: 194: data = 1;
  1458  00B9AE  0E01               	movlw	1
  1459  00B9B0  6E47               	movwf	main@data,c
  1460                           
  1461                           ;main.c: 196: buffer[i++] = data;
  1462  00B9B2  0E94               	movlw	low _buffer
  1463  00B9B4  2448               	addwf	main@i,w,c
  1464  00B9B6  6ED9               	movwf	fsr2l,c
  1465  00B9B8  0E00               	movlw	high _buffer
  1466  00B9BA  2049               	addwfc	main@i+1,w,c
  1467  00B9BC  6EDA               	movwf	fsr2h,c
  1468  00B9BE  C047  FFDF         	movff	main@data,indf2
  1469  00B9C2  4A48               	infsnz	main@i,f,c
  1470  00B9C4  2A49               	incf	main@i+1,f,c
  1471                           
  1472                           ;main.c: 197: if(data == 0x0d)
  1473  00B9C6  5047               	movf	main@data,w,c
  1474  00B9C8  0A0D               	xorlw	13
  1475  00B9CA  A4D8               	btfss	status,2,c
  1476  00B9CC  D00A               	goto	l3083
  1477                           
  1478                           ;main.c: 198: {
  1479                           ;main.c: 200: buffer[i++] = 0x0a;
  1480  00B9CE  0E94               	movlw	low _buffer
  1481  00B9D0  2448               	addwf	main@i,w,c
  1482  00B9D2  6ED9               	movwf	fsr2l,c
  1483  00B9D4  0E00               	movlw	high _buffer
  1484  00B9D6  2049               	addwfc	main@i+1,w,c
  1485  00B9D8  6EDA               	movwf	fsr2h,c
  1486  00B9DA  0E0A               	movlw	10
  1487  00B9DC  6EDF               	movwf	indf2,c
  1488  00B9DE  4A48               	infsnz	main@i,f,c
  1489  00B9E0  2A49               	incf	main@i+1,f,c
  1490  00B9E2                     l3083:
  1491                           
  1492                           ;main.c: 201: }
  1493                           ;main.c: 202: if(i == 512) break;
  1494  00B9E2  5049               	movf	main@i+1,w,c
  1495  00B9E4  0A02               	xorlw	2
  1496  00B9E6  1048               	iorwf	main@i,w,c
  1497  00B9E8  B4D8               	btfsc	status,2,c
  1498  00B9EA  D004               	goto	l3089
  1499                           
  1500                           ;main.c: 203: }while (data != '~');
  1501  00B9EC  5047               	movf	main@data,w,c
  1502  00B9EE  0A7E               	xorlw	126
  1503  00B9F0  A4D8               	btfss	status,2,c
  1504  00B9F2  D7DD               	goto	l3071
  1505  00B9F4                     l3089:
  1506                           
  1507                           ;main.c: 205: error = SD_writeSingleBlock (startBlock);
  1508  00B9F4  C063  F00E         	movff	_startBlock,SD_writeSingleBlock@startBlock	;volatile
  1509  00B9F8  C064  F00F         	movff	_startBlock+1,SD_writeSingleBlock@startBlock+1	;volatile
  1510  00B9FC  C065  F010         	movff	_startBlock+2,SD_writeSingleBlock@startBlock+2	;volatile
  1511  00BA00  C066  F011         	movff	_startBlock+3,SD_writeSingleBlock@startBlock+3	;volatile
  1512  00BA04  EC30  F05A         	call	_SD_writeSingleBlock	;wreg free
  1513  00BA08  6E4A               	movwf	main@error,c
  1514                           
  1515                           ;main.c: 208: if(error)
  1516  00BA0A  504A               	movf	main@error,w,c
  1517  00BA0C  B4D8               	btfsc	status,2,c
  1518  00BA0E  D007               	goto	l3095
  1519                           
  1520                           ;main.c: 209: LCD_string("Write failed..");
  1521  00BA10  0EBF               	movlw	high STR_14
  1522  00BA12  6E0A               	movwf	LCD_string@ptr+1,c
  1523  00BA14  0EB1               	movlw	low STR_14
  1524  00BA16  6E09               	movwf	LCD_string@ptr,c
  1525  00BA18  ECB2  F058         	call	_LCD_string	;wreg free
  1526  00BA1C  D029               	goto	l3107
  1527  00BA1E                     l3095:
  1528                           
  1529                           ;main.c: 210: else
  1530                           ;main.c: 211: LCD_string("Write successful!");
  1531  00BA1E  0EBE               	movlw	high STR_15
  1532  00BA20  6E0A               	movwf	LCD_string@ptr+1,c
  1533  00BA22  0E30               	movlw	low STR_15
  1534  00BA24  6E09               	movwf	LCD_string@ptr,c
  1535  00BA26  ECB2  F058         	call	_LCD_string	;wreg free
  1536  00BA2A  D022               	goto	l3107
  1537  00BA2C                     l3097:
  1538  00BA2C  C063  F00E         	movff	_startBlock,SD_readSingleBlock@startBlock	;volatile
  1539  00BA30  C064  F00F         	movff	_startBlock+1,SD_readSingleBlock@startBlock+1	;volatile
  1540  00BA34  C065  F010         	movff	_startBlock+2,SD_readSingleBlock@startBlock+2	;volatile
  1541  00BA38  C066  F011         	movff	_startBlock+3,SD_readSingleBlock@startBlock+3	;volatile
  1542  00BA3C  EC35  F059         	call	_SD_readSingleBlock	;wreg free
  1543  00BA40  6E4A               	movwf	main@error,c
  1544                           
  1545                           ;main.c: 215: if(error)
  1546  00BA42  504A               	movf	main@error,w,c
  1547  00BA44  B4D8               	btfsc	status,2,c
  1548  00BA46  D007               	goto	l3103
  1549                           
  1550                           ;main.c: 216: LCD_string("Read failed..");
  1551  00BA48  0EBF               	movlw	high STR_9
  1552  00BA4A  6E0A               	movwf	LCD_string@ptr+1,c
  1553  00BA4C  0ECE               	movlw	low STR_9
  1554  00BA4E  6E09               	movwf	LCD_string@ptr,c
  1555  00BA50  ECB2  F058         	call	_LCD_string	;wreg free
  1556  00BA54  D006               	goto	l123
  1557  00BA56                     l3103:
  1558                           
  1559                           ;main.c: 217: else
  1560                           ;main.c: 218: {
  1561                           ;main.c: 223: LCD_string("Read successful!");
  1562  00BA56  0EBF               	movlw	high STR_10
  1563  00BA58  6E0A               	movwf	LCD_string@ptr+1,c
  1564  00BA5A  0E0E               	movlw	low STR_10
  1565  00BA5C  6E09               	movwf	LCD_string@ptr,c
  1566  00BA5E  ECB2  F058         	call	_LCD_string	;wreg free
  1567  00BA62                     l123:
  1568  00BA62  D7FF               	goto	l123
  1569  00BA64                     l3105:
  1570                           
  1571                           ;main.c: 229: LCD_string(" Invalid option!");
  1572  00BA64  0EBF               	movlw	high STR_18
  1573  00BA66  6E0A               	movwf	LCD_string@ptr+1,c
  1574  00BA68  0E1F               	movlw	low STR_18
  1575  00BA6A  6E09               	movwf	LCD_string@ptr,c
  1576  00BA6C  ECB2  F058         	call	_LCD_string	;wreg free
  1577  00BA70                     l3107:
  1578  00BA70  5046               	movf	main@option,w,c
  1579                           
  1580                           ; Switch size 1, requested type "space"
  1581                           ; Number of cases is 3, Range of values is 48 to 50
  1582                           ; switch strategies available:
  1583                           ; Name         Instructions Cycles
  1584                           ; simple_byte           10     6 (average)
  1585                           ;	Chosen strategy is simple_byte
  1586  00BA72  0A30               	xorlw	48	; case 48
  1587  00BA74  B4D8               	btfsc	status,2,c
  1588  00BA76  D76D               	goto	l3059
  1589  00BA78  0A01               	xorlw	1	; case 49
  1590  00BA7A  B4D8               	btfsc	status,2,c
  1591  00BA7C  D78E               	goto	l3067
  1592  00BA7E  0A03               	xorlw	3	; case 50
  1593  00BA80  B4D8               	btfsc	status,2,c
  1594  00BA82  D7D4               	goto	l3097
  1595  00BA84  D7EF               	goto	l3105
  1596  00BA86                     __end_of_main:
  1597                           	opt stack 0
  1598                           tblptru	equ	0xFF8
  1599                           tblptrh	equ	0xFF7
  1600                           tblptrl	equ	0xFF6
  1601                           tablat	equ	0xFF5
  1602                           postinc0	equ	0xFEE
  1603                           wreg	equ	0xFE8
  1604                           postdec1	equ	0xFE5
  1605                           fsr1h	equ	0xFE2
  1606                           fsr1l	equ	0xFE1
  1607                           indf2	equ	0xFDF
  1608                           fsr2h	equ	0xFDA
  1609                           fsr2l	equ	0xFD9
  1610                           status	equ	0xFD8
  1611                           
  1612 ;; *************** function _strcpy *****************
  1613 ;; Defined at:
  1614 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\strcpy.c"
  1615 ;; Parameters:    Size  Location     Type
  1616 ;;  to              2    0[COMRAM] PTR unsigned char 
  1617 ;;		 -> buffer(512), 
  1618 ;;  from            2    2[COMRAM] PTR const unsigned char 
  1619 ;;		 -> STR_8(25), 
  1620 ;; Auto vars:     Size  Location     Type
  1621 ;;  cp              2    4[COMRAM] PTR unsigned char 
  1622 ;;		 -> buffer(512), 
  1623 ;; Return value:  Size  Location     Type
  1624 ;;                  2    0[COMRAM] PTR unsigned char 
  1625 ;; Registers used:
  1626 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  1627 ;; Tracked objects:
  1628 ;;		On entry : 0/0
  1629 ;;		On exit  : 0/0
  1630 ;;		Unchanged: 0/0
  1631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1632 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1633 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1635 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1636 ;;Total ram usage:        6 bytes
  1637 ;; Hardware stack levels used:    1
  1638 ;; This function calls:
  1639 ;;		Nothing
  1640 ;; This function is called by:
  1641 ;;		_main
  1642 ;; This function uses a non-reentrant model
  1643 ;;
  1644                           
  1645                           	psect	text1
  1646  00B00E                     __ptext1:
  1647                           	opt stack 0
  1648  00B00E                     _strcpy:
  1649                           	opt stack 30
  1650                           
  1651                           ;incstack = 0
  1652  00B00E  C002  F006         	movff	strcpy@to+1,strcpy@cp+1
  1653  00B012  C001  F005         	movff	strcpy@to,strcpy@cp
  1654  00B016  D004               	goto	l1637
  1655  00B018                     l1635:
  1656  00B018  4A05               	infsnz	strcpy@cp,f,c
  1657  00B01A  2A06               	incf	strcpy@cp+1,f,c
  1658  00B01C  4A03               	infsnz	strcpy@from,f,c
  1659  00B01E  2A04               	incf	strcpy@from+1,f,c
  1660  00B020                     l1637:
  1661  00B020  C003  FFF6         	movff	strcpy@from,tblptrl
  1662  00B024  C004  FFF7         	movff	strcpy@from+1,tblptrh
  1663  00B028                     	if	0	;tblptru may be non-zero
  1664  00B028                     	endif
  1665  00B028                     	if	0	;tblptru may be non-zero
  1666  00B028                     	endif
  1667  00B028  C005  FFD9         	movff	strcpy@cp,fsr2l
  1668  00B02C  C006  FFDA         	movff	strcpy@cp+1,fsr2h
  1669  00B030  0008               	tblrd		*
  1670  00B032  CFF5 FFDF          	movff	tablat,indf2
  1671  00B036  50DF               	movf	indf2,w,c
  1672  00B038  B4D8               	btfsc	status,2,c
  1673                           
  1674                           ;	Return value of _strcpy is never used
  1675  00B03A  0012               	return	
  1676  00B03C  D7ED               	goto	l1635
  1677  00B03E                     __end_of_strcpy:
  1678                           	opt stack 0
  1679                           tblptru	equ	0xFF8
  1680                           tblptrh	equ	0xFF7
  1681                           tblptrl	equ	0xFF6
  1682                           tablat	equ	0xFF5
  1683                           postinc0	equ	0xFEE
  1684                           wreg	equ	0xFE8
  1685                           postdec1	equ	0xFE5
  1686                           fsr1h	equ	0xFE2
  1687                           fsr1l	equ	0xFE1
  1688                           indf2	equ	0xFDF
  1689                           fsr2h	equ	0xFDA
  1690                           fsr2l	equ	0xFD9
  1691                           status	equ	0xFD8
  1692                           
  1693 ;; *************** function _init *****************
  1694 ;; Defined at:
  1695 ;;		line 30 in file "main.c"
  1696 ;; Parameters:    Size  Location     Type
  1697 ;;		None
  1698 ;; Auto vars:     Size  Location     Type
  1699 ;;		None
  1700 ;; Return value:  Size  Location     Type
  1701 ;;		None               void
  1702 ;; Registers used:
  1703 ;;		wreg, status,2
  1704 ;; Tracked objects:
  1705 ;;		On entry : 0/0
  1706 ;;		On exit  : 0/0
  1707 ;;		Unchanged: 0/0
  1708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1710 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1712 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1713 ;;Total ram usage:        0 bytes
  1714 ;; Hardware stack levels used:    1
  1715 ;; This function calls:
  1716 ;;		Nothing
  1717 ;; This function is called by:
  1718 ;;		_main
  1719 ;; This function uses a non-reentrant model
  1720 ;;
  1721                           
  1722                           	psect	text2
  1723  00AF76                     __ptext2:
  1724                           	opt stack 0
  1725  00AF76                     _init:
  1726                           	opt stack 30
  1727                           
  1728                           ;main.c: 32: TRISC = 0x10;
  1729                           
  1730                           ;incstack = 0
  1731  00AF76  0E10               	movlw	16
  1732  00AF78  6E94               	movwf	3988,c	;volatile
  1733                           
  1734                           ;main.c: 33: TRISD = 0xC0;
  1735  00AF7A  0EC0               	movlw	192
  1736  00AF7C  6E95               	movwf	3989,c	;volatile
  1737                           
  1738                           ;main.c: 34: TRISB = 0x20;
  1739  00AF7E  0E20               	movlw	32
  1740  00AF80  6E93               	movwf	3987,c	;volatile
  1741  00AF82  0012               	return	
  1742  00AF84                     __end_of_init:
  1743                           	opt stack 0
  1744                           tblptru	equ	0xFF8
  1745                           tblptrh	equ	0xFF7
  1746                           tblptrl	equ	0xFF6
  1747                           tablat	equ	0xFF5
  1748                           postinc0	equ	0xFEE
  1749                           wreg	equ	0xFE8
  1750                           postdec1	equ	0xFE5
  1751                           fsr1h	equ	0xFE2
  1752                           fsr1l	equ	0xFE1
  1753                           indf2	equ	0xFDF
  1754                           fsr2h	equ	0xFDA
  1755                           fsr2l	equ	0xFD9
  1756                           status	equ	0xFD8
  1757                           
  1758 ;; *************** function _getBootSectorData *****************
  1759 ;; Defined at:
  1760 ;;		line 24 in file "FAT32.c"
  1761 ;; Parameters:    Size  Location     Type
  1762 ;;		None
  1763 ;; Auto vars:     Size  Location     Type
  1764 ;;  dataSectors     4   53[COMRAM] unsigned long 
  1765 ;;  bpb             2   61[COMRAM] PTR struct BS_Structure
  1766 ;;		 -> buffer(512), 
  1767 ;;  partition       2   59[COMRAM] PTR struct partitionInfo
  1768 ;;		 -> buffer.partitionData(64), buffer(512), 
  1769 ;;  mbr             2   57[COMRAM] PTR struct MBRinfo_Struc
  1770 ;;		 -> buffer(512), 
  1771 ;; Return value:  Size  Location     Type
  1772 ;;                  2   36[COMRAM] int 
  1773 ;; Registers used:
  1774 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1775 ;; Tracked objects:
  1776 ;;		On entry : 0/0
  1777 ;;		On exit  : 0/0
  1778 ;;		Unchanged: 0/0
  1779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1780 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1781 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1782 ;;      Temps:         15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1783 ;;      Totals:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1784 ;;Total ram usage:       27 bytes
  1785 ;; Hardware stack levels used:    1
  1786 ;; Hardware stack levels required when called:    5
  1787 ;; This function calls:
  1788 ;;		_LCD_func
  1789 ;;		_SD_readSingleBlock
  1790 ;;		___lldiv
  1791 ;;		___lmul
  1792 ;;		_getSetFreeCluster
  1793 ;; This function is called by:
  1794 ;;		_main
  1795 ;; This function uses a non-reentrant model
  1796 ;;
  1797                           
  1798                           	psect	text3
  1799  00BA86                     __ptext3:
  1800                           	opt stack 0
  1801  00BA86                     _getBootSectorData:
  1802                           	opt stack 25
  1803                           
  1804                           ;FAT32.c: 26: struct BS_Structure *bpb;
  1805                           ;FAT32.c: 27: struct MBRinfo_Structure *mbr;
  1806                           ;FAT32.c: 28: struct partitionInfo_Structure *partition;
  1807                           ;FAT32.c: 29: unsigned long dataSectors;
  1808                           ;FAT32.c: 31: unusedSectors = 0;
  1809                           
  1810                           ;incstack = 0
  1811  00BA86  0E00               	movlw	0
  1812  00BA88  6E6F               	movwf	_unusedSectors,c
  1813  00BA8A  0E00               	movlw	0
  1814  00BA8C  6E70               	movwf	_unusedSectors+1,c
  1815  00BA8E  0E00               	movlw	0
  1816  00BA90  6E71               	movwf	_unusedSectors+2,c
  1817  00BA92  0E00               	movlw	0
  1818  00BA94  6E72               	movwf	_unusedSectors+3,c
  1819                           
  1820                           ;FAT32.c: 33: SD_readSingleBlock(0);
  1821  00BA96  0E00               	movlw	0
  1822  00BA98  6E0E               	movwf	SD_readSingleBlock@startBlock,c
  1823  00BA9A  0E00               	movlw	0
  1824  00BA9C  6E0F               	movwf	SD_readSingleBlock@startBlock+1,c
  1825  00BA9E  0E00               	movlw	0
  1826  00BAA0  6E10               	movwf	SD_readSingleBlock@startBlock+2,c
  1827  00BAA2  0E00               	movlw	0
  1828  00BAA4  6E11               	movwf	SD_readSingleBlock@startBlock+3,c
  1829  00BAA6  EC35  F059         	call	_SD_readSingleBlock	;wreg free
  1830                           
  1831                           ;FAT32.c: 34: bpb = (struct BS_Structure *)buffer;
  1832  00BAAA  0E00               	movlw	high _buffer
  1833  00BAAC  6E3F               	movwf	getBootSectorData@bpb+1,c
  1834  00BAAE  0E94               	movlw	low _buffer
  1835  00BAB0  6E3E               	movwf	getBootSectorData@bpb,c
  1836                           
  1837                           ;FAT32.c: 35: LCD_func('B',1);
  1838  00BAB2  0E01               	movlw	1
  1839  00BAB4  6E03               	movwf	LCD_func@cmd,c
  1840  00BAB6  0E42               	movlw	66
  1841  00BAB8  EC87  F058         	call	_LCD_func
  1842                           
  1843                           ;FAT32.c: 36: if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB)
  1844  00BABC  C03E  FFD9         	movff	getBootSectorData@bpb,fsr2l
  1845  00BAC0  C03F  FFDA         	movff	getBootSectorData@bpb+1,fsr2h
  1846  00BAC4  50DF               	movf	indf2,w,c
  1847  00BAC6  0AE9               	xorlw	233
  1848  00BAC8  B4D8               	btfsc	status,2,c
  1849  00BACA  D06F               	goto	l2645
  1850  00BACC  C03E  FFD9         	movff	getBootSectorData@bpb,fsr2l
  1851  00BAD0  C03F  FFDA         	movff	getBootSectorData@bpb+1,fsr2h
  1852  00BAD4  50DF               	movf	indf2,w,c
  1853  00BAD6  0AEB               	xorlw	235
  1854  00BAD8  B4D8               	btfsc	status,2,c
  1855  00BADA  D067               	goto	l2645
  1856                           
  1857                           ;FAT32.c: 37: {
  1858                           ;FAT32.c: 38: mbr = (struct MBRinfo_Structure *) buffer;
  1859  00BADC  0E00               	movlw	high _buffer
  1860  00BADE  6E3B               	movwf	getBootSectorData@mbr+1,c
  1861  00BAE0  0E94               	movlw	low _buffer
  1862  00BAE2  6E3A               	movwf	getBootSectorData@mbr,c
  1863                           
  1864                           ;FAT32.c: 39: LCD_func('C',1);
  1865  00BAE4  0E01               	movlw	1
  1866  00BAE6  6E03               	movwf	LCD_func@cmd,c
  1867  00BAE8  0E43               	movlw	67
  1868  00BAEA  EC87  F058         	call	_LCD_func
  1869                           
  1870                           ;FAT32.c: 40: if(mbr->signature != 0xaa55) return 1;
  1871  00BAEE  EE21 F0FE          	lfsr	2,510
  1872  00BAF2  503A               	movf	getBootSectorData@mbr,w,c
  1873  00BAF4  26D9               	addwf	fsr2l,f,c
  1874  00BAF6  503B               	movf	getBootSectorData@mbr+1,w,c
  1875  00BAF8  22DA               	addwfc	fsr2h,f,c
  1876  00BAFA  2AD9               	incf	fsr2l,f,c
  1877  00BAFC  50DD               	movf	postdec2,w,c
  1878  00BAFE  0AAA               	xorlw	170
  1879  00BB00  0E55               	movlw	85
  1880  00BB02  B4D8               	btfsc	status,2,c
  1881  00BB04  18DF               	xorwf	indf2,w,c
  1882  00BB06  A4D8               	btfss	status,2,c
  1883  00BB08  D047               	goto	u2150
  1884                           
  1885                           ;FAT32.c: 41: LCD_func('D',1);
  1886  00BB0A  0E01               	movlw	1
  1887  00BB0C  6E03               	movwf	LCD_func@cmd,c
  1888  00BB0E  0E44               	movlw	68
  1889  00BB10  EC87  F058         	call	_LCD_func
  1890                           
  1891                           ;FAT32.c: 42: partition = (struct partitionInfo_Structure *)(mbr->partitionData);
  1892  00BB14  0EBE               	movlw	190
  1893  00BB16  243A               	addwf	getBootSectorData@mbr,w,c
  1894  00BB18  6E3C               	movwf	getBootSectorData@partition,c
  1895  00BB1A  0E01               	movlw	1
  1896  00BB1C  203B               	addwfc	getBootSectorData@mbr+1,w,c
  1897  00BB1E  6E3D               	movwf	getBootSectorData@partition+1,c
  1898                           
  1899                           ;FAT32.c: 43: unusedSectors = partition->firstSector;
  1900  00BB20  EE20 F008          	lfsr	2,8
  1901  00BB24  503C               	movf	getBootSectorData@partition,w,c
  1902  00BB26  26D9               	addwf	fsr2l,f,c
  1903  00BB28  503D               	movf	getBootSectorData@partition+1,w,c
  1904  00BB2A  22DA               	addwfc	fsr2h,f,c
  1905  00BB2C  CFDE F06F          	movff	postinc2,_unusedSectors
  1906  00BB30  CFDE F070          	movff	postinc2,_unusedSectors+1
  1907  00BB34  CFDE F071          	movff	postinc2,_unusedSectors+2
  1908  00BB38  CFDE F072          	movff	postinc2,_unusedSectors+3
  1909                           
  1910                           ;FAT32.c: 44: LCD_func('E',1);
  1911  00BB3C  0E01               	movlw	1
  1912  00BB3E  6E03               	movwf	LCD_func@cmd,c
  1913  00BB40  0E45               	movlw	69
  1914  00BB42  EC87  F058         	call	_LCD_func
  1915                           
  1916                           ;FAT32.c: 45: SD_readSingleBlock(partition->firstSector);
  1917  00BB46  EE20 F008          	lfsr	2,8
  1918  00BB4A  503C               	movf	getBootSectorData@partition,w,c
  1919  00BB4C  26D9               	addwf	fsr2l,f,c
  1920  00BB4E  503D               	movf	getBootSectorData@partition+1,w,c
  1921  00BB50  22DA               	addwfc	fsr2h,f,c
  1922  00BB52  CFDE F00E          	movff	postinc2,SD_readSingleBlock@startBlock
  1923  00BB56  CFDE F00F          	movff	postinc2,SD_readSingleBlock@startBlock+1
  1924  00BB5A  CFDE F010          	movff	postinc2,SD_readSingleBlock@startBlock+2
  1925  00BB5E  CFDE F011          	movff	postinc2,SD_readSingleBlock@startBlock+3
  1926  00BB62  EC35  F059         	call	_SD_readSingleBlock	;wreg free
  1927                           
  1928                           ;FAT32.c: 46: bpb = (struct BS_Structure *)buffer;
  1929  00BB66  0E00               	movlw	high _buffer
  1930  00BB68  6E3F               	movwf	getBootSectorData@bpb+1,c
  1931  00BB6A  0E94               	movlw	low _buffer
  1932  00BB6C  6E3E               	movwf	getBootSectorData@bpb,c
  1933                           
  1934                           ;FAT32.c: 47: LCD_func('F',1);
  1935  00BB6E  0E01               	movlw	1
  1936  00BB70  6E03               	movwf	LCD_func@cmd,c
  1937  00BB72  0E46               	movlw	70
  1938  00BB74  EC87  F058         	call	_LCD_func
  1939                           
  1940                           ;FAT32.c: 48: if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB) return 1;
  1941  00BB78  C03E  FFD9         	movff	getBootSectorData@bpb,fsr2l
  1942  00BB7C  C03F  FFDA         	movff	getBootSectorData@bpb+1,fsr2h
  1943  00BB80  50DF               	movf	indf2,w,c
  1944  00BB82  0AE9               	xorlw	233
  1945  00BB84  B4D8               	btfsc	status,2,c
  1946  00BB86  D00C               	goto	l2643
  1947  00BB88  C03E  FFD9         	movff	getBootSectorData@bpb,fsr2l
  1948  00BB8C  C03F  FFDA         	movff	getBootSectorData@bpb+1,fsr2h
  1949  00BB90  50DF               	movf	indf2,w,c
  1950  00BB92  0AEB               	xorlw	235
  1951  00BB94  B4D8               	btfsc	status,2,c
  1952  00BB96  D004               	goto	l2643
  1953  00BB98                     u2150:
  1954  00BB98  0E00               	movlw	0
  1955  00BB9A  6E26               	movwf	?_getBootSectorData+1,c
  1956  00BB9C  0E01               	movlw	1
  1957  00BB9E  D123               	goto	L2
  1958  00BBA0                     l2643:
  1959                           
  1960                           ;FAT32.c: 49: LCD_func('G',1);
  1961  00BBA0  0E01               	movlw	1
  1962  00BBA2  6E03               	movwf	LCD_func@cmd,c
  1963  00BBA4  0E47               	movlw	71
  1964  00BBA6  EC87  F058         	call	_LCD_func
  1965  00BBAA                     l2645:
  1966                           
  1967                           ;FAT32.c: 50: }
  1968                           ;FAT32.c: 52: bytesPerSector = bpb->bytesPerSector;
  1969  00BBAA  EE20 F00B          	lfsr	2,11
  1970  00BBAE  503E               	movf	getBootSectorData@bpb,w,c
  1971  00BBB0  26D9               	addwf	fsr2l,f,c
  1972  00BBB2  503F               	movf	getBootSectorData@bpb+1,w,c
  1973  00BBB4  22DA               	addwfc	fsr2h,f,c
  1974  00BBB6  CFDE F073          	movff	postinc2,_bytesPerSector	;volatile
  1975  00BBBA  CFDD F074          	movff	postdec2,_bytesPerSector+1	;volatile
  1976                           
  1977                           ;FAT32.c: 54: sectorPerCluster = bpb->sectorPerCluster;
  1978  00BBBE  EE20 F00D          	lfsr	2,13
  1979  00BBC2  503E               	movf	getBootSectorData@bpb,w,c
  1980  00BBC4  26D9               	addwf	fsr2l,f,c
  1981  00BBC6  503F               	movf	getBootSectorData@bpb+1,w,c
  1982  00BBC8  22DA               	addwfc	fsr2h,f,c
  1983  00BBCA  50DF               	movf	indf2,w,c
  1984  00BBCC  6E27               	movwf	??_getBootSectorData& (0+255),c
  1985  00BBCE  5027               	movf	??_getBootSectorData,w,c
  1986  00BBD0  6E7A               	movwf	_sectorPerCluster,c	;volatile
  1987  00BBD2  6A7B               	clrf	_sectorPerCluster+1,c	;volatile
  1988                           
  1989                           ;FAT32.c: 56: reservedSectorCount = bpb->reservedSectorCount;
  1990  00BBD4  EE20 F00E          	lfsr	2,14
  1991  00BBD8  503E               	movf	getBootSectorData@bpb,w,c
  1992  00BBDA  26D9               	addwf	fsr2l,f,c
  1993  00BBDC  503F               	movf	getBootSectorData@bpb+1,w,c
  1994  00BBDE  22DA               	addwfc	fsr2h,f,c
  1995  00BBE0  CFDE F075          	movff	postinc2,_reservedSectorCount	;volatile
  1996  00BBE4  CFDD F076          	movff	postdec2,_reservedSectorCount+1	;volatile
  1997                           
  1998                           ;FAT32.c: 57: rootCluster = bpb->rootCluster;
  1999  00BBE8  EE20 F02C          	lfsr	2,44
  2000  00BBEC  503E               	movf	getBootSectorData@bpb,w,c
  2001  00BBEE  26D9               	addwf	fsr2l,f,c
  2002  00BBF0  503F               	movf	getBootSectorData@bpb+1,w,c
  2003  00BBF2  22DA               	addwfc	fsr2h,f,c
  2004  00BBF4  CFDE F05F          	movff	postinc2,_rootCluster	;volatile
  2005  00BBF8  CFDE F060          	movff	postinc2,_rootCluster+1	;volatile
  2006  00BBFC  CFDE F061          	movff	postinc2,_rootCluster+2	;volatile
  2007  00BC00  CFDE F062          	movff	postinc2,_rootCluster+3	;volatile
  2008                           
  2009                           ;FAT32.c: 58: firstDataSector = bpb->hiddenSectors + reservedSectorCount + (bpb->numbero
      +                          fFATs * bpb->FATsize_F32);
  2010  00BC04  EE20 F01C          	lfsr	2,28
  2011  00BC08  503E               	movf	getBootSectorData@bpb,w,c
  2012  00BC0A  26D9               	addwf	fsr2l,f,c
  2013  00BC0C  503F               	movf	getBootSectorData@bpb+1,w,c
  2014  00BC0E  22DA               	addwfc	fsr2h,f,c
  2015  00BC10  CFDE F027          	movff	postinc2,??_getBootSectorData
  2016  00BC14  CFDE F028          	movff	postinc2,??_getBootSectorData+1
  2017  00BC18  CFDE F029          	movff	postinc2,??_getBootSectorData+2
  2018  00BC1C  CFDE F02A          	movff	postinc2,??_getBootSectorData+3
  2019  00BC20  EE20 F010          	lfsr	2,16
  2020  00BC24  503E               	movf	getBootSectorData@bpb,w,c
  2021  00BC26  26D9               	addwf	fsr2l,f,c
  2022  00BC28  503F               	movf	getBootSectorData@bpb+1,w,c
  2023  00BC2A  22DA               	addwfc	fsr2h,f,c
  2024  00BC2C  50DF               	movf	indf2,w,c
  2025  00BC2E  6E2B               	movwf	(??_getBootSectorData+4)& (0+255),c
  2026  00BC30  502B               	movf	??_getBootSectorData+4,w,c
  2027  00BC32  6E01               	movwf	___lmul@multiplier,c
  2028  00BC34  6A02               	clrf	___lmul@multiplier+1,c
  2029  00BC36  6A03               	clrf	___lmul@multiplier+2,c
  2030  00BC38  6A04               	clrf	___lmul@multiplier+3,c
  2031  00BC3A  EE20 F024          	lfsr	2,36
  2032  00BC3E  503E               	movf	getBootSectorData@bpb,w,c
  2033  00BC40  26D9               	addwf	fsr2l,f,c
  2034  00BC42  503F               	movf	getBootSectorData@bpb+1,w,c
  2035  00BC44  22DA               	addwfc	fsr2h,f,c
  2036  00BC46  CFDE F005          	movff	postinc2,___lmul@multiplicand
  2037  00BC4A  CFDE F006          	movff	postinc2,___lmul@multiplicand+1
  2038  00BC4E  CFDE F007          	movff	postinc2,___lmul@multiplicand+2
  2039  00BC52  CFDE F008          	movff	postinc2,___lmul@multiplicand+3
  2040  00BC56  ECDD  F058         	call	___lmul	;wreg free
  2041  00BC5A  C001  F02C         	movff	?___lmul,??_getBootSectorData+5
  2042  00BC5E  C002  F02D         	movff	?___lmul+1,??_getBootSectorData+6
  2043  00BC62  C003  F02E         	movff	?___lmul+2,??_getBootSectorData+7
  2044  00BC66  C004  F02F         	movff	?___lmul+3,??_getBootSectorData+8
  2045  00BC6A  5075               	movf	_reservedSectorCount,w,c	;volatile
  2046  00BC6C  242C               	addwf	??_getBootSectorData+5,w,c
  2047  00BC6E  6E30               	movwf	(??_getBootSectorData+9)& (0+255),c
  2048  00BC70  5076               	movf	_reservedSectorCount+1,w,c	;volatile
  2049  00BC72  202D               	addwfc	??_getBootSectorData+6,w,c
  2050  00BC74  6E31               	movwf	(??_getBootSectorData+10)& (0+255),c
  2051  00BC76  0E00               	movlw	0
  2052  00BC78  202E               	addwfc	??_getBootSectorData+7,w,c
  2053  00BC7A  6E32               	movwf	(??_getBootSectorData+11)& (0+255),c
  2054  00BC7C  0E00               	movlw	0
  2055  00BC7E  202F               	addwfc	??_getBootSectorData+8,w,c
  2056  00BC80  6E33               	movwf	(??_getBootSectorData+12)& (0+255),c
  2057  00BC82  5027               	movf	??_getBootSectorData,w,c
  2058  00BC84  2430               	addwf	??_getBootSectorData+9,w,c
  2059  00BC86  6E5B               	movwf	_firstDataSector,c	;volatile
  2060  00BC88  5028               	movf	??_getBootSectorData+1,w,c
  2061  00BC8A  2031               	addwfc	??_getBootSectorData+10,w,c
  2062  00BC8C  6E5C               	movwf	_firstDataSector+1,c	;volatile
  2063  00BC8E  5029               	movf	??_getBootSectorData+2,w,c
  2064  00BC90  2032               	addwfc	??_getBootSectorData+11,w,c
  2065  00BC92  6E5D               	movwf	_firstDataSector+2,c	;volatile
  2066  00BC94  502A               	movf	??_getBootSectorData+3,w,c
  2067  00BC96  2033               	addwfc	??_getBootSectorData+12,w,c
  2068  00BC98  6E5E               	movwf	_firstDataSector+3,c	;volatile
  2069                           
  2070                           ;FAT32.c: 60: dataSectors = bpb->totalSectors_F32
  2071                           ;FAT32.c: 61: - bpb->reservedSectorCount
  2072                           ;FAT32.c: 62: - ( bpb->numberofFATs * bpb->FATsize_F32);
  2073  00BC9A  EE20 F020          	lfsr	2,32
  2074  00BC9E  503E               	movf	getBootSectorData@bpb,w,c
  2075  00BCA0  26D9               	addwf	fsr2l,f,c
  2076  00BCA2  503F               	movf	getBootSectorData@bpb+1,w,c
  2077  00BCA4  22DA               	addwfc	fsr2h,f,c
  2078  00BCA6  CFDE F027          	movff	postinc2,??_getBootSectorData
  2079  00BCAA  CFDE F028          	movff	postinc2,??_getBootSectorData+1
  2080  00BCAE  CFDE F029          	movff	postinc2,??_getBootSectorData+2
  2081  00BCB2  CFDE F02A          	movff	postinc2,??_getBootSectorData+3
  2082  00BCB6  EE20 F010          	lfsr	2,16
  2083  00BCBA  503E               	movf	getBootSectorData@bpb,w,c
  2084  00BCBC  26D9               	addwf	fsr2l,f,c
  2085  00BCBE  503F               	movf	getBootSectorData@bpb+1,w,c
  2086  00BCC0  22DA               	addwfc	fsr2h,f,c
  2087  00BCC2  50DF               	movf	indf2,w,c
  2088  00BCC4  6E2B               	movwf	(??_getBootSectorData+4)& (0+255),c
  2089  00BCC6  502B               	movf	??_getBootSectorData+4,w,c
  2090  00BCC8  6E01               	movwf	___lmul@multiplier,c
  2091  00BCCA  6A02               	clrf	___lmul@multiplier+1,c
  2092  00BCCC  6A03               	clrf	___lmul@multiplier+2,c
  2093  00BCCE  6A04               	clrf	___lmul@multiplier+3,c
  2094  00BCD0  EE20 F024          	lfsr	2,36
  2095  00BCD4  503E               	movf	getBootSectorData@bpb,w,c
  2096  00BCD6  26D9               	addwf	fsr2l,f,c
  2097  00BCD8  503F               	movf	getBootSectorData@bpb+1,w,c
  2098  00BCDA  22DA               	addwfc	fsr2h,f,c
  2099  00BCDC  CFDE F005          	movff	postinc2,___lmul@multiplicand
  2100  00BCE0  CFDE F006          	movff	postinc2,___lmul@multiplicand+1
  2101  00BCE4  CFDE F007          	movff	postinc2,___lmul@multiplicand+2
  2102  00BCE8  CFDE F008          	movff	postinc2,___lmul@multiplicand+3
  2103  00BCEC  ECDD  F058         	call	___lmul	;wreg free
  2104  00BCF0  C001  F02C         	movff	?___lmul,??_getBootSectorData+5
  2105  00BCF4  C002  F02D         	movff	?___lmul+1,??_getBootSectorData+6
  2106  00BCF8  C003  F02E         	movff	?___lmul+2,??_getBootSectorData+7
  2107  00BCFC  C004  F02F         	movff	?___lmul+3,??_getBootSectorData+8
  2108  00BD00  EE20 F00E          	lfsr	2,14
  2109  00BD04  503E               	movf	getBootSectorData@bpb,w,c
  2110  00BD06  26D9               	addwf	fsr2l,f,c
  2111  00BD08  503F               	movf	getBootSectorData@bpb+1,w,c
  2112  00BD0A  22DA               	addwfc	fsr2h,f,c
  2113  00BD0C  CFDE F030          	movff	postinc2,??_getBootSectorData+9
  2114  00BD10  CFDD F031          	movff	postdec2,??_getBootSectorData+10
  2115  00BD14  5030               	movf	??_getBootSectorData+9,w,c
  2116  00BD16  242C               	addwf	??_getBootSectorData+5,w,c
  2117  00BD18  6E32               	movwf	(??_getBootSectorData+11)& (0+255),c
  2118  00BD1A  5031               	movf	??_getBootSectorData+10,w,c
  2119  00BD1C  202D               	addwfc	??_getBootSectorData+6,w,c
  2120  00BD1E  6E33               	movwf	(??_getBootSectorData+12)& (0+255),c
  2121  00BD20  0E00               	movlw	0
  2122  00BD22  202E               	addwfc	??_getBootSectorData+7,w,c
  2123  00BD24  6E34               	movwf	(??_getBootSectorData+13)& (0+255),c
  2124  00BD26  0E00               	movlw	0
  2125  00BD28  202F               	addwfc	??_getBootSectorData+8,w,c
  2126  00BD2A  6E35               	movwf	(??_getBootSectorData+14)& (0+255),c
  2127  00BD2C  1E32               	comf	??_getBootSectorData+11,f,c
  2128  00BD2E  1E33               	comf	??_getBootSectorData+12,f,c
  2129  00BD30  1E34               	comf	??_getBootSectorData+13,f,c
  2130  00BD32  1E35               	comf	??_getBootSectorData+14,f,c
  2131  00BD34  2A32               	incf	??_getBootSectorData+11,f,c
  2132  00BD36  0E00               	movlw	0
  2133  00BD38  2233               	addwfc	??_getBootSectorData+12,f,c
  2134  00BD3A  2234               	addwfc	??_getBootSectorData+13,f,c
  2135  00BD3C  2235               	addwfc	??_getBootSectorData+14,f,c
  2136  00BD3E  5027               	movf	??_getBootSectorData,w,c
  2137  00BD40  2432               	addwf	??_getBootSectorData+11,w,c
  2138  00BD42  6E36               	movwf	getBootSectorData@dataSectors,c
  2139  00BD44  5028               	movf	??_getBootSectorData+1,w,c
  2140  00BD46  2033               	addwfc	??_getBootSectorData+12,w,c
  2141  00BD48  6E37               	movwf	getBootSectorData@dataSectors+1,c
  2142  00BD4A  5029               	movf	??_getBootSectorData+2,w,c
  2143  00BD4C  2034               	addwfc	??_getBootSectorData+13,w,c
  2144  00BD4E  6E38               	movwf	getBootSectorData@dataSectors+2,c
  2145  00BD50  502A               	movf	??_getBootSectorData+3,w,c
  2146  00BD52  2035               	addwfc	??_getBootSectorData+14,w,c
  2147  00BD54  6E39               	movwf	getBootSectorData@dataSectors+3,c
  2148                           
  2149                           ;FAT32.c: 63: totalClusters = dataSectors / sectorPerCluster;
  2150  00BD56  C036  F001         	movff	getBootSectorData@dataSectors,___lldiv@dividend
  2151  00BD5A  C037  F002         	movff	getBootSectorData@dataSectors+1,___lldiv@dividend+1
  2152  00BD5E  C038  F003         	movff	getBootSectorData@dataSectors+2,___lldiv@dividend+2
  2153  00BD62  C039  F004         	movff	getBootSectorData@dataSectors+3,___lldiv@dividend+3
  2154  00BD66  C07A  F005         	movff	_sectorPerCluster,___lldiv@divisor	;volatile
  2155  00BD6A  C07B  F006         	movff	_sectorPerCluster+1,___lldiv@divisor+1	;volatile
  2156  00BD6E  6A07               	clrf	___lldiv@divisor+2,c
  2157  00BD70  6A08               	clrf	___lldiv@divisor+3,c
  2158  00BD72  ECEF  F059         	call	___lldiv	;wreg free
  2159  00BD76  C001  F06B         	movff	?___lldiv,_totalClusters	;volatile
  2160  00BD7A  C002  F06C         	movff	?___lldiv+1,_totalClusters+1	;volatile
  2161  00BD7E  C003  F06D         	movff	?___lldiv+2,_totalClusters+2	;volatile
  2162  00BD82  C004  F06E         	movff	?___lldiv+3,_totalClusters+3	;volatile
  2163                           
  2164                           ;FAT32.c: 65: LCD_func('H',1);
  2165  00BD86  0E01               	movlw	1
  2166  00BD88  6E03               	movwf	LCD_func@cmd,c
  2167  00BD8A  0E48               	movlw	72
  2168  00BD8C  EC87  F058         	call	_LCD_func
  2169                           
  2170                           ;FAT32.c: 66: if((getSetFreeCluster (1, 0, 0)) > totalClusters)
  2171  00BD90  0E00               	movlw	0
  2172  00BD92  6E18               	movwf	getSetFreeCluster@get_set,c
  2173  00BD94  0E00               	movlw	0
  2174  00BD96  6E19               	movwf	getSetFreeCluster@FSEntry,c
  2175  00BD98  0E00               	movlw	0
  2176  00BD9A  6E1A               	movwf	getSetFreeCluster@FSEntry+1,c
  2177  00BD9C  0E00               	movlw	0
  2178  00BD9E  6E1B               	movwf	getSetFreeCluster@FSEntry+2,c
  2179  00BDA0  0E00               	movlw	0
  2180  00BDA2  6E1C               	movwf	getSetFreeCluster@FSEntry+3,c
  2181  00BDA4  0E01               	movlw	1
  2182  00BDA6  EC80  F05A         	call	_getSetFreeCluster
  2183  00BDAA  C018  F027         	movff	?_getSetFreeCluster,??_getBootSectorData
  2184  00BDAE  C019  F028         	movff	?_getSetFreeCluster+1,??_getBootSectorData+1
  2185  00BDB2  C01A  F029         	movff	?_getSetFreeCluster+2,??_getBootSectorData+2
  2186  00BDB6  C01B  F02A         	movff	?_getSetFreeCluster+3,??_getBootSectorData+3
  2187  00BDBA  5027               	movf	??_getBootSectorData,w,c
  2188  00BDBC  5C6B               	subwf	_totalClusters,w,c	;volatile
  2189  00BDBE  5028               	movf	??_getBootSectorData+1,w,c
  2190  00BDC0  586C               	subwfb	_totalClusters+1,w,c	;volatile
  2191  00BDC2  5029               	movf	??_getBootSectorData+2,w,c
  2192  00BDC4  586D               	subwfb	_totalClusters+2,w,c	;volatile
  2193  00BDC6  502A               	movf	??_getBootSectorData+3,w,c
  2194  00BDC8  586E               	subwfb	_totalClusters+3,w,c	;volatile
  2195  00BDCA  B0D8               	btfsc	status,0,c
  2196  00BDCC  D002               	goto	l2661
  2197                           
  2198                           ;FAT32.c: 67: freeClusterCountUpdated = 0;
  2199  00BDCE  0E00               	movlw	0
  2200  00BDD0  D001               	goto	L3
  2201  00BDD2                     l2661:
  2202                           
  2203                           ;FAT32.c: 68: else
  2204                           ;FAT32.c: 69: freeClusterCountUpdated = 1;
  2205  00BDD2  0E01               	movlw	1
  2206  00BDD4                     L3:
  2207  00BDD4  6E79               	movwf	_freeClusterCountUpdated,c
  2208                           
  2209                           ;FAT32.c: 70: LCD_func('I',1);
  2210  00BDD6  0E01               	movlw	1
  2211  00BDD8  6E03               	movwf	LCD_func@cmd,c
  2212  00BDDA  0E49               	movlw	73
  2213  00BDDC  EC87  F058         	call	_LCD_func
  2214                           
  2215                           ;FAT32.c: 71: return 0;
  2216  00BDE0  0E00               	movlw	0
  2217  00BDE2  6E26               	movwf	?_getBootSectorData+1,c
  2218  00BDE4  0E00               	movlw	0
  2219  00BDE6                     L2:
  2220  00BDE6  6E25               	movwf	?_getBootSectorData,c
  2221  00BDE8  0012               	return	
  2222  00BDEA                     __end_of_getBootSectorData:
  2223                           	opt stack 0
  2224                           tblptru	equ	0xFF8
  2225                           tblptrh	equ	0xFF7
  2226                           tblptrl	equ	0xFF6
  2227                           tablat	equ	0xFF5
  2228                           postinc0	equ	0xFEE
  2229                           wreg	equ	0xFE8
  2230                           postdec1	equ	0xFE5
  2231                           fsr1h	equ	0xFE2
  2232                           fsr1l	equ	0xFE1
  2233                           indf2	equ	0xFDF
  2234                           postinc2	equ	0xFDE
  2235                           postdec2	equ	0xFDD
  2236                           fsr2h	equ	0xFDA
  2237                           fsr2l	equ	0xFD9
  2238                           status	equ	0xFD8
  2239                           
  2240 ;; *************** function _getSetFreeCluster *****************
  2241 ;; Defined at:
  2242 ;;		line 133 in file "FAT32.c"
  2243 ;; Parameters:    Size  Location     Type
  2244 ;;  totOrNext       1    wreg     unsigned char 
  2245 ;;  get_set         1   23[COMRAM] unsigned char 
  2246 ;;  FSEntry         4   24[COMRAM] unsigned long 
  2247 ;; Auto vars:     Size  Location     Type
  2248 ;;  totOrNext       1   33[COMRAM] unsigned char 
  2249 ;;  FS              2   34[COMRAM] PTR struct FSInfo_Struct
  2250 ;;		 -> buffer(512), 
  2251 ;;  error           1   32[COMRAM] unsigned char 
  2252 ;; Return value:  Size  Location     Type
  2253 ;;                  4   23[COMRAM] unsigned long 
  2254 ;; Registers used:
  2255 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2256 ;; Tracked objects:
  2257 ;;		On entry : 0/0
  2258 ;;		On exit  : 0/0
  2259 ;;		Unchanged: 0/0
  2260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2261 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2262 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2263 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2264 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2265 ;;Total ram usage:       13 bytes
  2266 ;; Hardware stack levels used:    1
  2267 ;; Hardware stack levels required when called:    4
  2268 ;; This function calls:
  2269 ;;		_SD_readSingleBlock
  2270 ;;		_SD_writeSingleBlock
  2271 ;; This function is called by:
  2272 ;;		_getBootSectorData
  2273 ;;		_findFiles
  2274 ;;		_writeFile
  2275 ;;		_memoryStatistics
  2276 ;;		_freeMemoryUpdate
  2277 ;; This function uses a non-reentrant model
  2278 ;;
  2279                           
  2280                           	psect	text4
  2281  00B500                     __ptext4:
  2282                           	opt stack 0
  2283  00B500                     _getSetFreeCluster:
  2284                           	opt stack 25
  2285                           
  2286                           ;incstack = 0
  2287                           ;getSetFreeCluster@totOrNext stored from wreg
  2288  00B500  6E22               	movwf	getSetFreeCluster@totOrNext,c
  2289                           
  2290                           ;FAT32.c: 135: struct FSInfo_Structure *FS = (struct FSInfo_Structure *) &buffer;
  2291  00B502  0E00               	movlw	high _buffer
  2292  00B504  6E24               	movwf	getSetFreeCluster@FS+1,c
  2293  00B506  0E94               	movlw	low _buffer
  2294  00B508  6E23               	movwf	getSetFreeCluster@FS,c
  2295                           
  2296                           ;FAT32.c: 136: unsigned char error;
  2297                           ;FAT32.c: 138: SD_readSingleBlock(unusedSectors + 1);
  2298  00B50A  0E01               	movlw	1
  2299  00B50C  246F               	addwf	_unusedSectors,w,c
  2300  00B50E  6E0E               	movwf	SD_readSingleBlock@startBlock,c
  2301  00B510  0E00               	movlw	0
  2302  00B512  2070               	addwfc	_unusedSectors+1,w,c
  2303  00B514  6E0F               	movwf	SD_readSingleBlock@startBlock+1,c
  2304  00B516  0E00               	movlw	0
  2305  00B518  2071               	addwfc	_unusedSectors+2,w,c
  2306  00B51A  6E10               	movwf	SD_readSingleBlock@startBlock+2,c
  2307  00B51C  0E00               	movlw	0
  2308  00B51E  2072               	addwfc	_unusedSectors+3,w,c
  2309  00B520  6E11               	movwf	SD_readSingleBlock@startBlock+3,c
  2310  00B522  EC35  F059         	call	_SD_readSingleBlock	;wreg free
  2311                           
  2312                           ;FAT32.c: 140: if((FS->leadSignature != 0x41615252) || (FS->structureSignature != 0x6141
      +                          7272) || (FS->trailSignature !=0xaa550000))
  2313  00B526  C023  FFD9         	movff	getSetFreeCluster@FS,fsr2l
  2314  00B52A  C024  FFDA         	movff	getSetFreeCluster@FS+1,fsr2h
  2315  00B52E  CFDE F01D          	movff	postinc2,??_getSetFreeCluster
  2316  00B532  CFDE F01E          	movff	postinc2,??_getSetFreeCluster+1
  2317  00B536  CFDE F01F          	movff	postinc2,??_getSetFreeCluster+2
  2318  00B53A  CFDE F020          	movff	postinc2,??_getSetFreeCluster+3
  2319  00B53E  5020               	movf	??_getSetFreeCluster+3,w,c
  2320  00B540  0A41               	xorlw	65
  2321  00B542  0E52               	movlw	82
  2322  00B544  B4D8               	btfsc	status,2,c
  2323  00B546  181D               	xorwf	??_getSetFreeCluster,w,c
  2324  00B548  0E52               	movlw	82
  2325  00B54A  B4D8               	btfsc	status,2,c
  2326  00B54C  181E               	xorwf	??_getSetFreeCluster+1,w,c
  2327  00B54E  0E61               	movlw	97
  2328  00B550  B4D8               	btfsc	status,2,c
  2329  00B552  181F               	xorwf	??_getSetFreeCluster+2,w,c
  2330  00B554  A4D8               	btfss	status,2,c
  2331  00B556  D06C               	goto	l1357
  2332  00B558  EE21 F0E4          	lfsr	2,484
  2333  00B55C  5023               	movf	getSetFreeCluster@FS,w,c
  2334  00B55E  26D9               	addwf	fsr2l,f,c
  2335  00B560  5024               	movf	getSetFreeCluster@FS+1,w,c
  2336  00B562  22DA               	addwfc	fsr2h,f,c
  2337  00B564  CFDE F01D          	movff	postinc2,??_getSetFreeCluster
  2338  00B568  CFDE F01E          	movff	postinc2,??_getSetFreeCluster+1
  2339  00B56C  CFDE F01F          	movff	postinc2,??_getSetFreeCluster+2
  2340  00B570  CFDE F020          	movff	postinc2,??_getSetFreeCluster+3
  2341  00B574  5020               	movf	??_getSetFreeCluster+3,w,c
  2342  00B576  0A61               	xorlw	97
  2343  00B578  0E72               	movlw	114
  2344  00B57A  B4D8               	btfsc	status,2,c
  2345  00B57C  181D               	xorwf	??_getSetFreeCluster,w,c
  2346  00B57E  0E72               	movlw	114
  2347  00B580  B4D8               	btfsc	status,2,c
  2348  00B582  181E               	xorwf	??_getSetFreeCluster+1,w,c
  2349  00B584  0E41               	movlw	65
  2350  00B586  B4D8               	btfsc	status,2,c
  2351  00B588  181F               	xorwf	??_getSetFreeCluster+2,w,c
  2352  00B58A  A4D8               	btfss	status,2,c
  2353  00B58C  D051               	goto	l1357
  2354  00B58E  EE21 F0FC          	lfsr	2,508
  2355  00B592  5023               	movf	getSetFreeCluster@FS,w,c
  2356  00B594  26D9               	addwf	fsr2l,f,c
  2357  00B596  5024               	movf	getSetFreeCluster@FS+1,w,c
  2358  00B598  22DA               	addwfc	fsr2h,f,c
  2359  00B59A  CFDE F01D          	movff	postinc2,??_getSetFreeCluster
  2360  00B59E  CFDE F01E          	movff	postinc2,??_getSetFreeCluster+1
  2361  00B5A2  CFDE F01F          	movff	postinc2,??_getSetFreeCluster+2
  2362  00B5A6  CFDE F020          	movff	postinc2,??_getSetFreeCluster+3
  2363  00B5AA  5020               	movf	??_getSetFreeCluster+3,w,c
  2364  00B5AC  0AAA               	xorlw	170
  2365  00B5AE  0E55               	movlw	85
  2366  00B5B0  B4D8               	btfsc	status,2,c
  2367  00B5B2  181F               	xorwf	??_getSetFreeCluster+2,w,c
  2368  00B5B4  101D               	iorwf	??_getSetFreeCluster,w,c
  2369  00B5B6  101E               	iorwf	??_getSetFreeCluster+1,w,c
  2370  00B5B8  A4D8               	btfss	status,2,c
  2371  00B5BA  D03A               	goto	l1357
  2372                           
  2373                           ;FAT32.c: 143: if(get_set == 0)
  2374                           
  2375                           ;FAT32.c: 141: return 0xffffffff;
  2376  00B5BC  6618               	tstfsz	getSetFreeCluster@get_set,c
  2377  00B5BE  D015               	goto	l1349
  2378                           
  2379                           ;FAT32.c: 144: {
  2380                           ;FAT32.c: 145: if(totOrNext == 1)
  2381  00B5C0  0422               	decf	getSetFreeCluster@totOrNext,w,c
  2382  00B5C2  A4D8               	btfss	status,2,c
  2383  00B5C4  D003               	goto	l1345
  2384                           
  2385                           ;FAT32.c: 146: return(FS->freeClusterCount);
  2386  00B5C6  EE21 F0E8          	lfsr	2,488
  2387  00B5CA  D002               	goto	L4
  2388  00B5CC                     l1345:
  2389                           
  2390                           ;FAT32.c: 147: else
  2391                           ;FAT32.c: 148: return(FS->nextFreeCluster);
  2392  00B5CC  EE21 F0EC          	lfsr	2,492
  2393  00B5D0                     L4:
  2394  00B5D0  5023               	movf	getSetFreeCluster@FS,w,c
  2395  00B5D2  26D9               	addwf	fsr2l,f,c
  2396  00B5D4  5024               	movf	getSetFreeCluster@FS+1,w,c
  2397  00B5D6  22DA               	addwfc	fsr2h,f,c
  2398  00B5D8  CFDE F018          	movff	postinc2,?_getSetFreeCluster
  2399  00B5DC  CFDE F019          	movff	postinc2,?_getSetFreeCluster+1
  2400  00B5E0  CFDE F01A          	movff	postinc2,?_getSetFreeCluster+2
  2401  00B5E4  CFDE F01B          	movff	postinc2,?_getSetFreeCluster+3
  2402  00B5E8  D027               	goto	l313
  2403  00B5EA                     l1349:
  2404                           
  2405                           ;FAT32.c: 150: else
  2406                           ;FAT32.c: 151: {
  2407                           ;FAT32.c: 152: if(totOrNext == 1)
  2408  00B5EA  0422               	decf	getSetFreeCluster@totOrNext,w,c
  2409  00B5EC  A4D8               	btfss	status,2,c
  2410  00B5EE  D003               	goto	l1353
  2411                           
  2412                           ;FAT32.c: 153: FS->freeClusterCount = FSEntry;
  2413  00B5F0  EE21 F0E8          	lfsr	2,488
  2414  00B5F4  D002               	goto	L5
  2415  00B5F6                     l1353:
  2416                           
  2417                           ;FAT32.c: 154: else
  2418                           ;FAT32.c: 155: FS->nextFreeCluster = FSEntry;
  2419  00B5F6  EE21 F0EC          	lfsr	2,492
  2420  00B5FA                     L5:
  2421  00B5FA  5023               	movf	getSetFreeCluster@FS,w,c
  2422  00B5FC  26D9               	addwf	fsr2l,f,c
  2423  00B5FE  5024               	movf	getSetFreeCluster@FS+1,w,c
  2424  00B600  22DA               	addwfc	fsr2h,f,c
  2425  00B602  C019  FFDE         	movff	getSetFreeCluster@FSEntry,postinc2
  2426  00B606  C01A  FFDE         	movff	getSetFreeCluster@FSEntry+1,postinc2
  2427  00B60A  C01B  FFDE         	movff	getSetFreeCluster@FSEntry+2,postinc2
  2428  00B60E  C01C  FFDE         	movff	getSetFreeCluster@FSEntry+3,postinc2
  2429                           
  2430                           ;FAT32.c: 157: error = SD_writeSingleBlock(unusedSectors + 1);
  2431  00B612  0E01               	movlw	1
  2432  00B614  246F               	addwf	_unusedSectors,w,c
  2433  00B616  6E0E               	movwf	SD_writeSingleBlock@startBlock,c
  2434  00B618  0E00               	movlw	0
  2435  00B61A  2070               	addwfc	_unusedSectors+1,w,c
  2436  00B61C  6E0F               	movwf	SD_writeSingleBlock@startBlock+1,c
  2437  00B61E  0E00               	movlw	0
  2438  00B620  2071               	addwfc	_unusedSectors+2,w,c
  2439  00B622  6E10               	movwf	SD_writeSingleBlock@startBlock+2,c
  2440  00B624  0E00               	movlw	0
  2441  00B626  2072               	addwfc	_unusedSectors+3,w,c
  2442  00B628  6E11               	movwf	SD_writeSingleBlock@startBlock+3,c
  2443  00B62A  EC30  F05A         	call	_SD_writeSingleBlock	;wreg free
  2444  00B62E  6E21               	movwf	getSetFreeCluster@error,c
  2445  00B630                     l1357:
  2446                           
  2447                           ;FAT32.c: 158: }
  2448                           ;FAT32.c: 159: return 0xffffffff;
  2449  00B630  6818               	setf	?_getSetFreeCluster,c
  2450  00B632  6819               	setf	?_getSetFreeCluster+1,c
  2451  00B634  681A               	setf	?_getSetFreeCluster+2,c
  2452  00B636  681B               	setf	?_getSetFreeCluster+3,c
  2453  00B638                     l313:
  2454  00B638  0012               	return	
  2455  00B63A                     __end_of_getSetFreeCluster:
  2456                           	opt stack 0
  2457                           tblptru	equ	0xFF8
  2458                           tblptrh	equ	0xFF7
  2459                           tblptrl	equ	0xFF6
  2460                           tablat	equ	0xFF5
  2461                           postinc0	equ	0xFEE
  2462                           wreg	equ	0xFE8
  2463                           postdec1	equ	0xFE5
  2464                           fsr1h	equ	0xFE2
  2465                           fsr1l	equ	0xFE1
  2466                           indf2	equ	0xFDF
  2467                           postinc2	equ	0xFDE
  2468                           postdec2	equ	0xFDD
  2469                           fsr2h	equ	0xFDA
  2470                           fsr2l	equ	0xFD9
  2471                           status	equ	0xFD8
  2472                           
  2473 ;; *************** function _SD_writeSingleBlock *****************
  2474 ;; Defined at:
  2475 ;;		line 234 in file "SD_routines.c"
  2476 ;; Parameters:    Size  Location     Type
  2477 ;;  startBlock      4   13[COMRAM] unsigned long 
  2478 ;; Auto vars:     Size  Location     Type
  2479 ;;  i               2   20[COMRAM] unsigned int 
  2480 ;;  retry           2   18[COMRAM] unsigned int 
  2481 ;;  response        1   22[COMRAM] unsigned char 
  2482 ;; Return value:  Size  Location     Type
  2483 ;;                  1    wreg      unsigned char 
  2484 ;; Registers used:
  2485 ;;		wreg, status,2, status,0, cstack
  2486 ;; Tracked objects:
  2487 ;;		On entry : 0/0
  2488 ;;		On exit  : 0/0
  2489 ;;		Unchanged: 0/0
  2490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2491 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2492 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2493 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2494 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2495 ;;Total ram usage:       10 bytes
  2496 ;; Hardware stack levels used:    1
  2497 ;; Hardware stack levels required when called:    3
  2498 ;; This function calls:
  2499 ;;		_SD_sendCommand
  2500 ;;		_SPI_Read_8Bits
  2501 ;;		_SPI_Send_8Bits
  2502 ;; This function is called by:
  2503 ;;		_main
  2504 ;;		_getSetFreeCluster
  2505 ;;		_getSetNextCluster
  2506 ;;		_findFiles
  2507 ;;		_writeFile
  2508 ;; This function uses a non-reentrant model
  2509 ;;
  2510                           
  2511                           	psect	text5
  2512  00B460                     __ptext5:
  2513                           	opt stack 0
  2514  00B460                     _SD_writeSingleBlock:
  2515                           	opt stack 25
  2516                           
  2517                           ;SD_routines.c: 236: unsigned char response;
  2518                           ;SD_routines.c: 237: unsigned int i, retry=0;
  2519                           
  2520                           ;incstack = 0
  2521  00B460  0E00               	movlw	0
  2522  00B462  6E14               	movwf	SD_writeSingleBlock@retry+1,c
  2523  00B464  0E00               	movlw	0
  2524  00B466  6E13               	movwf	SD_writeSingleBlock@retry,c
  2525                           
  2526                           ;SD_routines.c: 239: response = SD_sendCommand(24, startBlock);
  2527  00B468  C00E  F006         	movff	SD_writeSingleBlock@startBlock,SD_sendCommand@arg
  2528  00B46C  C00F  F007         	movff	SD_writeSingleBlock@startBlock+1,SD_sendCommand@arg+1
  2529  00B470  C010  F008         	movff	SD_writeSingleBlock@startBlock+2,SD_sendCommand@arg+2
  2530  00B474  C011  F009         	movff	SD_writeSingleBlock@startBlock+3,SD_sendCommand@arg+3
  2531  00B478  0E18               	movlw	24
  2532  00B47A  EC6E  F059         	call	_SD_sendCommand
  2533  00B47E  6E17               	movwf	SD_writeSingleBlock@response,c
  2534                           
  2535                           ;SD_routines.c: 241: if(response != 0x00) return response;
  2536  00B480  5017               	movf	SD_writeSingleBlock@response,w,c
  2537  00B482  A4D8               	btfss	status,2,c
  2538  00B484  D023               	goto	L6
  2539                           
  2540                           ;SD_routines.c: 243: (PORTC &= ~0x40);
  2541  00B486  9C82               	bcf	3970,6,c	;volatile
  2542                           
  2543                           ;SD_routines.c: 245: SPI_Send_8Bits(0xfe);
  2544  00B488  0EFE               	movlw	254
  2545  00B48A  EC08  F059         	call	_SPI_Send_8Bits
  2546                           
  2547                           ;SD_routines.c: 247: for(i=0; i<512; i++)
  2548  00B48E  0E00               	movlw	0
  2549  00B490  6E16               	movwf	SD_writeSingleBlock@i+1,c
  2550  00B492  0E00               	movlw	0
  2551  00B494  6E15               	movwf	SD_writeSingleBlock@i,c
  2552  00B496  0E00               	movlw	0
  2553  00B498  5C15               	subwf	SD_writeSingleBlock@i,w,c
  2554  00B49A  0E02               	movlw	2
  2555  00B49C  5816               	subwfb	SD_writeSingleBlock@i+1,w,c
  2556  00B49E  B0D8               	btfsc	status,0,c
  2557  00B4A0  D006               	goto	l1273
  2558                           
  2559                           ;SD_routines.c: 248: SPI_Send_8Bits('A');
  2560  00B4A2  0E41               	movlw	65
  2561  00B4A4  EC08  F059         	call	_SPI_Send_8Bits
  2562  00B4A8  4A15               	infsnz	SD_writeSingleBlock@i,f,c
  2563  00B4AA  2A16               	incf	SD_writeSingleBlock@i+1,f,c
  2564  00B4AC  D7F4               	goto	L7
  2565  00B4AE                     l1273:
  2566                           
  2567                           ;SD_routines.c: 250: SPI_Send_8Bits(0xff);
  2568  00B4AE  0EFF               	movlw	255
  2569  00B4B0  EC08  F059         	call	_SPI_Send_8Bits
  2570                           
  2571                           ;SD_routines.c: 251: SPI_Send_8Bits(0xff);
  2572  00B4B4  0EFF               	movlw	255
  2573  00B4B6  EC08  F059         	call	_SPI_Send_8Bits
  2574                           
  2575                           ;SD_routines.c: 257: if( (response & 0x1f) != 0x05)
  2576  00B4BA  C017  F012         	movff	SD_writeSingleBlock@response,??_SD_writeSingleBlock
  2577  00B4BE  0E1F               	movlw	31
  2578  00B4C0  1612               	andwf	??_SD_writeSingleBlock,f,c
  2579  00B4C2  5012               	movf	??_SD_writeSingleBlock,w,c
  2580  00B4C4  0A05               	xorlw	5
  2581  00B4C6  B4D8               	btfsc	status,2,c
  2582  00B4C8  D003               	goto	l226
  2583                           
  2584                           ;SD_routines.c: 258: {
  2585                           ;SD_routines.c: 259: (PORTC |= 0x40);
  2586  00B4CA  8C82               	bsf	3970,6,c	;volatile
  2587  00B4CC                     L6:
  2588                           
  2589                           ;SD_routines.c: 260: return response;
  2590  00B4CC  5017               	movf	SD_writeSingleBlock@response,w,c
  2591  00B4CE  D017               	goto	l222
  2592  00B4D0                     l226:
  2593  00B4D0  D7FF               	goto	l226
  2594  00B4D2                     l1283:
  2595                           
  2596                           ;SD_routines.c: 264: if(retry++ > 0xfffe){(PORTC |= 0x40); return 1;}
  2597  00B4D2  4A13               	infsnz	SD_writeSingleBlock@retry,f,c
  2598  00B4D4  2A14               	incf	SD_writeSingleBlock@retry+1,f,c
  2599  00B4D6  EC3E  F058         	call	_SPI_Read_8Bits	;wreg free
  2600  00B4DA  0900               	iorlw	0
  2601  00B4DC  B4D8               	btfsc	status,2,c
  2602  00B4DE  D7F9               	goto	l1283
  2603                           
  2604                           ;SD_routines.c: 266: (PORTC |= 0x40);
  2605  00B4E0  8C82               	bsf	3970,6,c	;volatile
  2606                           
  2607                           ;SD_routines.c: 267: SPI_Send_8Bits(0xff);
  2608  00B4E2  0EFF               	movlw	255
  2609  00B4E4  EC08  F059         	call	_SPI_Send_8Bits
  2610                           
  2611                           ;SD_routines.c: 268: (PORTC &= ~0x40);
  2612  00B4E8  9C82               	bcf	3970,6,c	;volatile
  2613                           
  2614                           ;SD_routines.c: 270: while(!SPI_Read_8Bits())
  2615  00B4EA  D002               	goto	l1307
  2616  00B4EC                     l1299:
  2617                           
  2618                           ;SD_routines.c: 271: if(retry++ > 0xfffe){(PORTC |= 0x40); return 1;}
  2619  00B4EC  4A13               	infsnz	SD_writeSingleBlock@retry,f,c
  2620  00B4EE  2A14               	incf	SD_writeSingleBlock@retry+1,f,c
  2621  00B4F0                     l1307:
  2622  00B4F0  EC3E  F058         	call	_SPI_Read_8Bits	;wreg free
  2623  00B4F4  0900               	iorlw	0
  2624  00B4F6  B4D8               	btfsc	status,2,c
  2625  00B4F8  D7F9               	goto	l1299
  2626                           
  2627                           ;SD_routines.c: 272: (PORTC |= 0x40);
  2628  00B4FA  8C82               	bsf	3970,6,c	;volatile
  2629                           
  2630                           ;SD_routines.c: 274: return 0;
  2631  00B4FC  0E00               	movlw	0
  2632  00B4FE                     l222:
  2633  00B4FE  0012               	return	
  2634  00B500                     __end_of_SD_writeSingleBlock:
  2635                           	opt stack 0
  2636                           tblptru	equ	0xFF8
  2637                           tblptrh	equ	0xFF7
  2638                           tblptrl	equ	0xFF6
  2639                           tablat	equ	0xFF5
  2640                           postinc0	equ	0xFEE
  2641                           wreg	equ	0xFE8
  2642                           postdec1	equ	0xFE5
  2643                           fsr1h	equ	0xFE2
  2644                           fsr1l	equ	0xFE1
  2645                           indf2	equ	0xFDF
  2646                           postinc2	equ	0xFDE
  2647                           postdec2	equ	0xFDD
  2648                           fsr2h	equ	0xFDA
  2649                           fsr2l	equ	0xFD9
  2650                           status	equ	0xFD8
  2651                           
  2652 ;; *************** function _SD_readSingleBlock *****************
  2653 ;; Defined at:
  2654 ;;		line 203 in file "SD_routines.c"
  2655 ;; Parameters:    Size  Location     Type
  2656 ;;  startBlock      4   13[COMRAM] unsigned long 
  2657 ;; Auto vars:     Size  Location     Type
  2658 ;;  i               2   20[COMRAM] unsigned int 
  2659 ;;  retry           2   17[COMRAM] unsigned int 
  2660 ;;  response        1   19[COMRAM] unsigned char 
  2661 ;; Return value:  Size  Location     Type
  2662 ;;                  1    wreg      unsigned char 
  2663 ;; Registers used:
  2664 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2665 ;; Tracked objects:
  2666 ;;		On entry : 0/0
  2667 ;;		On exit  : 0/0
  2668 ;;		Unchanged: 0/0
  2669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2670 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2671 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2673 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2674 ;;Total ram usage:        9 bytes
  2675 ;; Hardware stack levels used:    1
  2676 ;; Hardware stack levels required when called:    3
  2677 ;; This function calls:
  2678 ;;		_SD_sendCommand
  2679 ;;		_SPI_Read_8Bits
  2680 ;; This function is called by:
  2681 ;;		_main
  2682 ;;		_getBootSectorData
  2683 ;;		_getSetFreeCluster
  2684 ;;		_getSetNextCluster
  2685 ;;		_findFiles
  2686 ;;		_readFile
  2687 ;;		_writeFile
  2688 ;;		_searchNextFreeCluster
  2689 ;;		_memoryStatistics
  2690 ;; This function uses a non-reentrant model
  2691 ;;
  2692                           
  2693                           	psect	text6
  2694  00B26A                     __ptext6:
  2695                           	opt stack 0
  2696  00B26A                     _SD_readSingleBlock:
  2697                           	opt stack 25
  2698                           
  2699                           ;SD_routines.c: 205: unsigned char response;
  2700                           ;SD_routines.c: 206: unsigned int i, retry=0;
  2701                           
  2702                           ;incstack = 0
  2703  00B26A  0E00               	movlw	0
  2704  00B26C  6E13               	movwf	SD_readSingleBlock@retry+1,c
  2705  00B26E  0E00               	movlw	0
  2706  00B270  6E12               	movwf	SD_readSingleBlock@retry,c
  2707                           
  2708                           ;SD_routines.c: 208: response = SD_sendCommand(17, startBlock);
  2709  00B272  C00E  F006         	movff	SD_readSingleBlock@startBlock,SD_sendCommand@arg
  2710  00B276  C00F  F007         	movff	SD_readSingleBlock@startBlock+1,SD_sendCommand@arg+1
  2711  00B27A  C010  F008         	movff	SD_readSingleBlock@startBlock+2,SD_sendCommand@arg+2
  2712  00B27E  C011  F009         	movff	SD_readSingleBlock@startBlock+3,SD_sendCommand@arg+3
  2713  00B282  0E11               	movlw	17
  2714  00B284  EC6E  F059         	call	_SD_sendCommand
  2715  00B288  6E14               	movwf	SD_readSingleBlock@response,c
  2716                           
  2717                           ;SD_routines.c: 209: if(response != 0x00) return response;
  2718  00B28A  5014               	movf	SD_readSingleBlock@response,w,c
  2719  00B28C  B4D8               	btfsc	status,2,c
  2720  00B28E  D002               	goto	l1223
  2721  00B290  5014               	movf	SD_readSingleBlock@response,w,c
  2722  00B292  D023               	goto	l216
  2723  00B294                     l1223:
  2724                           
  2725                           ;SD_routines.c: 211: (PORTC &= ~0x40);
  2726  00B294  9C82               	bcf	3970,6,c	;volatile
  2727                           
  2728                           ;SD_routines.c: 212: retry = 0;
  2729  00B296  0E00               	movlw	0
  2730  00B298  6E13               	movwf	SD_readSingleBlock@retry+1,c
  2731  00B29A  0E00               	movlw	0
  2732  00B29C  6E12               	movwf	SD_readSingleBlock@retry,c
  2733                           
  2734                           ;SD_routines.c: 216: for(i=0; i<512; i++)
  2735  00B29E  0E00               	movlw	0
  2736  00B2A0  6E16               	movwf	SD_readSingleBlock@i+1,c
  2737  00B2A2  0E00               	movlw	0
  2738  00B2A4  6E15               	movwf	SD_readSingleBlock@i,c
  2739  00B2A6  0E00               	movlw	0
  2740  00B2A8  5C15               	subwf	SD_readSingleBlock@i,w,c
  2741  00B2AA  0E02               	movlw	2
  2742  00B2AC  5816               	subwfb	SD_readSingleBlock@i+1,w,c
  2743  00B2AE  B0D8               	btfsc	status,0,c
  2744  00B2B0  D00C               	goto	l1239
  2745                           
  2746                           ;SD_routines.c: 217: buffer[i] = SPI_Read_8Bits();
  2747  00B2B2  0E94               	movlw	low _buffer
  2748  00B2B4  2415               	addwf	SD_readSingleBlock@i,w,c
  2749  00B2B6  6ED9               	movwf	fsr2l,c
  2750  00B2B8  0E00               	movlw	high _buffer
  2751  00B2BA  2016               	addwfc	SD_readSingleBlock@i+1,w,c
  2752  00B2BC  6EDA               	movwf	fsr2h,c
  2753  00B2BE  EC3E  F058         	call	_SPI_Read_8Bits	;wreg free
  2754  00B2C2  6EDF               	movwf	indf2,c
  2755  00B2C4  4A15               	infsnz	SD_readSingleBlock@i,f,c
  2756  00B2C6  2A16               	incf	SD_readSingleBlock@i+1,f,c
  2757  00B2C8  D7EE               	goto	L8
  2758  00B2CA                     l1239:
  2759                           
  2760                           ;SD_routines.c: 219: SPI_Read_8Bits();
  2761  00B2CA  EC3E  F058         	call	_SPI_Read_8Bits	;wreg free
  2762                           
  2763                           ;SD_routines.c: 220: SPI_Read_8Bits();
  2764  00B2CE  EC3E  F058         	call	_SPI_Read_8Bits	;wreg free
  2765                           
  2766                           ;SD_routines.c: 222: SPI_Read_8Bits();
  2767  00B2D2  EC3E  F058         	call	_SPI_Read_8Bits	;wreg free
  2768                           
  2769                           ;SD_routines.c: 223: (PORTC |= 0x40);
  2770  00B2D6  8C82               	bsf	3970,6,c	;volatile
  2771                           
  2772                           ;SD_routines.c: 225: return 0;
  2773  00B2D8  0E00               	movlw	0
  2774  00B2DA                     l216:
  2775  00B2DA  0012               	return	
  2776  00B2DC                     __end_of_SD_readSingleBlock:
  2777                           	opt stack 0
  2778                           tblptru	equ	0xFF8
  2779                           tblptrh	equ	0xFF7
  2780                           tblptrl	equ	0xFF6
  2781                           tablat	equ	0xFF5
  2782                           postinc0	equ	0xFEE
  2783                           wreg	equ	0xFE8
  2784                           postdec1	equ	0xFE5
  2785                           fsr1h	equ	0xFE2
  2786                           fsr1l	equ	0xFE1
  2787                           indf2	equ	0xFDF
  2788                           postinc2	equ	0xFDE
  2789                           postdec2	equ	0xFDD
  2790                           fsr2h	equ	0xFDA
  2791                           fsr2l	equ	0xFD9
  2792                           status	equ	0xFD8
  2793                           
  2794 ;; *************** function ___lmul *****************
  2795 ;; Defined at:
  2796 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul32.c"
  2797 ;; Parameters:    Size  Location     Type
  2798 ;;  multiplier      4    0[COMRAM] unsigned long 
  2799 ;;  multiplicand    4    4[COMRAM] unsigned long 
  2800 ;; Auto vars:     Size  Location     Type
  2801 ;;  product         4    8[COMRAM] unsigned long 
  2802 ;; Return value:  Size  Location     Type
  2803 ;;                  4    0[COMRAM] unsigned long 
  2804 ;; Registers used:
  2805 ;;		wreg, status,2, status,0
  2806 ;; Tracked objects:
  2807 ;;		On entry : 0/0
  2808 ;;		On exit  : 0/0
  2809 ;;		Unchanged: 0/0
  2810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2811 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2812 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2814 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2815 ;;Total ram usage:       12 bytes
  2816 ;; Hardware stack levels used:    1
  2817 ;; This function calls:
  2818 ;;		Nothing
  2819 ;; This function is called by:
  2820 ;;		_getBootSectorData
  2821 ;;		_getFirstSector
  2822 ;;		_writeFile
  2823 ;;		_memoryStatistics
  2824 ;; This function uses a non-reentrant model
  2825 ;;
  2826                           
  2827                           	psect	text7
  2828  00B1BA                     __ptext7:
  2829                           	opt stack 0
  2830  00B1BA                     ___lmul:
  2831                           	opt stack 29
  2832                           
  2833                           ;incstack = 0
  2834  00B1BA  0E00               	movlw	0
  2835  00B1BC  6E09               	movwf	___lmul@product,c
  2836  00B1BE  0E00               	movlw	0
  2837  00B1C0  6E0A               	movwf	___lmul@product+1,c
  2838  00B1C2  0E00               	movlw	0
  2839  00B1C4  6E0B               	movwf	___lmul@product+2,c
  2840  00B1C6  0E00               	movlw	0
  2841  00B1C8  6E0C               	movwf	___lmul@product+3,c
  2842  00B1CA                     l1431:
  2843  00B1CA  A001               	btfss	___lmul@multiplier,0,c
  2844  00B1CC  D008               	goto	l1435
  2845  00B1CE  5005               	movf	___lmul@multiplicand,w,c
  2846  00B1D0  2609               	addwf	___lmul@product,f,c
  2847  00B1D2  5006               	movf	___lmul@multiplicand+1,w,c
  2848  00B1D4  220A               	addwfc	___lmul@product+1,f,c
  2849  00B1D6  5007               	movf	___lmul@multiplicand+2,w,c
  2850  00B1D8  220B               	addwfc	___lmul@product+2,f,c
  2851  00B1DA  5008               	movf	___lmul@multiplicand+3,w,c
  2852  00B1DC  220C               	addwfc	___lmul@product+3,f,c
  2853  00B1DE                     l1435:
  2854  00B1DE  90D8               	bcf	status,0,c
  2855  00B1E0  3605               	rlcf	___lmul@multiplicand,f,c
  2856  00B1E2  3606               	rlcf	___lmul@multiplicand+1,f,c
  2857  00B1E4  3607               	rlcf	___lmul@multiplicand+2,f,c
  2858  00B1E6  3608               	rlcf	___lmul@multiplicand+3,f,c
  2859  00B1E8  90D8               	bcf	status,0,c
  2860  00B1EA  3204               	rrcf	___lmul@multiplier+3,f,c
  2861  00B1EC  3203               	rrcf	___lmul@multiplier+2,f,c
  2862  00B1EE  3202               	rrcf	___lmul@multiplier+1,f,c
  2863  00B1F0  3201               	rrcf	___lmul@multiplier,f,c
  2864  00B1F2  5004               	movf	___lmul@multiplier+3,w,c
  2865  00B1F4  1001               	iorwf	___lmul@multiplier,w,c
  2866  00B1F6  1002               	iorwf	___lmul@multiplier+1,w,c
  2867  00B1F8  1003               	iorwf	___lmul@multiplier+2,w,c
  2868  00B1FA  A4D8               	btfss	status,2,c
  2869  00B1FC  D7E6               	goto	l1431
  2870  00B1FE  C009  F001         	movff	___lmul@product,?___lmul
  2871  00B202  C00A  F002         	movff	___lmul@product+1,?___lmul+1
  2872  00B206  C00B  F003         	movff	___lmul@product+2,?___lmul+2
  2873  00B20A  C00C  F004         	movff	___lmul@product+3,?___lmul+3
  2874  00B20E  0012               	return	
  2875  00B210                     __end_of___lmul:
  2876                           	opt stack 0
  2877                           tblptru	equ	0xFF8
  2878                           tblptrh	equ	0xFF7
  2879                           tblptrl	equ	0xFF6
  2880                           tablat	equ	0xFF5
  2881                           postinc0	equ	0xFEE
  2882                           wreg	equ	0xFE8
  2883                           postdec1	equ	0xFE5
  2884                           fsr1h	equ	0xFE2
  2885                           fsr1l	equ	0xFE1
  2886                           indf2	equ	0xFDF
  2887                           postinc2	equ	0xFDE
  2888                           postdec2	equ	0xFDD
  2889                           fsr2h	equ	0xFDA
  2890                           fsr2l	equ	0xFD9
  2891                           status	equ	0xFD8
  2892                           
  2893 ;; *************** function ___lldiv *****************
  2894 ;; Defined at:
  2895 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lldiv.c"
  2896 ;; Parameters:    Size  Location     Type
  2897 ;;  dividend        4    0[COMRAM] unsigned long 
  2898 ;;  divisor         4    4[COMRAM] unsigned long 
  2899 ;; Auto vars:     Size  Location     Type
  2900 ;;  quotient        4    8[COMRAM] unsigned long 
  2901 ;;  counter         1   12[COMRAM] unsigned char 
  2902 ;; Return value:  Size  Location     Type
  2903 ;;                  4    0[COMRAM] unsigned long 
  2904 ;; Registers used:
  2905 ;;		wreg, status,2, status,0
  2906 ;; Tracked objects:
  2907 ;;		On entry : 0/0
  2908 ;;		On exit  : 0/0
  2909 ;;		Unchanged: 0/0
  2910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2911 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2912 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2913 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2914 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2915 ;;Total ram usage:       13 bytes
  2916 ;; Hardware stack levels used:    1
  2917 ;; This function calls:
  2918 ;;		Nothing
  2919 ;; This function is called by:
  2920 ;;		_getBootSectorData
  2921 ;;		_getSetNextCluster
  2922 ;;		_writeFile
  2923 ;;		_searchNextFreeCluster
  2924 ;;		_memoryStatistics
  2925 ;;		_displayMemory
  2926 ;; This function uses a non-reentrant model
  2927 ;;
  2928                           
  2929                           	psect	text8
  2930  00B3DE                     __ptext8:
  2931                           	opt stack 0
  2932  00B3DE                     ___lldiv:
  2933                           	opt stack 29
  2934                           
  2935                           ;incstack = 0
  2936  00B3DE  0E00               	movlw	0
  2937  00B3E0  6E09               	movwf	___lldiv@quotient,c
  2938  00B3E2  0E00               	movlw	0
  2939  00B3E4  6E0A               	movwf	___lldiv@quotient+1,c
  2940  00B3E6  0E00               	movlw	0
  2941  00B3E8  6E0B               	movwf	___lldiv@quotient+2,c
  2942  00B3EA  0E00               	movlw	0
  2943  00B3EC  6E0C               	movwf	___lldiv@quotient+3,c
  2944  00B3EE  5008               	movf	___lldiv@divisor+3,w,c
  2945  00B3F0  1005               	iorwf	___lldiv@divisor,w,c
  2946  00B3F2  1006               	iorwf	___lldiv@divisor+1,w,c
  2947  00B3F4  1007               	iorwf	___lldiv@divisor+2,w,c
  2948  00B3F6  B4D8               	btfsc	status,2,c
  2949  00B3F8  D02A               	goto	l955
  2950  00B3FA  0E01               	movlw	1
  2951  00B3FC  6E0D               	movwf	___lldiv@counter,c
  2952  00B3FE  D006               	goto	l2573
  2953  00B400                     l2571:
  2954  00B400  90D8               	bcf	status,0,c
  2955  00B402  3605               	rlcf	___lldiv@divisor,f,c
  2956  00B404  3606               	rlcf	___lldiv@divisor+1,f,c
  2957  00B406  3607               	rlcf	___lldiv@divisor+2,f,c
  2958  00B408  3608               	rlcf	___lldiv@divisor+3,f,c
  2959  00B40A  2A0D               	incf	___lldiv@counter,f,c
  2960  00B40C                     l2573:
  2961  00B40C  AE08               	btfss	___lldiv@divisor+3,7,c
  2962  00B40E  D7F8               	goto	l2571
  2963  00B410                     l2575:
  2964  00B410  90D8               	bcf	status,0,c
  2965  00B412  3609               	rlcf	___lldiv@quotient,f,c
  2966  00B414  360A               	rlcf	___lldiv@quotient+1,f,c
  2967  00B416  360B               	rlcf	___lldiv@quotient+2,f,c
  2968  00B418  360C               	rlcf	___lldiv@quotient+3,f,c
  2969  00B41A  5005               	movf	___lldiv@divisor,w,c
  2970  00B41C  5C01               	subwf	___lldiv@dividend,w,c
  2971  00B41E  5006               	movf	___lldiv@divisor+1,w,c
  2972  00B420  5802               	subwfb	___lldiv@dividend+1,w,c
  2973  00B422  5007               	movf	___lldiv@divisor+2,w,c
  2974  00B424  5803               	subwfb	___lldiv@dividend+2,w,c
  2975  00B426  5008               	movf	___lldiv@divisor+3,w,c
  2976  00B428  5804               	subwfb	___lldiv@dividend+3,w,c
  2977  00B42A  A0D8               	btfss	status,0,c
  2978  00B42C  D009               	goto	l2583
  2979  00B42E  5005               	movf	___lldiv@divisor,w,c
  2980  00B430  5E01               	subwf	___lldiv@dividend,f,c
  2981  00B432  5006               	movf	___lldiv@divisor+1,w,c
  2982  00B434  5A02               	subwfb	___lldiv@dividend+1,f,c
  2983  00B436  5007               	movf	___lldiv@divisor+2,w,c
  2984  00B438  5A03               	subwfb	___lldiv@dividend+2,f,c
  2985  00B43A  5008               	movf	___lldiv@divisor+3,w,c
  2986  00B43C  5A04               	subwfb	___lldiv@dividend+3,f,c
  2987  00B43E  8009               	bsf	___lldiv@quotient,0,c
  2988  00B440                     l2583:
  2989  00B440  90D8               	bcf	status,0,c
  2990  00B442  3208               	rrcf	___lldiv@divisor+3,f,c
  2991  00B444  3207               	rrcf	___lldiv@divisor+2,f,c
  2992  00B446  3206               	rrcf	___lldiv@divisor+1,f,c
  2993  00B448  3205               	rrcf	___lldiv@divisor,f,c
  2994  00B44A  2E0D               	decfsz	___lldiv@counter,f,c
  2995  00B44C  D7E1               	goto	l2575
  2996  00B44E                     l955:
  2997  00B44E  C009  F001         	movff	___lldiv@quotient,?___lldiv
  2998  00B452  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  2999  00B456  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  3000  00B45A  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  3001  00B45E  0012               	return	
  3002  00B460                     __end_of___lldiv:
  3003                           	opt stack 0
  3004                           tblptru	equ	0xFF8
  3005                           tblptrh	equ	0xFF7
  3006                           tblptrl	equ	0xFF6
  3007                           tablat	equ	0xFF5
  3008                           postinc0	equ	0xFEE
  3009                           wreg	equ	0xFE8
  3010                           postdec1	equ	0xFE5
  3011                           fsr1h	equ	0xFE2
  3012                           fsr1l	equ	0xFE1
  3013                           indf2	equ	0xFDF
  3014                           postinc2	equ	0xFDE
  3015                           postdec2	equ	0xFDD
  3016                           fsr2h	equ	0xFDA
  3017                           fsr2l	equ	0xFD9
  3018                           status	equ	0xFD8
  3019                           
  3020 ;; *************** function _delay *****************
  3021 ;; Defined at:
  3022 ;;		line 28 in file "main.c"
  3023 ;; Parameters:    Size  Location     Type
  3024 ;;  x               4    0[COMRAM] unsigned long 
  3025 ;; Auto vars:     Size  Location     Type
  3026 ;;		None
  3027 ;; Return value:  Size  Location     Type
  3028 ;;		None               void
  3029 ;; Registers used:
  3030 ;;		wreg, status,2, status,0
  3031 ;; Tracked objects:
  3032 ;;		On entry : 0/0
  3033 ;;		On exit  : 0/0
  3034 ;;		Unchanged: 0/0
  3035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3036 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3037 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3038 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3039 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3040 ;;Total ram usage:        4 bytes
  3041 ;; Hardware stack levels used:    1
  3042 ;; This function calls:
  3043 ;;		Nothing
  3044 ;; This function is called by:
  3045 ;;		_main
  3046 ;; This function uses a non-reentrant model
  3047 ;;
  3048                           
  3049                           	psect	text9
  3050  00AFF0                     __ptext9:
  3051                           	opt stack 0
  3052  00AFF0                     _delay:
  3053                           	opt stack 30
  3054  00AFF0                     l1475:
  3055  00AFF0  0601               	decf	delay@x,f,c
  3056  00AFF2  0E00               	movlw	0
  3057  00AFF4  5A02               	subwfb	delay@x+1,f,c
  3058  00AFF6  5A03               	subwfb	delay@x+2,f,c
  3059  00AFF8  5A04               	subwfb	delay@x+3,f,c
  3060  00AFFA  2801               	incf	delay@x& (0+255),w,c
  3061  00AFFC  B4D8               	btfsc	status,2,c
  3062  00AFFE  2802               	incf	(delay@x+1)& (0+255),w,c
  3063  00B000  B4D8               	btfsc	status,2,c
  3064  00B002  2803               	incf	(delay@x+2)& (0+255),w,c
  3065  00B004  B4D8               	btfsc	status,2,c
  3066  00B006  2804               	incf	(delay@x+3)& (0+255),w,c
  3067  00B008  B4D8               	btfsc	status,2,c
  3068  00B00A  0012               	return	
  3069  00B00C  D7F1               	goto	l1475
  3070  00B00E                     __end_of_delay:
  3071                           	opt stack 0
  3072                           tblptru	equ	0xFF8
  3073                           tblptrh	equ	0xFF7
  3074                           tblptrl	equ	0xFF6
  3075                           tablat	equ	0xFF5
  3076                           postinc0	equ	0xFEE
  3077                           wreg	equ	0xFE8
  3078                           postdec1	equ	0xFE5
  3079                           fsr1h	equ	0xFE2
  3080                           fsr1l	equ	0xFE1
  3081                           indf2	equ	0xFDF
  3082                           postinc2	equ	0xFDE
  3083                           postdec2	equ	0xFDD
  3084                           fsr2h	equ	0xFDA
  3085                           fsr2l	equ	0xFD9
  3086                           status	equ	0xFD8
  3087                           
  3088 ;; *************** function _SD_init *****************
  3089 ;; Defined at:
  3090 ;;		line 22 in file "SD_routines.c"
  3091 ;; Parameters:    Size  Location     Type
  3092 ;;		None
  3093 ;; Auto vars:     Size  Location     Type
  3094 ;;  retry           2   16[COMRAM] unsigned int 
  3095 ;;  response        1   15[COMRAM] unsigned char 
  3096 ;;  i               1   14[COMRAM] unsigned char 
  3097 ;;  SD_version      1   13[COMRAM] unsigned char 
  3098 ;; Return value:  Size  Location     Type
  3099 ;;                  1    wreg      unsigned char 
  3100 ;; Registers used:
  3101 ;;		wreg, status,2, status,0, cstack
  3102 ;; Tracked objects:
  3103 ;;		On entry : 0/0
  3104 ;;		On exit  : 0/0
  3105 ;;		Unchanged: 0/0
  3106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3108 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3110 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3111 ;;Total ram usage:        5 bytes
  3112 ;; Hardware stack levels used:    1
  3113 ;; Hardware stack levels required when called:    3
  3114 ;; This function calls:
  3115 ;;		_SD_sendCommand
  3116 ;;		_SPI_Send_8Bits
  3117 ;; This function is called by:
  3118 ;;		_main
  3119 ;; This function uses a non-reentrant model
  3120 ;;
  3121                           
  3122                           	psect	text10
  3123  00B63A                     __ptext10:
  3124                           	opt stack 0
  3125  00B63A                     _SD_init:
  3126                           	opt stack 27
  3127                           
  3128                           ;SD_routines.c: 24: unsigned char i, response, SD_version;
  3129                           ;SD_routines.c: 25: unsigned int retry=0 ;
  3130                           
  3131                           ;incstack = 0
  3132  00B63A  0E00               	movlw	0
  3133  00B63C  6E12               	movwf	SD_init@retry+1,c
  3134  00B63E  0E00               	movlw	0
  3135  00B640  6E11               	movwf	SD_init@retry,c
  3136                           
  3137                           ;SD_routines.c: 27: for(i=0;i<10;i++)
  3138  00B642  0E00               	movlw	0
  3139  00B644  6E0F               	movwf	SD_init@i,c
  3140  00B646  D004               	goto	L10
  3141  00B648                     l1485:
  3142                           
  3143                           ;SD_routines.c: 28: SPI_Send_8Bits(0xff);
  3144  00B648  0EFF               	movlw	255
  3145  00B64A  EC08  F059         	call	_SPI_Send_8Bits
  3146  00B64E  2A0F               	incf	SD_init@i,f,c
  3147  00B650                     L10:
  3148  00B650  0E09               	movlw	9
  3149  00B652  640F               	cpfsgt	SD_init@i,c
  3150  00B654  D7F9               	goto	l1485
  3151                           
  3152                           ;SD_routines.c: 30: (PORTC &= ~0x40);
  3153  00B656  9C82               	bcf	3970,6,c	;volatile
  3154  00B658                     l1493:
  3155                           
  3156                           ;SD_routines.c: 32: {
  3157                           ;SD_routines.c: 33: response = SD_sendCommand(0, 0);
  3158  00B658  0E00               	movlw	0
  3159  00B65A  6E06               	movwf	SD_sendCommand@arg,c
  3160  00B65C  0E00               	movlw	0
  3161  00B65E  6E07               	movwf	SD_sendCommand@arg+1,c
  3162  00B660  0E00               	movlw	0
  3163  00B662  6E08               	movwf	SD_sendCommand@arg+2,c
  3164  00B664  0E00               	movlw	0
  3165  00B666  6E09               	movwf	SD_sendCommand@arg+3,c
  3166  00B668  0E00               	movlw	0
  3167  00B66A  EC6E  F059         	call	_SD_sendCommand
  3168  00B66E  6E10               	movwf	SD_init@response,c
  3169                           
  3170                           ;SD_routines.c: 34: retry++;
  3171  00B670  4A11               	infsnz	SD_init@retry,f,c
  3172  00B672  2A12               	incf	SD_init@retry+1,f,c
  3173                           
  3174                           ;SD_routines.c: 35: if(retry>0x20)
  3175  00B674  0E21               	movlw	33
  3176  00B676  5C11               	subwf	SD_init@retry,w,c
  3177  00B678  0E00               	movlw	0
  3178  00B67A  5812               	subwfb	SD_init@retry+1,w,c
  3179  00B67C  A0D8               	btfss	status,0,c
  3180  00B67E  D002               	goto	l1503
  3181                           
  3182                           ;SD_routines.c: 36: return 1;
  3183  00B680  0E01               	movlw	1
  3184  00B682  D081               	goto	l182
  3185  00B684                     l1503:
  3186                           
  3187                           ;SD_routines.c: 37: }while(response != 0x01);
  3188  00B684  0410               	decf	SD_init@response,w,c
  3189  00B686  A4D8               	btfss	status,2,c
  3190  00B688  D7E7               	goto	l1493
  3191                           
  3192                           ;SD_routines.c: 39: (PORTC |= 0x40);
  3193  00B68A  8C82               	bsf	3970,6,c	;volatile
  3194                           
  3195                           ;SD_routines.c: 40: SPI_Send_8Bits(0xff);
  3196  00B68C  0EFF               	movlw	255
  3197  00B68E  EC08  F059         	call	_SPI_Send_8Bits
  3198                           
  3199                           ;SD_routines.c: 41: SPI_Send_8Bits(0xff);
  3200  00B692  0EFF               	movlw	255
  3201  00B694  EC08  F059         	call	_SPI_Send_8Bits
  3202                           
  3203                           ;SD_routines.c: 43: retry = 0;
  3204  00B698  0E00               	movlw	0
  3205  00B69A  6E12               	movwf	SD_init@retry+1,c
  3206  00B69C  0E00               	movlw	0
  3207  00B69E  6E11               	movwf	SD_init@retry,c
  3208                           
  3209                           ;SD_routines.c: 45: SD_version = 2;
  3210  00B6A0  0E02               	movlw	2
  3211  00B6A2  6E0E               	movwf	SD_init@SD_version,c
  3212  00B6A4                     l1515:
  3213                           
  3214                           ;SD_routines.c: 48: {
  3215                           ;SD_routines.c: 49: response = SD_sendCommand(8,0x000001AA);
  3216  00B6A4  0EAA               	movlw	170
  3217  00B6A6  6E06               	movwf	SD_sendCommand@arg,c
  3218  00B6A8  0E01               	movlw	1
  3219  00B6AA  6E07               	movwf	SD_sendCommand@arg+1,c
  3220  00B6AC  0E00               	movlw	0
  3221  00B6AE  6E08               	movwf	SD_sendCommand@arg+2,c
  3222  00B6B0  0E00               	movlw	0
  3223  00B6B2  6E09               	movwf	SD_sendCommand@arg+3,c
  3224  00B6B4  0E08               	movlw	8
  3225  00B6B6  EC6E  F059         	call	_SD_sendCommand
  3226  00B6BA  6E10               	movwf	SD_init@response,c
  3227                           
  3228                           ;SD_routines.c: 50: retry++;
  3229  00B6BC  4A11               	infsnz	SD_init@retry,f,c
  3230  00B6BE  2A12               	incf	SD_init@retry+1,f,c
  3231                           
  3232                           ;SD_routines.c: 51: if(retry>0xfe)
  3233  00B6C0  0EFF               	movlw	255
  3234  00B6C2  5C11               	subwf	SD_init@retry,w,c
  3235  00B6C4  0E00               	movlw	0
  3236  00B6C6  5812               	subwfb	SD_init@retry+1,w,c
  3237  00B6C8  A0D8               	btfss	status,0,c
  3238  00B6CA  D005               	goto	l1523
  3239                           
  3240                           ;SD_routines.c: 52: {
  3241                           ;SD_routines.c: 54: SD_version = 1;
  3242  00B6CC  0E01               	movlw	1
  3243  00B6CE  6E0E               	movwf	SD_init@SD_version,c
  3244                           
  3245                           ;SD_routines.c: 55: cardType = 1;
  3246  00B6D0  0E01               	movlw	1
  3247  00B6D2  6E78               	movwf	_cardType,c	;volatile
  3248                           
  3249                           ;SD_routines.c: 56: break;
  3250  00B6D4  D003               	goto	l1525
  3251  00B6D6                     l1523:
  3252                           
  3253                           ;SD_routines.c: 57: }
  3254                           ;SD_routines.c: 59: }while(response != 0x01);
  3255  00B6D6  0410               	decf	SD_init@response,w,c
  3256  00B6D8  A4D8               	btfss	status,2,c
  3257  00B6DA  D7E4               	goto	l1515
  3258  00B6DC                     l1525:
  3259                           
  3260                           ;SD_routines.c: 61: retry = 0;
  3261  00B6DC  0E00               	movlw	0
  3262  00B6DE  6E12               	movwf	SD_init@retry+1,c
  3263  00B6E0  0E00               	movlw	0
  3264  00B6E2  6E11               	movwf	SD_init@retry,c
  3265  00B6E4                     l1527:
  3266                           
  3267                           ;SD_routines.c: 64: {
  3268                           ;SD_routines.c: 65: response = SD_sendCommand(55,0);
  3269  00B6E4  0E00               	movlw	0
  3270  00B6E6  6E06               	movwf	SD_sendCommand@arg,c
  3271  00B6E8  0E00               	movlw	0
  3272  00B6EA  6E07               	movwf	SD_sendCommand@arg+1,c
  3273  00B6EC  0E00               	movlw	0
  3274  00B6EE  6E08               	movwf	SD_sendCommand@arg+2,c
  3275  00B6F0  0E00               	movlw	0
  3276  00B6F2  6E09               	movwf	SD_sendCommand@arg+3,c
  3277  00B6F4  0E37               	movlw	55
  3278  00B6F6  EC6E  F059         	call	_SD_sendCommand
  3279  00B6FA  6E10               	movwf	SD_init@response,c
  3280                           
  3281                           ;SD_routines.c: 66: response = SD_sendCommand(41,0x40000000);
  3282  00B6FC  0E00               	movlw	0
  3283  00B6FE  6E06               	movwf	SD_sendCommand@arg,c
  3284  00B700  0E00               	movlw	0
  3285  00B702  6E07               	movwf	SD_sendCommand@arg+1,c
  3286  00B704  0E00               	movlw	0
  3287  00B706  6E08               	movwf	SD_sendCommand@arg+2,c
  3288  00B708  0E40               	movlw	64
  3289  00B70A  6E09               	movwf	SD_sendCommand@arg+3,c
  3290  00B70C  0E29               	movlw	41
  3291  00B70E  EC6E  F059         	call	_SD_sendCommand
  3292  00B712  6E10               	movwf	SD_init@response,c
  3293                           
  3294                           ;SD_routines.c: 68: retry++;
  3295  00B714  4A11               	infsnz	SD_init@retry,f,c
  3296  00B716  2A12               	incf	SD_init@retry+1,f,c
  3297                           
  3298                           ;SD_routines.c: 69: if(retry>0xfe)
  3299  00B718  0EFF               	movlw	255
  3300  00B71A  5C11               	subwf	SD_init@retry,w,c
  3301  00B71C  0E00               	movlw	0
  3302  00B71E  5812               	subwfb	SD_init@retry+1,w,c
  3303  00B720  A0D8               	btfss	status,0,c
  3304  00B722  D002               	goto	l1539
  3305                           
  3306                           ;SD_routines.c: 70: {
  3307                           ;SD_routines.c: 72: return 2;
  3308  00B724  0E02               	movlw	2
  3309  00B726  D02F               	goto	l182
  3310  00B728                     l1539:
  3311                           
  3312                           ;SD_routines.c: 73: }
  3313                           ;SD_routines.c: 75: }while(response != 0x04);
  3314  00B728  5010               	movf	SD_init@response,w,c
  3315  00B72A  0A04               	xorlw	4
  3316  00B72C  A4D8               	btfss	status,2,c
  3317  00B72E  D7DA               	goto	l1527
  3318                           
  3319                           ;SD_routines.c: 77: retry = 0;
  3320  00B730  0E00               	movlw	0
  3321  00B732  6E12               	movwf	SD_init@retry+1,c
  3322  00B734  0E00               	movlw	0
  3323  00B736  6E11               	movwf	SD_init@retry,c
  3324                           
  3325                           ;SD_routines.c: 78: SDHC_flag = 0;
  3326  00B738  0E00               	movlw	0
  3327  00B73A  6E77               	movwf	_SDHC_flag,c	;volatile
  3328                           
  3329                           ;SD_routines.c: 80: if (SD_version == 2)
  3330  00B73C  500E               	movf	SD_init@SD_version,w,c
  3331  00B73E  0A02               	xorlw	2
  3332  00B740  A4D8               	btfss	status,2,c
  3333  00B742  D020               	goto	l1559
  3334  00B744                     l1545:
  3335                           
  3336                           ;SD_routines.c: 83: {
  3337                           ;SD_routines.c: 84: response = SD_sendCommand(58,0);
  3338  00B744  0E00               	movlw	0
  3339  00B746  6E06               	movwf	SD_sendCommand@arg,c
  3340  00B748  0E00               	movlw	0
  3341  00B74A  6E07               	movwf	SD_sendCommand@arg+1,c
  3342  00B74C  0E00               	movlw	0
  3343  00B74E  6E08               	movwf	SD_sendCommand@arg+2,c
  3344  00B750  0E00               	movlw	0
  3345  00B752  6E09               	movwf	SD_sendCommand@arg+3,c
  3346  00B754  0E3A               	movlw	58
  3347  00B756  EC6E  F059         	call	_SD_sendCommand
  3348  00B75A  6E10               	movwf	SD_init@response,c
  3349                           
  3350                           ;SD_routines.c: 85: retry++;
  3351  00B75C  4A11               	infsnz	SD_init@retry,f,c
  3352  00B75E  2A12               	incf	SD_init@retry+1,f,c
  3353                           
  3354                           ;SD_routines.c: 86: if(retry>0xfe)
  3355  00B760  0EFF               	movlw	255
  3356  00B762  5C11               	subwf	SD_init@retry,w,c
  3357  00B764  0E00               	movlw	0
  3358  00B766  5812               	subwfb	SD_init@retry+1,w,c
  3359  00B768  A0D8               	btfss	status,0,c
  3360  00B76A  D003               	goto	l192
  3361                           
  3362                           ;SD_routines.c: 87: {
  3363                           ;SD_routines.c: 89: cardType = 0;
  3364  00B76C  0E00               	movlw	0
  3365  00B76E  6E78               	movwf	_cardType,c	;volatile
  3366                           
  3367                           ;SD_routines.c: 90: break;
  3368  00B770  D002               	goto	l1553
  3369  00B772                     l192:
  3370                           
  3371                           ;SD_routines.c: 91: }
  3372                           ;SD_routines.c: 93: }while(response != 0x00);
  3373  00B772  6610               	tstfsz	SD_init@response,c
  3374  00B774  D7E7               	goto	l1545
  3375  00B776                     l1553:
  3376                           
  3377                           ;SD_routines.c: 95: if(SDHC_flag == 1) cardType = 2;
  3378  00B776  0477               	decf	_SDHC_flag,w,c	;volatile
  3379  00B778  A4D8               	btfss	status,2,c
  3380  00B77A  D002               	goto	l1557
  3381  00B77C  0E02               	movlw	2
  3382  00B77E  D001               	goto	L9
  3383  00B780                     l1557:
  3384                           
  3385                           ;SD_routines.c: 96: else cardType = 3;
  3386  00B780  0E03               	movlw	3
  3387  00B782                     L9:
  3388  00B782  6E78               	movwf	_cardType,c	;volatile
  3389  00B784                     l1559:
  3390                           
  3391                           ;SD_routines.c: 97: }
  3392                           ;SD_routines.c: 103: return 0;
  3393  00B784  0E00               	movlw	0
  3394  00B786                     l182:
  3395  00B786  0012               	return	
  3396  00B788                     __end_of_SD_init:
  3397                           	opt stack 0
  3398                           tblptru	equ	0xFF8
  3399                           tblptrh	equ	0xFF7
  3400                           tblptrl	equ	0xFF6
  3401                           tablat	equ	0xFF5
  3402                           postinc0	equ	0xFEE
  3403                           wreg	equ	0xFE8
  3404                           postdec1	equ	0xFE5
  3405                           fsr1h	equ	0xFE2
  3406                           fsr1l	equ	0xFE1
  3407                           indf2	equ	0xFDF
  3408                           postinc2	equ	0xFDE
  3409                           postdec2	equ	0xFDD
  3410                           fsr2h	equ	0xFDA
  3411                           fsr2l	equ	0xFD9
  3412                           status	equ	0xFD8
  3413                           
  3414 ;; *************** function _SD_erase *****************
  3415 ;; Defined at:
  3416 ;;		line 178 in file "SD_routines.c"
  3417 ;; Parameters:    Size  Location     Type
  3418 ;;  startBlock      4   13[COMRAM] unsigned long 
  3419 ;;  totalBlocks     4   17[COMRAM] unsigned long 
  3420 ;; Auto vars:     Size  Location     Type
  3421 ;;  response        1   25[COMRAM] unsigned char 
  3422 ;; Return value:  Size  Location     Type
  3423 ;;                  1    wreg      unsigned char 
  3424 ;; Registers used:
  3425 ;;		wreg, status,2, status,0, cstack
  3426 ;; Tracked objects:
  3427 ;;		On entry : 0/0
  3428 ;;		On exit  : 0/0
  3429 ;;		Unchanged: 0/0
  3430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3431 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3432 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3433 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3434 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3435 ;;Total ram usage:       13 bytes
  3436 ;; Hardware stack levels used:    1
  3437 ;; Hardware stack levels required when called:    3
  3438 ;; This function calls:
  3439 ;;		_SD_sendCommand
  3440 ;; This function is called by:
  3441 ;;		_main
  3442 ;; This function uses a non-reentrant model
  3443 ;;
  3444                           
  3445                           	psect	text11
  3446  00B35C                     __ptext11:
  3447                           	opt stack 0
  3448  00B35C                     _SD_erase:
  3449                           	opt stack 27
  3450                           
  3451                           ;SD_routines.c: 180: unsigned char response;
  3452                           ;SD_routines.c: 182: response = SD_sendCommand(32, startBlock);
  3453                           
  3454                           ;incstack = 0
  3455  00B35C  C00E  F006         	movff	SD_erase@startBlock,SD_sendCommand@arg
  3456  00B360  C00F  F007         	movff	SD_erase@startBlock+1,SD_sendCommand@arg+1
  3457  00B364  C010  F008         	movff	SD_erase@startBlock+2,SD_sendCommand@arg+2
  3458  00B368  C011  F009         	movff	SD_erase@startBlock+3,SD_sendCommand@arg+3
  3459  00B36C  0E20               	movlw	32
  3460  00B36E  EC6E  F059         	call	_SD_sendCommand
  3461  00B372  6E1A               	movwf	SD_erase@response,c
  3462                           
  3463                           ;SD_routines.c: 183: if(response != 0x00)
  3464  00B374  501A               	movf	SD_erase@response,w,c
  3465  00B376  A4D8               	btfss	status,2,c
  3466  00B378  D02E               	goto	u720
  3467                           
  3468                           ;SD_routines.c: 186: response = SD_sendCommand(33,(startBlock + totalBlocks - 1));
  3469                           
  3470                           ;SD_routines.c: 184: return response;
  3471  00B37A  5012               	movf	SD_erase@totalBlocks,w,c
  3472  00B37C  240E               	addwf	SD_erase@startBlock,w,c
  3473  00B37E  6E16               	movwf	??_SD_erase& (0+255),c
  3474  00B380  5013               	movf	SD_erase@totalBlocks+1,w,c
  3475  00B382  200F               	addwfc	SD_erase@startBlock+1,w,c
  3476  00B384  6E17               	movwf	(??_SD_erase+1)& (0+255),c
  3477  00B386  5014               	movf	SD_erase@totalBlocks+2,w,c
  3478  00B388  2010               	addwfc	SD_erase@startBlock+2,w,c
  3479  00B38A  6E18               	movwf	(??_SD_erase+2)& (0+255),c
  3480  00B38C  5015               	movf	SD_erase@totalBlocks+3,w,c
  3481  00B38E  2011               	addwfc	SD_erase@startBlock+3,w,c
  3482  00B390  6E19               	movwf	(??_SD_erase+3)& (0+255),c
  3483  00B392  0EFF               	movlw	255
  3484  00B394  2416               	addwf	??_SD_erase,w,c
  3485  00B396  6E06               	movwf	SD_sendCommand@arg,c
  3486  00B398  0EFF               	movlw	255
  3487  00B39A  2017               	addwfc	??_SD_erase+1,w,c
  3488  00B39C  6E07               	movwf	SD_sendCommand@arg+1,c
  3489  00B39E  0EFF               	movlw	255
  3490  00B3A0  2018               	addwfc	??_SD_erase+2,w,c
  3491  00B3A2  6E08               	movwf	SD_sendCommand@arg+2,c
  3492  00B3A4  0EFF               	movlw	255
  3493  00B3A6  2019               	addwfc	??_SD_erase+3,w,c
  3494  00B3A8  6E09               	movwf	SD_sendCommand@arg+3,c
  3495  00B3AA  0E21               	movlw	33
  3496  00B3AC  EC6E  F059         	call	_SD_sendCommand
  3497  00B3B0  6E1A               	movwf	SD_erase@response,c
  3498                           
  3499                           ;SD_routines.c: 187: if(response != 0x00)
  3500  00B3B2  501A               	movf	SD_erase@response,w,c
  3501  00B3B4  A4D8               	btfss	status,2,c
  3502  00B3B6  D00F               	goto	u720
  3503                           
  3504                           ;SD_routines.c: 190: response = SD_sendCommand(38, 0);
  3505                           
  3506                           ;SD_routines.c: 188: return response;
  3507  00B3B8  0E00               	movlw	0
  3508  00B3BA  6E06               	movwf	SD_sendCommand@arg,c
  3509  00B3BC  0E00               	movlw	0
  3510  00B3BE  6E07               	movwf	SD_sendCommand@arg+1,c
  3511  00B3C0  0E00               	movlw	0
  3512  00B3C2  6E08               	movwf	SD_sendCommand@arg+2,c
  3513  00B3C4  0E00               	movlw	0
  3514  00B3C6  6E09               	movwf	SD_sendCommand@arg+3,c
  3515  00B3C8  0E26               	movlw	38
  3516  00B3CA  EC6E  F059         	call	_SD_sendCommand
  3517  00B3CE  6E1A               	movwf	SD_erase@response,c
  3518                           
  3519                           ;SD_routines.c: 191: if(response != 0x00)
  3520  00B3D0  501A               	movf	SD_erase@response,w,c
  3521  00B3D2  B4D8               	btfsc	status,2,c
  3522  00B3D4  D002               	goto	l1663
  3523  00B3D6                     u720:
  3524                           
  3525                           ;SD_routines.c: 192: return response;
  3526  00B3D6  501A               	movf	SD_erase@response,w,c
  3527  00B3D8  D001               	goto	l210
  3528  00B3DA                     l1663:
  3529                           
  3530                           ;SD_routines.c: 194: return 0;
  3531  00B3DA  0E00               	movlw	0
  3532  00B3DC                     l210:
  3533  00B3DC  0012               	return	
  3534  00B3DE                     __end_of_SD_erase:
  3535                           	opt stack 0
  3536                           tblptru	equ	0xFF8
  3537                           tblptrh	equ	0xFF7
  3538                           tblptrl	equ	0xFF6
  3539                           tablat	equ	0xFF5
  3540                           postinc0	equ	0xFEE
  3541                           wreg	equ	0xFE8
  3542                           postdec1	equ	0xFE5
  3543                           fsr1h	equ	0xFE2
  3544                           fsr1l	equ	0xFE1
  3545                           indf2	equ	0xFDF
  3546                           postinc2	equ	0xFDE
  3547                           postdec2	equ	0xFDD
  3548                           fsr2h	equ	0xFDA
  3549                           fsr2l	equ	0xFD9
  3550                           status	equ	0xFD8
  3551                           
  3552 ;; *************** function _SD_sendCommand *****************
  3553 ;; Defined at:
  3554 ;;		line 112 in file "SD_routines.c"
  3555 ;; Parameters:    Size  Location     Type
  3556 ;;  cmd             1    wreg     unsigned char 
  3557 ;;  arg             4    5[COMRAM] unsigned long 
  3558 ;; Auto vars:     Size  Location     Type
  3559 ;;  cmd             1   11[COMRAM] unsigned char 
  3560 ;;  response        1   12[COMRAM] unsigned char 
  3561 ;;  status          1   10[COMRAM] unsigned char 
  3562 ;;  retry           1    9[COMRAM] unsigned char 
  3563 ;; Return value:  Size  Location     Type
  3564 ;;                  1    wreg      unsigned char 
  3565 ;; Registers used:
  3566 ;;		wreg, status,2, status,0, cstack
  3567 ;; Tracked objects:
  3568 ;;		On entry : 0/0
  3569 ;;		On exit  : 0/0
  3570 ;;		Unchanged: 0/0
  3571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3572 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3573 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3575 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3576 ;;Total ram usage:        8 bytes
  3577 ;; Hardware stack levels used:    1
  3578 ;; Hardware stack levels required when called:    2
  3579 ;; This function calls:
  3580 ;;		_SPI_Read_8Bits
  3581 ;;		_SPI_Send_8Bits
  3582 ;; This function is called by:
  3583 ;;		_SD_init
  3584 ;;		_SD_erase
  3585 ;;		_SD_readSingleBlock
  3586 ;;		_SD_writeSingleBlock
  3587 ;; This function uses a non-reentrant model
  3588 ;;
  3589                           
  3590                           	psect	text12
  3591  00B2DC                     __ptext12:
  3592                           	opt stack 0
  3593  00B2DC                     _SD_sendCommand:
  3594                           	opt stack 25
  3595                           
  3596                           ;incstack = 0
  3597                           ;SD_sendCommand@cmd stored from wreg
  3598  00B2DC  6E0C               	movwf	SD_sendCommand@cmd,c
  3599                           
  3600                           ;SD_routines.c: 114: unsigned char response, retry=0, status;
  3601  00B2DE  0E00               	movlw	0
  3602  00B2E0  6E0A               	movwf	SD_sendCommand@retry,c
  3603                           
  3604                           ;SD_routines.c: 132: (PORTC &= ~0x40);
  3605  00B2E2  9C82               	bcf	3970,6,c	;volatile
  3606                           
  3607                           ;SD_routines.c: 134: SPI_Send_8Bits(cmd | 0x40);
  3608  00B2E4  500C               	movf	SD_sendCommand@cmd,w,c
  3609  00B2E6  0940               	iorlw	64
  3610  00B2E8  EC08  F059         	call	_SPI_Send_8Bits
  3611                           
  3612                           ;SD_routines.c: 135: SPI_Send_8Bits(arg>>24);
  3613  00B2EC  5009               	movf	SD_sendCommand@arg+3,w,c
  3614  00B2EE  EC08  F059         	call	_SPI_Send_8Bits
  3615                           
  3616                           ;SD_routines.c: 136: SPI_Send_8Bits(arg>>16);
  3617  00B2F2  5008               	movf	SD_sendCommand@arg+2,w,c
  3618  00B2F4  EC08  F059         	call	_SPI_Send_8Bits
  3619                           
  3620                           ;SD_routines.c: 137: SPI_Send_8Bits(arg>>8);
  3621  00B2F8  5007               	movf	SD_sendCommand@arg+1,w,c
  3622  00B2FA  EC08  F059         	call	_SPI_Send_8Bits
  3623                           
  3624                           ;SD_routines.c: 138: SPI_Send_8Bits(arg);
  3625  00B2FE  5006               	movf	SD_sendCommand@arg,w,c
  3626  00B300  EC08  F059         	call	_SPI_Send_8Bits
  3627                           
  3628                           ;SD_routines.c: 140: if(cmd == 8)
  3629  00B304  500C               	movf	SD_sendCommand@cmd,w,c
  3630  00B306  0A08               	xorlw	8
  3631  00B308  A4D8               	btfss	status,2,c
  3632  00B30A  D004               	goto	l1179
  3633                           
  3634                           ;SD_routines.c: 141: SPI_Send_8Bits(0x87);
  3635  00B30C  0E87               	movlw	135
  3636  00B30E  EC08  F059         	call	_SPI_Send_8Bits
  3637  00B312  D003               	goto	l199
  3638  00B314                     l1179:
  3639                           
  3640                           ;SD_routines.c: 142: else
  3641                           ;SD_routines.c: 143: SPI_Send_8Bits(0x95);
  3642  00B314  0E95               	movlw	149
  3643  00B316  EC08  F059         	call	_SPI_Send_8Bits
  3644  00B31A                     l199:
  3645                           
  3646                           ;SD_routines.c: 145: SPI_Read_8Bits();
  3647  00B31A  EC3E  F058         	call	_SPI_Read_8Bits	;wreg free
  3648                           
  3649                           ;SD_routines.c: 149: response = SPI_Read_8Bits();
  3650                           
  3651                           ;SD_routines.c: 148: do{
  3652  00B31E  EC3E  F058         	call	_SPI_Read_8Bits	;wreg free
  3653  00B322  6E0D               	movwf	SD_sendCommand@response,c
  3654                           
  3655                           ;SD_routines.c: 151: if(retry++ > 0xfe) break;
  3656  00B324  2A0A               	incf	SD_sendCommand@retry,f,c
  3657                           
  3658                           ;SD_routines.c: 155: if(response == 0x00 && cmd == 58)
  3659                           
  3660                           ;SD_routines.c: 152: }while(response == 0xff);
  3661  00B326  660D               	tstfsz	SD_sendCommand@response,c
  3662  00B328  D016               	goto	l1201
  3663  00B32A  500C               	movf	SD_sendCommand@cmd,w,c
  3664  00B32C  0A3A               	xorlw	58
  3665  00B32E  A4D8               	btfss	status,2,c
  3666  00B330  D012               	goto	l1201
  3667                           
  3668                           ;SD_routines.c: 156: {
  3669                           ;SD_routines.c: 157: status = SPI_Read_8Bits() & 0x40;
  3670  00B332  EC3E  F058         	call	_SPI_Read_8Bits	;wreg free
  3671  00B336  0B40               	andlw	64
  3672  00B338  6E0B               	movwf	SD_sendCommand@status,c
  3673                           
  3674                           ;SD_routines.c: 158: if(status == 0x40) SDHC_flag = 1;
  3675  00B33A  500B               	movf	SD_sendCommand@status,w,c
  3676  00B33C  0A40               	xorlw	64
  3677  00B33E  A4D8               	btfss	status,2,c
  3678  00B340  D002               	goto	l1193
  3679  00B342  0E01               	movlw	1
  3680  00B344  D001               	goto	L11
  3681  00B346                     l1193:
  3682                           
  3683                           ;SD_routines.c: 159: else SDHC_flag = 0;
  3684  00B346  0E00               	movlw	0
  3685  00B348                     L11:
  3686  00B348  6E77               	movwf	_SDHC_flag,c	;volatile
  3687                           
  3688                           ;SD_routines.c: 161: SPI_Read_8Bits();
  3689  00B34A  EC3E  F058         	call	_SPI_Read_8Bits	;wreg free
  3690                           
  3691                           ;SD_routines.c: 162: SPI_Read_8Bits();
  3692  00B34E  EC3E  F058         	call	_SPI_Read_8Bits	;wreg free
  3693                           
  3694                           ;SD_routines.c: 163: SPI_Read_8Bits();
  3695  00B352  EC3E  F058         	call	_SPI_Read_8Bits	;wreg free
  3696  00B356                     l1201:
  3697                           
  3698                           ;SD_routines.c: 164: }
  3699                           ;SD_routines.c: 168: (PORTC |= 0x40);
  3700  00B356  8C82               	bsf	3970,6,c	;volatile
  3701                           
  3702                           ;SD_routines.c: 169: return response;
  3703  00B358  500D               	movf	SD_sendCommand@response,w,c
  3704  00B35A  0012               	return	
  3705  00B35C                     __end_of_SD_sendCommand:
  3706                           	opt stack 0
  3707                           tblptru	equ	0xFF8
  3708                           tblptrh	equ	0xFF7
  3709                           tblptrl	equ	0xFF6
  3710                           tablat	equ	0xFF5
  3711                           postinc0	equ	0xFEE
  3712                           wreg	equ	0xFE8
  3713                           postdec1	equ	0xFE5
  3714                           fsr1h	equ	0xFE2
  3715                           fsr1l	equ	0xFE1
  3716                           indf2	equ	0xFDF
  3717                           postinc2	equ	0xFDE
  3718                           postdec2	equ	0xFDD
  3719                           fsr2h	equ	0xFDA
  3720                           fsr2l	equ	0xFD9
  3721                           status	equ	0xFD8
  3722                           
  3723 ;; *************** function _SPI_Send_8Bits *****************
  3724 ;; Defined at:
  3725 ;;		line 60 in file "SPI.c"
  3726 ;; Parameters:    Size  Location     Type
  3727 ;;  data            1    wreg     unsigned char 
  3728 ;; Auto vars:     Size  Location     Type
  3729 ;;  data            1    2[COMRAM] unsigned char 
  3730 ;;  i               1    4[COMRAM] unsigned char 
  3731 ;;  temp            1    3[COMRAM] unsigned char 
  3732 ;; Return value:  Size  Location     Type
  3733 ;;		None               void
  3734 ;; Registers used:
  3735 ;;		wreg, status,2, status,0, cstack
  3736 ;; Tracked objects:
  3737 ;;		On entry : 0/0
  3738 ;;		On exit  : 0/0
  3739 ;;		Unchanged: 0/0
  3740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3742 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3744 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3745 ;;Total ram usage:        3 bytes
  3746 ;; Hardware stack levels used:    1
  3747 ;; Hardware stack levels required when called:    1
  3748 ;; This function calls:
  3749 ;;		_SPI_delay
  3750 ;; This function is called by:
  3751 ;;		_SD_init
  3752 ;;		_SD_sendCommand
  3753 ;;		_SD_writeSingleBlock
  3754 ;; This function uses a non-reentrant model
  3755 ;;
  3756                           
  3757                           	psect	text13
  3758  00B210                     __ptext13:
  3759                           	opt stack 0
  3760  00B210                     _SPI_Send_8Bits:
  3761                           	opt stack 26
  3762                           
  3763                           ;incstack = 0
  3764                           ;SPI_Send_8Bits@data stored from wreg
  3765  00B210  6E03               	movwf	SPI_Send_8Bits@data,c
  3766                           
  3767                           ;SPI.c: 62: unsigned char temp,i;
  3768                           ;SPI.c: 63: temp = data;
  3769  00B212  C003  F004         	movff	SPI_Send_8Bits@data,SPI_Send_8Bits@temp
  3770                           
  3771                           ;SPI.c: 64: for(i=0;i<8;i++)
  3772  00B216  0E00               	movlw	0
  3773  00B218  6E05               	movwf	SPI_Send_8Bits@i,c
  3774  00B21A  D023               	goto	L12
  3775  00B21C                     l1133:
  3776                           
  3777                           ;SPI.c: 65: {
  3778                           ;SPI.c: 66: (PORTC &= ~0x08);
  3779  00B21C  9682               	bcf	3970,3,c	;volatile
  3780                           
  3781                           ;SPI.c: 67: SPI_delay(1);
  3782  00B21E  0E00               	movlw	0
  3783  00B220  6E02               	movwf	SPI_delay@x+1,c
  3784  00B222  0E01               	movlw	1
  3785  00B224  6E01               	movwf	SPI_delay@x,c
  3786  00B226  ECCB  F057         	call	_SPI_delay	;wreg free
  3787                           
  3788                           ;SPI.c: 69: if(temp&0x80)
  3789  00B22A  AE04               	btfss	SPI_Send_8Bits@temp,7,c
  3790  00B22C  D002               	goto	l1141
  3791                           
  3792                           ;SPI.c: 70: (PORTC |= 0x20);
  3793  00B22E  8A82               	bsf	3970,5,c	;volatile
  3794  00B230  D001               	goto	l1143
  3795  00B232                     l1141:
  3796                           
  3797                           ;SPI.c: 71: else
  3798                           ;SPI.c: 72: (PORTC &= ~0x20);
  3799  00B232  9A82               	bcf	3970,5,c	;volatile
  3800  00B234                     l1143:
  3801                           
  3802                           ;SPI.c: 74: temp = temp<<1;
  3803  00B234  5004               	movf	SPI_Send_8Bits@temp,w,c
  3804  00B236  2404               	addwf	SPI_Send_8Bits@temp,w,c
  3805  00B238  6E04               	movwf	SPI_Send_8Bits@temp,c
  3806                           
  3807                           ;SPI.c: 75: SPI_delay(1);
  3808  00B23A  0E00               	movlw	0
  3809  00B23C  6E02               	movwf	SPI_delay@x+1,c
  3810  00B23E  0E01               	movlw	1
  3811  00B240  6E01               	movwf	SPI_delay@x,c
  3812  00B242  ECCB  F057         	call	_SPI_delay	;wreg free
  3813                           
  3814                           ;SPI.c: 76: (PORTC |= 0x08);
  3815  00B246  8682               	bsf	3970,3,c	;volatile
  3816                           
  3817                           ;SPI.c: 77: SPI_delay(1);
  3818  00B248  0E00               	movlw	0
  3819  00B24A  6E02               	movwf	SPI_delay@x+1,c
  3820  00B24C  0E01               	movlw	1
  3821  00B24E  6E01               	movwf	SPI_delay@x,c
  3822  00B250  ECCB  F057         	call	_SPI_delay	;wreg free
  3823                           
  3824                           ;SPI.c: 78: SPI_delay(1);
  3825  00B254  0E00               	movlw	0
  3826  00B256  6E02               	movwf	SPI_delay@x+1,c
  3827  00B258  0E01               	movlw	1
  3828  00B25A  6E01               	movwf	SPI_delay@x,c
  3829  00B25C  ECCB  F057         	call	_SPI_delay	;wreg free
  3830  00B260  2A05               	incf	SPI_Send_8Bits@i,f,c
  3831  00B262                     L12:
  3832  00B262  0E07               	movlw	7
  3833  00B264  6405               	cpfsgt	SPI_Send_8Bits@i,c
  3834  00B266  D7DA               	goto	l1133
  3835  00B268  0012               	return	
  3836  00B26A                     __end_of_SPI_Send_8Bits:
  3837                           	opt stack 0
  3838                           tblptru	equ	0xFF8
  3839                           tblptrh	equ	0xFF7
  3840                           tblptrl	equ	0xFF6
  3841                           tablat	equ	0xFF5
  3842                           postinc0	equ	0xFEE
  3843                           wreg	equ	0xFE8
  3844                           postdec1	equ	0xFE5
  3845                           fsr1h	equ	0xFE2
  3846                           fsr1l	equ	0xFE1
  3847                           indf2	equ	0xFDF
  3848                           postinc2	equ	0xFDE
  3849                           postdec2	equ	0xFDD
  3850                           fsr2h	equ	0xFDA
  3851                           fsr2l	equ	0xFD9
  3852                           status	equ	0xFD8
  3853                           
  3854 ;; *************** function _SPI_Read_8Bits *****************
  3855 ;; Defined at:
  3856 ;;		line 39 in file "SPI.c"
  3857 ;; Parameters:    Size  Location     Type
  3858 ;;		None
  3859 ;; Auto vars:     Size  Location     Type
  3860 ;;  temp            1    3[COMRAM] unsigned char 
  3861 ;;  i               1    2[COMRAM] unsigned char 
  3862 ;; Return value:  Size  Location     Type
  3863 ;;                  1    wreg      unsigned char 
  3864 ;; Registers used:
  3865 ;;		wreg, status,2, status,0, cstack
  3866 ;; Tracked objects:
  3867 ;;		On entry : 0/0
  3868 ;;		On exit  : 0/0
  3869 ;;		Unchanged: 0/0
  3870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3871 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3872 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3874 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3875 ;;Total ram usage:        2 bytes
  3876 ;; Hardware stack levels used:    1
  3877 ;; Hardware stack levels required when called:    1
  3878 ;; This function calls:
  3879 ;;		_SPI_delay
  3880 ;; This function is called by:
  3881 ;;		_SD_sendCommand
  3882 ;;		_SD_readSingleBlock
  3883 ;;		_SD_writeSingleBlock
  3884 ;; This function uses a non-reentrant model
  3885 ;;
  3886                           
  3887                           	psect	text14
  3888  00B07C                     __ptext14:
  3889                           	opt stack 0
  3890  00B07C                     _SPI_Read_8Bits:
  3891                           	opt stack 26
  3892                           
  3893                           ;SPI.c: 41: unsigned char temp,i;
  3894                           ;SPI.c: 42: for(i=0;i<8;i++)
  3895                           
  3896                           ;incstack = 0
  3897  00B07C  0E00               	movlw	0
  3898  00B07E  6E03               	movwf	SPI_Read_8Bits@i,c
  3899  00B080  D01C               	goto	L13
  3900  00B082                     l1103:
  3901                           
  3902                           ;SPI.c: 43: {
  3903                           ;SPI.c: 44: (PORTC &= ~0x08);
  3904  00B082  9682               	bcf	3970,3,c	;volatile
  3905                           
  3906                           ;SPI.c: 45: SPI_delay(1);
  3907  00B084  0E00               	movlw	0
  3908  00B086  6E02               	movwf	SPI_delay@x+1,c
  3909  00B088  0E01               	movlw	1
  3910  00B08A  6E01               	movwf	SPI_delay@x,c
  3911  00B08C  ECCB  F057         	call	_SPI_delay	;wreg free
  3912                           
  3913                           ;SPI.c: 46: temp = temp<<1;
  3914  00B090  5004               	movf	SPI_Read_8Bits@temp,w,c
  3915  00B092  2404               	addwf	SPI_Read_8Bits@temp,w,c
  3916  00B094  6E04               	movwf	SPI_Read_8Bits@temp,c
  3917                           
  3918                           ;SPI.c: 47: if(PORTC & 0x10)
  3919  00B096  A882               	btfss	3970,4,c	;volatile
  3920  00B098  D002               	goto	l1113
  3921                           
  3922                           ;SPI.c: 48: temp = temp+1;
  3923  00B09A  2804               	incf	SPI_Read_8Bits@temp,w,c
  3924  00B09C  6E04               	movwf	SPI_Read_8Bits@temp,c
  3925  00B09E                     l1113:
  3926                           
  3927                           ;SPI.c: 52: (PORTC |= 0x08);
  3928  00B09E  8682               	bsf	3970,3,c	;volatile
  3929                           
  3930                           ;SPI.c: 53: SPI_delay(1);
  3931  00B0A0  0E00               	movlw	0
  3932  00B0A2  6E02               	movwf	SPI_delay@x+1,c
  3933  00B0A4  0E01               	movlw	1
  3934  00B0A6  6E01               	movwf	SPI_delay@x,c
  3935  00B0A8  ECCB  F057         	call	_SPI_delay	;wreg free
  3936                           
  3937                           ;SPI.c: 54: SPI_delay(1);
  3938  00B0AC  0E00               	movlw	0
  3939  00B0AE  6E02               	movwf	SPI_delay@x+1,c
  3940  00B0B0  0E01               	movlw	1
  3941  00B0B2  6E01               	movwf	SPI_delay@x,c
  3942  00B0B4  ECCB  F057         	call	_SPI_delay	;wreg free
  3943  00B0B8  2A03               	incf	SPI_Read_8Bits@i,f,c
  3944  00B0BA                     L13:
  3945  00B0BA  0E07               	movlw	7
  3946  00B0BC  6403               	cpfsgt	SPI_Read_8Bits@i,c
  3947  00B0BE  D7E1               	goto	l1103
  3948                           
  3949                           ;SPI.c: 56: }
  3950                           ;SPI.c: 57: return temp;
  3951  00B0C0  5004               	movf	SPI_Read_8Bits@temp,w,c
  3952  00B0C2  0012               	return	
  3953  00B0C4                     __end_of_SPI_Read_8Bits:
  3954                           	opt stack 0
  3955                           tblptru	equ	0xFF8
  3956                           tblptrh	equ	0xFF7
  3957                           tblptrl	equ	0xFF6
  3958                           tablat	equ	0xFF5
  3959                           postinc0	equ	0xFEE
  3960                           wreg	equ	0xFE8
  3961                           postdec1	equ	0xFE5
  3962                           fsr1h	equ	0xFE2
  3963                           fsr1l	equ	0xFE1
  3964                           indf2	equ	0xFDF
  3965                           postinc2	equ	0xFDE
  3966                           postdec2	equ	0xFDD
  3967                           fsr2h	equ	0xFDA
  3968                           fsr2l	equ	0xFD9
  3969                           status	equ	0xFD8
  3970                           
  3971 ;; *************** function _SPI_delay *****************
  3972 ;; Defined at:
  3973 ;;		line 28 in file "SPI.c"
  3974 ;; Parameters:    Size  Location     Type
  3975 ;;  x               2    0[COMRAM] unsigned int 
  3976 ;; Auto vars:     Size  Location     Type
  3977 ;;		None
  3978 ;; Return value:  Size  Location     Type
  3979 ;;		None               void
  3980 ;; Registers used:
  3981 ;;		wreg, status,2, status,0
  3982 ;; Tracked objects:
  3983 ;;		On entry : 0/0
  3984 ;;		On exit  : 0/0
  3985 ;;		Unchanged: 0/0
  3986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3987 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3988 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3990 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3991 ;;Total ram usage:        2 bytes
  3992 ;; Hardware stack levels used:    1
  3993 ;; This function calls:
  3994 ;;		Nothing
  3995 ;; This function is called by:
  3996 ;;		_SPI_Read_8Bits
  3997 ;;		_SPI_Send_8Bits
  3998 ;; This function uses a non-reentrant model
  3999 ;;
  4000                           
  4001                           	psect	text15
  4002  00AF96                     __ptext15:
  4003                           	opt stack 0
  4004  00AF96                     _SPI_delay:
  4005                           	opt stack 26
  4006  00AF96                     l1095:
  4007  00AF96  0601               	decf	SPI_delay@x,f,c
  4008  00AF98  A0D8               	btfss	status,0,c
  4009  00AF9A  0602               	decf	SPI_delay@x+1,f,c
  4010  00AF9C  2801               	incf	SPI_delay@x& (0+255),w,c
  4011  00AF9E  B4D8               	btfsc	status,2,c
  4012  00AFA0  2802               	incf	(SPI_delay@x+1)& (0+255),w,c
  4013  00AFA2  B4D8               	btfsc	status,2,c
  4014  00AFA4  0012               	return	
  4015  00AFA6  D7F7               	goto	l1095
  4016  00AFA8                     __end_of_SPI_delay:
  4017                           	opt stack 0
  4018                           tblptru	equ	0xFF8
  4019                           tblptrh	equ	0xFF7
  4020                           tblptrl	equ	0xFF6
  4021                           tablat	equ	0xFF5
  4022                           postinc0	equ	0xFEE
  4023                           wreg	equ	0xFE8
  4024                           postdec1	equ	0xFE5
  4025                           fsr1h	equ	0xFE2
  4026                           fsr1l	equ	0xFE1
  4027                           indf2	equ	0xFDF
  4028                           postinc2	equ	0xFDE
  4029                           postdec2	equ	0xFDD
  4030                           fsr2h	equ	0xFDA
  4031                           fsr2l	equ	0xFD9
  4032                           status	equ	0xFD8
  4033                           
  4034 ;; *************** function _LCD_string *****************
  4035 ;; Defined at:
  4036 ;;		line 54 in file "LCD.c"
  4037 ;; Parameters:    Size  Location     Type
  4038 ;;  ptr             2    8[COMRAM] PTR unsigned char 
  4039 ;;		 -> displayMemory@memoryString(20), STR_46(17), STR_45(17), STR_44(17), 
  4040 ;;		 -> STR_43(17), STR_42(17), STR_41(16), STR_40(17), 
  4041 ;;		 -> STR_38(2), STR_37(2), writeFile@data(1), STR_36(2), 
  4042 ;;		 -> STR_35(18), STR_34(17), STR_33(17), STR_32(17), 
  4043 ;;		 -> STR_31(17), STR_30(17), STR_29(10), STR_28(17), 
  4044 ;;		 -> STR_27(5), STR_26(4), STR_25(4), STR_24(5), 
  4045 ;;		 -> STR_23(4), RAM(3967), STR_22(2), STR_21(14), 
  4046 ;;		 -> STR_20(17), STR_19(17), STR_18(17), STR_17(17), 
  4047 ;;		 -> STR_16(14), STR_15(18), STR_14(15), STR_13(26), 
  4048 ;;		 -> STR_12(8), STR_11(15), STR_10(17), STR_9(14), 
  4049 ;;		 -> STR_7(17), STR_6(16), STR_5(16), STR_4(16), 
  4050 ;;		 -> STR_3(16), STR_2(17), STR_1(17), 
  4051 ;; Auto vars:     Size  Location     Type
  4052 ;;		None
  4053 ;; Return value:  Size  Location     Type
  4054 ;;		None               void
  4055 ;; Registers used:
  4056 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4057 ;; Tracked objects:
  4058 ;;		On entry : 0/0
  4059 ;;		On exit  : 0/0
  4060 ;;		Unchanged: 0/0
  4061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4062 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4065 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4066 ;;Total ram usage:        2 bytes
  4067 ;; Hardware stack levels used:    1
  4068 ;; Hardware stack levels required when called:    3
  4069 ;; This function calls:
  4070 ;;		_LCD_func
  4071 ;; This function is called by:
  4072 ;;		_main
  4073 ;;		_findFiles
  4074 ;;		_readFile
  4075 ;;		_convertFileName
  4076 ;;		_writeFile
  4077 ;;		_memoryStatistics
  4078 ;;		_displayMemory
  4079 ;; This function uses a non-reentrant model
  4080 ;;
  4081                           
  4082                           	psect	text16
  4083  00B164                     __ptext16:
  4084                           	opt stack 0
  4085  00B164                     _LCD_string:
  4086                           	opt stack 27
  4087                           
  4088                           ;LCD.c: 55: while(*ptr != '\0'){
  4089                           
  4090                           ;incstack = 0
  4091  00B164  D016               	goto	l2597
  4092  00B166                     l2593:
  4093                           
  4094                           ;LCD.c: 56: LCD_func(*ptr,1);
  4095  00B166  0E01               	movlw	1
  4096  00B168  6E03               	movwf	LCD_func@cmd,c
  4097  00B16A  C009  FFF6         	movff	LCD_string@ptr,tblptrl
  4098  00B16E  C00A  FFF7         	movff	LCD_string@ptr+1,tblptrh
  4099  00B172  6AF8               	clrf	tblptru,c
  4100  00B174  0E0F               	movlw	(high __ramtop+-1)
  4101  00B176  64F7               	cpfsgt	tblptrh,c
  4102  00B178  D003               	bra	u2087
  4103  00B17A  0008               	tblrd		*
  4104  00B17C  50F5               	movf	tablat,w,c
  4105  00B17E  D005               	bra	u2080
  4106  00B180                     u2087:
  4107  00B180  CFF6 FFE9          	movff	tblptrl,fsr0l
  4108  00B184  CFF7 FFEA          	movff	tblptrh,fsr0h
  4109  00B188  50EF               	movf	indf0,w,c
  4110  00B18A                     u2080:
  4111  00B18A  EC87  F058         	call	_LCD_func
  4112                           
  4113                           ;LCD.c: 57: ptr++;
  4114  00B18E  4A09               	infsnz	LCD_string@ptr,f,c
  4115  00B190  2A0A               	incf	LCD_string@ptr+1,f,c
  4116  00B192                     l2597:
  4117  00B192  C009  FFF6         	movff	LCD_string@ptr,tblptrl
  4118  00B196  C00A  FFF7         	movff	LCD_string@ptr+1,tblptrh
  4119  00B19A  6AF8               	clrf	tblptru,c
  4120  00B19C  0E0F               	movlw	(high __ramtop+-1)
  4121  00B19E  64F7               	cpfsgt	tblptrh,c
  4122  00B1A0  D003               	bra	u2097
  4123  00B1A2  0008               	tblrd		*
  4124  00B1A4  50F5               	movf	tablat,w,c
  4125  00B1A6  D005               	bra	u2090
  4126  00B1A8                     u2097:
  4127  00B1A8  CFF6 FFE9          	movff	tblptrl,fsr0l
  4128  00B1AC  CFF7 FFEA          	movff	tblptrh,fsr0h
  4129  00B1B0  50EF               	movf	indf0,w,c
  4130  00B1B2                     u2090:
  4131  00B1B2  0900               	iorlw	0
  4132  00B1B4  B4D8               	btfsc	status,2,c
  4133  00B1B6  0012               	return	
  4134  00B1B8  D7D6               	goto	l2593
  4135  00B1BA                     __end_of_LCD_string:
  4136                           	opt stack 0
  4137                           tblptru	equ	0xFF8
  4138                           tblptrh	equ	0xFF7
  4139                           tblptrl	equ	0xFF6
  4140                           tablat	equ	0xFF5
  4141                           indf0	equ	0xFEF
  4142                           postinc0	equ	0xFEE
  4143                           fsr0h	equ	0xFEA
  4144                           fsr0l	equ	0xFE9
  4145                           wreg	equ	0xFE8
  4146                           postdec1	equ	0xFE5
  4147                           fsr1h	equ	0xFE2
  4148                           fsr1l	equ	0xFE1
  4149                           indf2	equ	0xFDF
  4150                           postinc2	equ	0xFDE
  4151                           postdec2	equ	0xFDD
  4152                           fsr2h	equ	0xFDA
  4153                           fsr2l	equ	0xFD9
  4154                           status	equ	0xFD8
  4155                           
  4156 ;; *************** function _LCD_init *****************
  4157 ;; Defined at:
  4158 ;;		line 22 in file "LCD.c"
  4159 ;; Parameters:    Size  Location     Type
  4160 ;;		None
  4161 ;; Auto vars:     Size  Location     Type
  4162 ;;		None
  4163 ;; Return value:  Size  Location     Type
  4164 ;;		None               void
  4165 ;; Registers used:
  4166 ;;		wreg, status,2, status,0, cstack
  4167 ;; Tracked objects:
  4168 ;;		On entry : 0/0
  4169 ;;		On exit  : 0/0
  4170 ;;		Unchanged: 0/0
  4171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4172 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4173 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4175 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4176 ;;Total ram usage:        0 bytes
  4177 ;; Hardware stack levels used:    1
  4178 ;; Hardware stack levels required when called:    3
  4179 ;; This function calls:
  4180 ;;		_LCD_func
  4181 ;; This function is called by:
  4182 ;;		_main
  4183 ;; This function uses a non-reentrant model
  4184 ;;
  4185                           
  4186                           	psect	text17
  4187  00B03E                     __ptext17:
  4188                           	opt stack 0
  4189  00B03E                     _LCD_init:
  4190                           	opt stack 27
  4191                           
  4192                           ;LCD.c: 23: LCD_func(0x01,0);
  4193                           
  4194                           ;incstack = 0
  4195  00B03E  0E00               	movlw	0
  4196  00B040  6E03               	movwf	LCD_func@cmd,c
  4197  00B042  0E01               	movlw	1
  4198  00B044  EC87  F058         	call	_LCD_func
  4199                           
  4200                           ;LCD.c: 24: LCD_func(0x02,0);
  4201  00B048  0E00               	movlw	0
  4202  00B04A  6E03               	movwf	LCD_func@cmd,c
  4203  00B04C  0E02               	movlw	2
  4204  00B04E  EC87  F058         	call	_LCD_func
  4205                           
  4206                           ;LCD.c: 26: LCD_func(0x06,0);
  4207  00B052  0E00               	movlw	0
  4208  00B054  6E03               	movwf	LCD_func@cmd,c
  4209  00B056  0E06               	movlw	6
  4210  00B058  EC87  F058         	call	_LCD_func
  4211                           
  4212                           ;LCD.c: 33: LCD_func(0x0c,0);
  4213  00B05C  0E00               	movlw	0
  4214  00B05E  6E03               	movwf	LCD_func@cmd,c
  4215  00B060  0E0C               	movlw	12
  4216  00B062  EC87  F058         	call	_LCD_func
  4217                           
  4218                           ;LCD.c: 34: LCD_func(0x28,0);
  4219  00B066  0E00               	movlw	0
  4220  00B068  6E03               	movwf	LCD_func@cmd,c
  4221  00B06A  0E28               	movlw	40
  4222  00B06C  EC87  F058         	call	_LCD_func
  4223                           
  4224                           ;LCD.c: 36: LCD_func(0x80,0);
  4225  00B070  0E00               	movlw	0
  4226  00B072  6E03               	movwf	LCD_func@cmd,c
  4227  00B074  0E80               	movlw	128
  4228  00B076  EC87  F058         	call	_LCD_func
  4229  00B07A  0012               	return	
  4230  00B07C                     __end_of_LCD_init:
  4231                           	opt stack 0
  4232                           tblptru	equ	0xFF8
  4233                           tblptrh	equ	0xFF7
  4234                           tblptrl	equ	0xFF6
  4235                           tablat	equ	0xFF5
  4236                           indf0	equ	0xFEF
  4237                           postinc0	equ	0xFEE
  4238                           fsr0h	equ	0xFEA
  4239                           fsr0l	equ	0xFE9
  4240                           wreg	equ	0xFE8
  4241                           postdec1	equ	0xFE5
  4242                           fsr1h	equ	0xFE2
  4243                           fsr1l	equ	0xFE1
  4244                           indf2	equ	0xFDF
  4245                           postinc2	equ	0xFDE
  4246                           postdec2	equ	0xFDD
  4247                           fsr2h	equ	0xFDA
  4248                           fsr2l	equ	0xFD9
  4249                           status	equ	0xFD8
  4250                           
  4251 ;; *************** function _LCD_cur *****************
  4252 ;; Defined at:
  4253 ;;		line 50 in file "LCD.c"
  4254 ;; Parameters:    Size  Location     Type
  4255 ;;  row             1    wreg     unsigned char 
  4256 ;;  col             1    8[COMRAM] unsigned char 
  4257 ;; Auto vars:     Size  Location     Type
  4258 ;;  row             1    9[COMRAM] unsigned char 
  4259 ;; Return value:  Size  Location     Type
  4260 ;;		None               void
  4261 ;; Registers used:
  4262 ;;		wreg, status,2, status,0, cstack
  4263 ;; Tracked objects:
  4264 ;;		On entry : 0/0
  4265 ;;		On exit  : 0/0
  4266 ;;		Unchanged: 0/0
  4267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4268 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4269 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4271 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4272 ;;Total ram usage:        2 bytes
  4273 ;; Hardware stack levels used:    1
  4274 ;; Hardware stack levels required when called:    3
  4275 ;; This function calls:
  4276 ;;		_LCD_func
  4277 ;; This function is called by:
  4278 ;;		_main
  4279 ;; This function uses a non-reentrant model
  4280 ;;
  4281                           
  4282                           	psect	text18
  4283  00AFBC                     __ptext18:
  4284                           	opt stack 0
  4285  00AFBC                     _LCD_cur:
  4286                           	opt stack 27
  4287                           
  4288                           ;incstack = 0
  4289                           ;LCD_cur@row stored from wreg
  4290  00AFBC  6E0A               	movwf	LCD_cur@row,c
  4291                           
  4292                           ;LCD.c: 51: LCD_func(((0x80 + 0x40 * (row - 1)) + (col - 1)),0);
  4293  00AFBE  0E00               	movlw	0
  4294  00AFC0  6E03               	movwf	LCD_func@cmd,c
  4295  00AFC2  400A               	rrncf	LCD_cur@row,w,c
  4296  00AFC4  42E8               	rrncf	wreg,f,c
  4297  00AFC6  0BC0               	andlw	192
  4298  00AFC8  2409               	addwf	LCD_cur@col,w,c
  4299  00AFCA  0F3F               	addlw	63
  4300  00AFCC  EC87  F058         	call	_LCD_func
  4301  00AFD0  0012               	return	
  4302  00AFD2                     __end_of_LCD_cur:
  4303                           	opt stack 0
  4304                           tblptru	equ	0xFF8
  4305                           tblptrh	equ	0xFF7
  4306                           tblptrl	equ	0xFF6
  4307                           tablat	equ	0xFF5
  4308                           indf0	equ	0xFEF
  4309                           postinc0	equ	0xFEE
  4310                           fsr0h	equ	0xFEA
  4311                           fsr0l	equ	0xFE9
  4312                           wreg	equ	0xFE8
  4313                           postdec1	equ	0xFE5
  4314                           fsr1h	equ	0xFE2
  4315                           fsr1l	equ	0xFE1
  4316                           indf2	equ	0xFDF
  4317                           postinc2	equ	0xFDE
  4318                           postdec2	equ	0xFDD
  4319                           fsr2h	equ	0xFDA
  4320                           fsr2l	equ	0xFD9
  4321                           status	equ	0xFD8
  4322                           
  4323 ;; *************** function _LCD_func *****************
  4324 ;; Defined at:
  4325 ;;		line 40 in file "LCD.c"
  4326 ;; Parameters:    Size  Location     Type
  4327 ;;  data            1    wreg     unsigned char 
  4328 ;;  cmd             1    2[COMRAM] unsigned char 
  4329 ;; Auto vars:     Size  Location     Type
  4330 ;;  data            1    7[COMRAM] unsigned char 
  4331 ;; Return value:  Size  Location     Type
  4332 ;;		None               void
  4333 ;; Registers used:
  4334 ;;		wreg, status,2, status,0, cstack
  4335 ;; Tracked objects:
  4336 ;;		On entry : 0/0
  4337 ;;		On exit  : 0/0
  4338 ;;		Unchanged: 0/0
  4339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4340 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4341 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4342 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4343 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4344 ;;Total ram usage:        6 bytes
  4345 ;; Hardware stack levels used:    1
  4346 ;; Hardware stack levels required when called:    2
  4347 ;; This function calls:
  4348 ;;		_LCD_enable
  4349 ;; This function is called by:
  4350 ;;		_LCD_init
  4351 ;;		_LCD_cur
  4352 ;;		_LCD_string
  4353 ;;		_main
  4354 ;;		_getBootSectorData
  4355 ;; This function uses a non-reentrant model
  4356 ;;
  4357                           
  4358                           	psect	text19
  4359  00B10E                     __ptext19:
  4360                           	opt stack 0
  4361  00B10E                     _LCD_func:
  4362                           	opt stack 27
  4363                           
  4364                           ;incstack = 0
  4365                           ;LCD_func@data stored from wreg
  4366  00B10E  6E08               	movwf	LCD_func@data,c
  4367                           
  4368                           ;LCD.c: 42: PORTD = cmd? PORTD|0x10:PORTD&~0x10;
  4369  00B110  6603               	tstfsz	LCD_func@cmd,c
  4370  00B112  D008               	goto	l2493
  4371  00B114  CF83 F004          	movff	3971,??_LCD_func	;volatile
  4372  00B118  0EEF               	movlw	239
  4373  00B11A  1604               	andwf	??_LCD_func,f,c
  4374  00B11C  5004               	movf	??_LCD_func,w,c
  4375  00B11E  6E06               	movwf	_LCD_func$36,c
  4376  00B120  6A07               	clrf	_LCD_func$36+1,c
  4377  00B122  D008               	goto	l2495
  4378  00B124                     l2493:
  4379  00B124  0E10               	movlw	16
  4380  00B126  CF83 F004          	movff	3971,??_LCD_func	;volatile
  4381  00B12A  6A05               	clrf	(??_LCD_func+1)& (0+255),c
  4382  00B12C  1004               	iorwf	??_LCD_func,w,c
  4383  00B12E  6E06               	movwf	_LCD_func$36,c
  4384  00B130  5005               	movf	??_LCD_func+1,w,c
  4385  00B132  6E07               	movwf	_LCD_func$36+1,c
  4386  00B134                     l2495:
  4387  00B134  C006  FF83         	movff	_LCD_func$36,3971	;volatile
  4388                           
  4389                           ;LCD.c: 43: (PORTD = (PORTD&0xF0)|data>>4);
  4390  00B138  C008  F004         	movff	LCD_func@data,??_LCD_func
  4391  00B13C  3A04               	swapf	??_LCD_func,f,c
  4392  00B13E  0E0F               	movlw	15
  4393  00B140  1604               	andwf	??_LCD_func,f,c
  4394  00B142  5083               	movf	3971,w,c	;volatile
  4395  00B144  0BF0               	andlw	240
  4396  00B146  1004               	iorwf	??_LCD_func,w,c
  4397  00B148  6E83               	movwf	3971,c	;volatile
  4398                           
  4399                           ;LCD.c: 44: LCD_enable();
  4400  00B14A  ECE9  F057         	call	_LCD_enable	;wreg free
  4401                           
  4402                           ;LCD.c: 46: (PORTD = (PORTD&0xF0)|data&0x0F);
  4403  00B14E  C008  F004         	movff	LCD_func@data,??_LCD_func
  4404  00B152  0E0F               	movlw	15
  4405  00B154  1604               	andwf	??_LCD_func,f,c
  4406  00B156  5083               	movf	3971,w,c	;volatile
  4407  00B158  0BF0               	andlw	240
  4408  00B15A  1004               	iorwf	??_LCD_func,w,c
  4409  00B15C  6E83               	movwf	3971,c	;volatile
  4410                           
  4411                           ;LCD.c: 47: LCD_enable();
  4412  00B15E  ECE9  F057         	call	_LCD_enable	;wreg free
  4413  00B162  0012               	return	
  4414  00B164                     __end_of_LCD_func:
  4415                           	opt stack 0
  4416                           tblptru	equ	0xFF8
  4417                           tblptrh	equ	0xFF7
  4418                           tblptrl	equ	0xFF6
  4419                           tablat	equ	0xFF5
  4420                           indf0	equ	0xFEF
  4421                           postinc0	equ	0xFEE
  4422                           fsr0h	equ	0xFEA
  4423                           fsr0l	equ	0xFE9
  4424                           wreg	equ	0xFE8
  4425                           postdec1	equ	0xFE5
  4426                           fsr1h	equ	0xFE2
  4427                           fsr1l	equ	0xFE1
  4428                           indf2	equ	0xFDF
  4429                           postinc2	equ	0xFDE
  4430                           postdec2	equ	0xFDD
  4431                           fsr2h	equ	0xFDA
  4432                           fsr2l	equ	0xFD9
  4433                           status	equ	0xFD8
  4434                           
  4435 ;; *************** function _LCD_enable *****************
  4436 ;; Defined at:
  4437 ;;		line 13 in file "LCD.c"
  4438 ;; Parameters:    Size  Location     Type
  4439 ;;		None
  4440 ;; Auto vars:     Size  Location     Type
  4441 ;;		None
  4442 ;; Return value:  Size  Location     Type
  4443 ;;		None               void
  4444 ;; Registers used:
  4445 ;;		wreg, status,2, status,0, cstack
  4446 ;; Tracked objects:
  4447 ;;		On entry : 0/0
  4448 ;;		On exit  : 0/0
  4449 ;;		Unchanged: 0/0
  4450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4452 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4454 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4455 ;;Total ram usage:        0 bytes
  4456 ;; Hardware stack levels used:    1
  4457 ;; Hardware stack levels required when called:    1
  4458 ;; This function calls:
  4459 ;;		_LCD_delay
  4460 ;; This function is called by:
  4461 ;;		_LCD_func
  4462 ;; This function uses a non-reentrant model
  4463 ;;
  4464                           
  4465                           	psect	text20
  4466  00AFD2                     __ptext20:
  4467                           	opt stack 0
  4468  00AFD2                     _LCD_enable:
  4469                           	opt stack 27
  4470                           
  4471                           ;LCD.c: 15: PORTD |= 0x20;
  4472                           
  4473                           ;incstack = 0
  4474  00AFD2  8A83               	bsf	3971,5,c	;volatile
  4475                           
  4476                           ;LCD.c: 16: LCD_delay(500);
  4477  00AFD4  0E01               	movlw	1
  4478  00AFD6  6E02               	movwf	LCD_delay@x+1,c
  4479  00AFD8  0EF4               	movlw	244
  4480  00AFDA  6E01               	movwf	LCD_delay@x,c
  4481  00AFDC  ECC2  F057         	call	_LCD_delay	;wreg free
  4482                           
  4483                           ;LCD.c: 18: PORTD &= ~0x20;
  4484  00AFE0  9A83               	bcf	3971,5,c	;volatile
  4485                           
  4486                           ;LCD.c: 19: LCD_delay(500);
  4487  00AFE2  0E01               	movlw	1
  4488  00AFE4  6E02               	movwf	LCD_delay@x+1,c
  4489  00AFE6  0EF4               	movlw	244
  4490  00AFE8  6E01               	movwf	LCD_delay@x,c
  4491  00AFEA  ECC2  F057         	call	_LCD_delay	;wreg free
  4492  00AFEE  0012               	return	
  4493  00AFF0                     __end_of_LCD_enable:
  4494                           	opt stack 0
  4495                           tblptru	equ	0xFF8
  4496                           tblptrh	equ	0xFF7
  4497                           tblptrl	equ	0xFF6
  4498                           tablat	equ	0xFF5
  4499                           indf0	equ	0xFEF
  4500                           postinc0	equ	0xFEE
  4501                           fsr0h	equ	0xFEA
  4502                           fsr0l	equ	0xFE9
  4503                           wreg	equ	0xFE8
  4504                           postdec1	equ	0xFE5
  4505                           fsr1h	equ	0xFE2
  4506                           fsr1l	equ	0xFE1
  4507                           indf2	equ	0xFDF
  4508                           postinc2	equ	0xFDE
  4509                           postdec2	equ	0xFDD
  4510                           fsr2h	equ	0xFDA
  4511                           fsr2l	equ	0xFD9
  4512                           status	equ	0xFD8
  4513                           
  4514 ;; *************** function _LCD_delay *****************
  4515 ;; Defined at:
  4516 ;;		line 11 in file "LCD.c"
  4517 ;; Parameters:    Size  Location     Type
  4518 ;;  x               2    0[COMRAM] unsigned int 
  4519 ;; Auto vars:     Size  Location     Type
  4520 ;;		None
  4521 ;; Return value:  Size  Location     Type
  4522 ;;		None               void
  4523 ;; Registers used:
  4524 ;;		wreg, status,2, status,0
  4525 ;; Tracked objects:
  4526 ;;		On entry : 0/0
  4527 ;;		On exit  : 0/0
  4528 ;;		Unchanged: 0/0
  4529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4530 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4531 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4532 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4533 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4534 ;;Total ram usage:        2 bytes
  4535 ;; Hardware stack levels used:    1
  4536 ;; This function calls:
  4537 ;;		Nothing
  4538 ;; This function is called by:
  4539 ;;		_LCD_enable
  4540 ;; This function uses a non-reentrant model
  4541 ;;
  4542                           
  4543                           	psect	text21
  4544  00AF84                     __ptext21:
  4545                           	opt stack 0
  4546  00AF84                     _LCD_delay:
  4547                           	opt stack 27
  4548  00AF84                     l2481:
  4549  00AF84  0601               	decf	LCD_delay@x,f,c
  4550  00AF86  A0D8               	btfss	status,0,c
  4551  00AF88  0602               	decf	LCD_delay@x+1,f,c
  4552  00AF8A  2801               	incf	LCD_delay@x& (0+255),w,c
  4553  00AF8C  B4D8               	btfsc	status,2,c
  4554  00AF8E  2802               	incf	(LCD_delay@x+1)& (0+255),w,c
  4555  00AF90  B4D8               	btfsc	status,2,c
  4556  00AF92  0012               	return	
  4557  00AF94  D7F7               	goto	l2481
  4558  00AF96                     __end_of_LCD_delay:
  4559                           	opt stack 0
  4560                           tblptru	equ	0xFF8
  4561                           tblptrh	equ	0xFF7
  4562                           tblptrl	equ	0xFF6
  4563                           tablat	equ	0xFF5
  4564                           indf0	equ	0xFEF
  4565                           postinc0	equ	0xFEE
  4566                           fsr0h	equ	0xFEA
  4567                           fsr0l	equ	0xFE9
  4568                           wreg	equ	0xFE8
  4569                           postdec1	equ	0xFE5
  4570                           fsr1h	equ	0xFE2
  4571                           fsr1l	equ	0xFE1
  4572                           indf2	equ	0xFDF
  4573                           postinc2	equ	0xFDE
  4574                           postdec2	equ	0xFDD
  4575                           fsr2h	equ	0xFDA
  4576                           fsr2l	equ	0xFD9
  4577                           status	equ	0xFD8
  4578                           tblptru	equ	0xFF8
  4579                           tblptrh	equ	0xFF7
  4580                           tblptrl	equ	0xFF6
  4581                           tablat	equ	0xFF5
  4582                           indf0	equ	0xFEF
  4583                           postinc0	equ	0xFEE
  4584                           fsr0h	equ	0xFEA
  4585                           fsr0l	equ	0xFE9
  4586                           wreg	equ	0xFE8
  4587                           postdec1	equ	0xFE5
  4588                           fsr1h	equ	0xFE2
  4589                           fsr1l	equ	0xFE1
  4590                           indf2	equ	0xFDF
  4591                           postinc2	equ	0xFDE
  4592                           postdec2	equ	0xFDD
  4593                           fsr2h	equ	0xFDA
  4594                           fsr2l	equ	0xFD9
  4595                           status	equ	0xFD8
  4596                           
  4597                           	psect	rparam
  4598  0000                     tblptru	equ	0xFF8
  4599                           tblptrh	equ	0xFF7
  4600                           tblptrl	equ	0xFF6
  4601                           tablat	equ	0xFF5
  4602                           indf0	equ	0xFEF
  4603                           postinc0	equ	0xFEE
  4604                           fsr0h	equ	0xFEA
  4605                           fsr0l	equ	0xFE9
  4606                           wreg	equ	0xFE8
  4607                           postdec1	equ	0xFE5
  4608                           fsr1h	equ	0xFE2
  4609                           fsr1l	equ	0xFE1
  4610                           indf2	equ	0xFDF
  4611                           postinc2	equ	0xFDE
  4612                           postdec2	equ	0xFDD
  4613                           fsr2h	equ	0xFDA
  4614                           fsr2l	equ	0xFD9
  4615                           status	equ	0xFD8


Data Sizes:
    Strings     531
    Constant    0
    Data        20
    BSS         561
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     74     123
    BANK0           128      0      20
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_8(CODE[25]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 512
		 -> buffer(BIGRAM[512]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 512
		 -> buffer(BIGRAM[512]), 

    sp__findFiles	PTR struct dir_Structure size(2) Largest target is 512
		 -> NULL(NULL[0]), buffer(BIGRAM[512]), 

    getSetFreeCluster@FS	PTR struct FSInfo_Structure size(2) Largest target is 512
		 -> buffer(BIGRAM[512]), 

    getBootSectorData@partition	PTR struct partitionInfo_Structure size(2) Largest target is 512
		 -> buffer.partitionData(BIGRAM[64]), buffer(BIGRAM[512]), 

    getBootSectorData@mbr	PTR struct MBRinfo_Structure size(2) Largest target is 512
		 -> buffer(BIGRAM[512]), 

    getBootSectorData@bpb	PTR struct BS_Structure size(2) Largest target is 512
		 -> buffer(BIGRAM[512]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 512
		 -> buffer(BIGRAM[512]), 

    LCD_string@ptr	PTR unsigned char  size(2) Largest target is 3967
		 -> displayMemory@memoryString(COMRAM[20]), STR_46(CODE[17]), STR_45(CODE[17]), STR_44(CODE[17]), 
		 -> STR_43(CODE[17]), STR_42(CODE[17]), STR_41(CODE[16]), STR_40(CODE[17]), 
		 -> STR_38(CODE[2]), STR_37(CODE[2]), writeFile@data(COMRAM[1]), STR_36(CODE[2]), 
		 -> STR_35(CODE[18]), STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[17]), 
		 -> STR_31(CODE[17]), STR_30(CODE[17]), STR_29(CODE[10]), STR_28(CODE[17]), 
		 -> STR_27(CODE[5]), STR_26(CODE[4]), STR_25(CODE[4]), STR_24(CODE[5]), 
		 -> STR_23(CODE[4]), RAM(DATA[3967]), STR_22(CODE[2]), STR_21(CODE[14]), 
		 -> STR_20(CODE[17]), STR_19(CODE[17]), STR_18(CODE[17]), STR_17(CODE[17]), 
		 -> STR_16(CODE[14]), STR_15(CODE[18]), STR_14(CODE[15]), STR_13(CODE[26]), 
		 -> STR_12(CODE[8]), STR_11(CODE[15]), STR_10(CODE[17]), STR_9(CODE[14]), 
		 -> STR_7(CODE[17]), STR_6(CODE[16]), STR_5(CODE[16]), STR_4(CODE[16]), 
		 -> STR_3(CODE[16]), STR_2(CODE[17]), STR_1(CODE[17]), 


Critical Paths under _main in COMRAM

    _main->_getBootSectorData
    _getBootSectorData->_getSetFreeCluster
    _getSetFreeCluster->_SD_writeSingleBlock
    _SD_writeSingleBlock->_SD_sendCommand
    _SD_readSingleBlock->_SD_sendCommand
    _SD_init->_SD_sendCommand
    _SD_erase->_SD_sendCommand
    _SD_sendCommand->_SPI_Send_8Bits
    _SPI_Send_8Bits->_SPI_delay
    _SPI_Read_8Bits->_SPI_delay
    _LCD_string->_LCD_func
    _LCD_init->_LCD_func
    _LCD_cur->_LCD_func
    _LCD_enable->_LCD_delay

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                24    19      5   28378
                                             63 COMRAM    11     6      5
                            _LCD_cur
                           _LCD_func
                           _LCD_init
                         _LCD_string
                           _SD_erase
                            _SD_init
                 _SD_readSingleBlock
                _SD_writeSingleBlock
                              _delay
                  _getBootSectorData
                               _init
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _strcpy                                               6     2      4     136
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getBootSectorData                                   27    25      2   11619
                                             36 COMRAM    27    25      2
                           _LCD_func
                 _SD_readSingleBlock
                            ___lldiv
                             ___lmul
                  _getSetFreeCluster
 ---------------------------------------------------------------------------------
 (2) _getSetFreeCluster                                   13     8      5    5979
                                             23 COMRAM    13     8      5
                 _SD_readSingleBlock
                _SD_writeSingleBlock
 ---------------------------------------------------------------------------------
 (3) _SD_writeSingleBlock                                 10     6      4    2608
                                             13 COMRAM    10     6      4
                     _SD_sendCommand
                     _SPI_Read_8Bits
                     _SPI_Send_8Bits
 ---------------------------------------------------------------------------------
 (3) _SD_readSingleBlock                                   9     5      4    2417
                                             13 COMRAM     9     5      4
                     _SD_sendCommand
                     _SPI_Read_8Bits
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     808
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     798
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _delay                                                4     0      4     230
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _SD_init                                              5     5      0    1933
                                             13 COMRAM     5     5      0
                     _SD_sendCommand
                     _SPI_Send_8Bits
 ---------------------------------------------------------------------------------
 (1) _SD_erase                                            13     5      8    1598
                                             13 COMRAM    13     5      8
                     _SD_sendCommand
 ---------------------------------------------------------------------------------
 (4) _SD_sendCommand                                       8     4      4    1377
                                              5 COMRAM     8     4      4
                     _SPI_Read_8Bits
                     _SPI_Send_8Bits
 ---------------------------------------------------------------------------------
 (4) _SPI_Send_8Bits                                       3     3      0     391
                                              2 COMRAM     3     3      0
                          _SPI_delay
 ---------------------------------------------------------------------------------
 (4) _SPI_Read_8Bits                                       2     2      0     391
                                              2 COMRAM     2     2      0
                          _SPI_delay
 ---------------------------------------------------------------------------------
 (5) _SPI_delay                                            2     0      2     316
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _LCD_string                                           2     0      2    3761
                                              8 COMRAM     2     0      2
                           _LCD_func
 ---------------------------------------------------------------------------------
 (1) _LCD_init                                             0     0      0    1172
                           _LCD_func
 ---------------------------------------------------------------------------------
 (1) _LCD_cur                                              2     1      1    1322
                                              8 COMRAM     2     1      1
                           _LCD_func
 ---------------------------------------------------------------------------------
 (2) _LCD_func                                             6     5      1    1172
                                              2 COMRAM     6     5      1
                         _LCD_enable
 ---------------------------------------------------------------------------------
 (3) _LCD_enable                                           0     0      0     128
                          _LCD_delay
 ---------------------------------------------------------------------------------
 (4) _LCD_delay                                            2     0      2     128
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_cur
     _LCD_func
       _LCD_enable
         _LCD_delay
   _LCD_func
     _LCD_enable
       _LCD_delay
   _LCD_init
     _LCD_func
       _LCD_enable
         _LCD_delay
   _LCD_string
     _LCD_func
       _LCD_enable
         _LCD_delay
   _SD_erase
     _SD_sendCommand
       _SPI_Read_8Bits
         _SPI_delay
       _SPI_Send_8Bits
         _SPI_delay
   _SD_init
     _SD_sendCommand
       _SPI_Read_8Bits
         _SPI_delay
       _SPI_Send_8Bits
         _SPI_delay
     _SPI_Send_8Bits
       _SPI_delay
   _SD_readSingleBlock
     _SD_sendCommand
       _SPI_Read_8Bits
         _SPI_delay
       _SPI_Send_8Bits
         _SPI_delay
     _SPI_Read_8Bits
       _SPI_delay
   _SD_writeSingleBlock
     _SD_sendCommand
       _SPI_Read_8Bits
         _SPI_delay
       _SPI_Send_8Bits
         _SPI_delay
     _SPI_Read_8Bits
       _SPI_delay
     _SPI_Send_8Bits
       _SPI_delay
   _delay
   _getBootSectorData
     _LCD_func
       _LCD_enable
         _LCD_delay
     _SD_readSingleBlock
       _SD_sendCommand
         _SPI_Read_8Bits
           _SPI_delay
         _SPI_Send_8Bits
           _SPI_delay
       _SPI_Read_8Bits
         _SPI_delay
     ___lldiv
     ___lmul
     _getSetFreeCluster
       _SD_readSingleBlock
         _SD_sendCommand
           _SPI_Read_8Bits
             _SPI_delay
           _SPI_Send_8Bits
             _SPI_delay
         _SPI_Read_8Bits
           _SPI_delay
       _SD_writeSingleBlock
         _SD_sendCommand
           _SPI_Read_8Bits
             _SPI_delay
           _SPI_Send_8Bits
             _SPI_delay
         _SPI_Read_8Bits
           _SPI_delay
         _SPI_Send_8Bits
           _SPI_delay
   _init
   _strcpy

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0     200      37       12.9%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      14       5       15.6%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     4A      7B       1       96.9%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      8F      34        0.0%
DATA                 0      0     28F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Wed Jun 15 22:51:50 2016

             main@FAT32_active 0045                             l86 B7FA                             l96 B88A  
                  ?_LCD_enable 0001                    _totalBlocks 0067                            l102 B950  
                          l210 B3DC                            l123 BA62                            l222 B4FE  
                          l216 B2DA                            l313 B638                            l226 B4D0  
                          l182 B786                            l192 B772                            l199 B31A  
                          l955 B44E                 _SPI_Send_8Bits B210                            u720 B3D6  
              SPI_Read_8Bits@i 0003                            fsr2 000FD9                            wreg 000FE8  
                  ?_LCD_string 0009       getSetFreeCluster@get_set 0018                __end_of_LCD_cur AFD2  
                         l1103 B082                           l1113 B09E                           l1201 B356  
                         l1141 B232                           l1133 B21C                           l1143 B234  
                         l1223 B294                           l1307 B4F0                           l3003 B7C8  
                         l3021 B818                           l3013 B7E6                           l1095 AF96  
                         l1503 B684                           l1431 B1CA                           l1239 B2CA  
                         l3103 BA56                           l3023 B826                           l3007 B7CE  
                         l1193 B346                           l1273 B4AE                           l1353 B5F6  
                         l1345 B5CC                           l3105 BA64                           l3017 B7FC  
                         l1179 B314                           l1523 B6D6                           l1515 B6A4  
                         l1435 B1DE                           l1283 B4D2                           l3107 BA70  
                         l3043 B88C                           l3019 B80A                           l3027 B834  
                         l1525 B6DC                           l1357 B630                           l1349 B5EA  
                         l3029 B84A                           l1527 B6E4                           l3071 B9AE  
                         l1553 B776                           l1545 B744                           l3065 B98C  
                         l3057 B944                           l1539 B728                           l1475 AFF0  
                         l1299 B4EC                           l1635 B018                           l3083 B9E2  
                         l3067 B99A                           l3059 B952                           l1557 B780  
                         l1493 B658                           l1485 B648                           l1637 B020  
                         l1663 B3DA                           l1559 B784                           l3095 BA1E  
                         l2481 AF84                           l3097 BA2C                           l3089 B9F4  
                         l2571 B400                           l2643 BBA0                           l2493 B124  
                         l2573 B40C                           l2661 BDD2                           l2645 BBAA  
                         l2495 B134                           l2583 B440                           l2575 B410  
                         l2593 B166                           l2597 B192                           STR_1 BF41  
                         STR_2 BF30                           STR_3 BF82                           STR_4 BF62  
                         STR_5 BF92                           STR_6 BF72                           STR_7 BEFD  
                         STR_8 BE05                           STR_9 BFCE                           u2150 BB98  
                         u2080 B18A                           u2090 B1B2                           u2087 B180  
                         u2097 B1A8         __end_of_SPI_Read_8Bits B0C4     __end_of_SD_readSingleBlock B2DC  
             _sectorPerCluster 007A       SD_writeSingleBlock@retry 0013                           _main B788  
                         _init AF76                           fsr0h 000FEA                           fsr1h 000FE2  
                         indf0 000FEF                           fsr0l 000FE9                           fsr2h 000FDA  
                         fsr1l 000FE1                           indf2 000FDF                           fsr2l 000FD9  
              __end_of_SD_init B788                           start 0000             __size_of_LCD_delay 0012  
 __size_of_SD_writeSingleBlock 00A0         __end_of_SPI_Send_8Bits B26A               __end_of_LCD_func B164  
             __end_of_LCD_init B07C                          ?_main 0040                          ?_init 0001  
                        STR_10 BF0E                          STR_11 BFA2                          STR_12 BFE6  
                        STR_20 BEA8                          STR_21 BFC0                          STR_13 BDEB  
                        STR_14 BFB1                          STR_31 BECA                          STR_15 BE30  
                        STR_16 BFCE                          STR_24 BFEE                          STR_32 BEB9  
                        STR_17 BF0E                          STR_41 BF52                          STR_33 BE86  
                        STR_26 BFF8                          STR_18 BF1F                          STR_34 BE97  
                        STR_42 BE53                          STR_27 BFF3                          STR_43 BEDB  
                        STR_19 BE75                          STR_35 BE1E                          STR_36 BFFC  
                        STR_28 BEEC                          STR_29 BFDC                          STR_45 BE64  
                        STR_46 BE42                __end_of___lldiv B460                          _PORTC 000F82  
                        _PORTD 000F83                          _TRISB 000F93                          _TRISC 000F94  
                        _TRISD 000F95                  _totalClusters 006B            ___lmul@multiplicand 0005  
                        _delay AFF0  SD_writeSingleBlock@startBlock 000E                          main@i 0048  
              ?_SPI_Read_8Bits 0001                          tablat 000FF5               __end_of_SD_erase B3DE  
                        status 000FD8             __size_of_SPI_delay 0012            __size_of_LCD_enable 001E  
                  LCD_func@cmd 0003                __initialization B0C4            __size_of_LCD_string 0056  
                 __end_of_main BA86                   __end_of_init AF84                ?_SPI_Send_8Bits 0001  
                       ??_main 0045                         ??_init 0001                  __activetblptr 000002  
                    ??_LCD_cur 000A              __end_of_LCD_delay AF96                SPI_Send_8Bits@i 0005  
                       ?_delay 0001                      ??_SD_init 000E                         ___lmul B1BA  
                    ??___lldiv 0009                         _buffer 0094             SPI_Read_8Bits@temp 0004  
                       delay@x 0001                         clear_0 B0CC                         clear_1 B0DE  
                       _strcpy B00E              __end_of_SPI_delay AFA8                   __mediumconst BDEA  
       SD_sendCommand@response 000D   getBootSectorData@dataSectors 0036                         tblptrh 000FF7  
                       tblptrl 000FF6                         tblptru 000FF8                     __accesstop 0080  
      __end_of__initialization B104                      ?_LCD_func 0003                      ?_LCD_init 0001  
      __size_of_SD_sendCommand 0080                   LCD_func@data 0008                 __pcstackCOMRAM 0001  
                 __pidataBANK0 AFA8                  __end_of_delay B00E                   ??_LCD_enable 0003  
                    ?_SD_erase 000E                   ??_LCD_string 000B                  _unusedSectors 006F  
            _getBootSectorData BA86                        ??_delay 0005             ?_getBootSectorData 0025  
          _SD_writeSingleBlock B460                _firstDataSector 005B                   SD_init@retry 0011  
                   ??_LCD_func 0004                     ??_LCD_init 0009            ??_getBootSectorData 0027  
           __end_of_LCD_enable AFF0                        ?___lmul 0001             __end_of_LCD_string B1BA  
           _SD_readSingleBlock B26A           ?_SD_writeSingleBlock 000E                 ___lmul@product 0009  
                      ?_strcpy 0001                     ??_SD_erase 0016            ?_SD_readSingleBlock 000E  
    __end_of_getBootSectorData BDEA                        _LCD_cur AFBC             SPI_Send_8Bits@data 0003  
             ??_SPI_Read_8Bits 0003             SPI_Send_8Bits@temp 0004    SD_writeSingleBlock@response 0017  
   getBootSectorData@partition 003C     SD_readSingleBlock@response 0014                        _SD_init B63A  
      _freeClusterCountUpdated 0079             _appendStartCluster 0053           ??_SD_readSingleBlock 0012  
                      __Hparam 0000                        __Lparam 0000           getBootSectorData@bpb 003E  
         getBootSectorData@mbr 003A               ??_SPI_Send_8Bits 0003            SD_sendCommand@retry 000A  
              __size_of___lmul 0056          ??_SD_writeSingleBlock 0012                        ___lldiv B3DE  
                      __pcinit B0C4                        __ramtop 1000                        __ptext0 B788  
                      __ptext1 B00E                        __ptext2 AF76                        __ptext3 BA86  
                      __ptext4 B500                        __ptext5 B460                        __ptext6 B26A  
                      __ptext7 B1BA                        __ptext8 B3DE                        __ptext9 AFF0  
              __size_of_strcpy 0030                      _LCD_delay AF84           end_of_initialization B104  
                __Lmediumconst BDEA                 _SD_sendCommand B2DC                ___lldiv@divisor 0005  
                    _SDHC_flag 0077                ___lldiv@counter 000D                        postdec1 000FE5  
                      postdec2 000FDD                        postinc0 000FEE                        postinc2 000FDE  
   __size_of_getBootSectorData 0364                     _startBlock 0063                      _SPI_delay AF96  
                   ?_LCD_delay 0001         __end_of_SD_sendCommand B35C        SD_readSingleBlock@retry 0012  
                   main@option 0046              __size_of_LCD_func 0056              __size_of_LCD_init 003E  
            _getSetFreeCluster B500                 __end_of___lmul B210             ?_getSetFreeCluster 0018  
                   LCD_delay@x 0001                 __end_of_strcpy B03E                     LCD_cur@col 0009  
                   LCD_cur@row 000A            start_initialization B0C4            ??_getSetFreeCluster 001D  
            __size_of_SD_erase 0082                     ?_SPI_delay 0001                SD_init@response 0010  
               _bytesPerSector 0073                ?_SD_sendCommand 0006            getSetFreeCluster@FS 0023  
    __end_of_getSetFreeCluster B63A              SD_sendCommand@cmd 000C              SD_sendCommand@arg 0006  
                     ??___lmul 0009                    __pdataBANK0 0080                       ??_strcpy 0005  
                  __pbssBIGRAM 0094                       ?_LCD_cur 0009                    __pbssCOMRAM 004B  
          __end_of__stringdata BFFE                    ??_LCD_delay 0003                       ?_SD_init 0001  
          SD_readSingleBlock@i 0015                  LCD_string@ptr 0009                  __pmediumconst BDEA  
                     ?___lldiv 0001               _appendFileSector 004F            SD_erase@totalBlocks 0012  
             SD_erase@response 001A                    ??_SPI_delay 0003                 __size_of_delay 001E  
                     SD_init@i 000F   SD_readSingleBlock@startBlock 000E                       _LCD_func B10E  
                     _LCD_init B03E    __end_of_SD_writeSingleBlock B500    __size_of_SD_readSingleBlock 0072  
   __size_of_getSetFreeCluster 013A            _reservedSectorCount 0075                    __stringdata BDEB  
           _appendFileLocation 004B                       _SD_erase B35C         getSetFreeCluster@error 0021  
                    main@error 004A               __size_of_LCD_cur 0016              ___lmul@multiplier 0001  
                    copy_data0 B0F8                    _LCD_func$36 0006               __size_of_SD_init 014E  
      __size_of_SPI_Read_8Bits 0048                       __Hrparam 0000                       __Lrparam 0000  
                   SPI_delay@x 0001           SD_sendCommand@status 000B               __size_of___lldiv 0082  
         SD_writeSingleBlock@i 0015        __size_of_SPI_Send_8Bits 005A                       _cardType 0078  
           displayMemory@F3443 0080               ??_SD_sendCommand 000A                       __ptext10 B63A  
                     __ptext11 B35C                       __ptext20 AFD2                       __ptext12 B2DC  
                     __ptext21 AF84                       __ptext13 B210                       __ptext14 B07C  
                     __ptext15 AF96                       __ptext16 B164                       __ptext17 B03E  
                     __ptext18 AFBC                       __ptext19 B10E                       _fileSize 0057  
           SD_erase@startBlock 000E                     strcpy@from 0003              SD_init@SD_version 000E  
                __size_of_main 02FE                  __size_of_init 000E                       main@data 0047  
                     main@argc 0040                       main@argv 0042                     _LCD_enable AFD2  
                   _LCD_string B164               ___lldiv@dividend 0001               ___lldiv@quotient 0009  
                     strcpy@cp 0005                       strcpy@to 0001     getSetFreeCluster@totOrNext 0022  
     getSetFreeCluster@FSEntry 0019                 _SPI_Read_8Bits B07C                    _rootCluster 005F  
